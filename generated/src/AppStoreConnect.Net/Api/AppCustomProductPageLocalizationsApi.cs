/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AppStoreConnect.Client;
using AppStoreConnect.Model;

namespace AppStoreConnect.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppCustomProductPageLocalizationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPreviewType">filter by attribute &#39;previewType&#39; (optional)</param>
        /// <param name="filterAppStoreVersionExperimentTreatmentLocalization">filter by id(s) of related &#39;appStoreVersionExperimentTreatmentLocalization&#39; (optional)</param>
        /// <param name="filterAppStoreVersionLocalization">filter by id(s) of related &#39;appStoreVersionLocalization&#39; (optional)</param>
        /// <param name="fieldsAppCustomProductPageLocalizations">the fields to include for returned resources of type appCustomProductPageLocalizations (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="fieldsAppPreviews">the fields to include for returned resources of type appPreviews (optional)</param>
        /// <param name="fieldsAppPreviewSets">the fields to include for returned resources of type appPreviewSets (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitAppPreviews">maximum number of related appPreviews returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>AppPreviewSetsResponse</returns>
        AppPreviewSetsResponse AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelated(string id, List<string>? filterPreviewType = default(List<string>?), List<string>? filterAppStoreVersionExperimentTreatmentLocalization = default(List<string>?), List<string>? filterAppStoreVersionLocalization = default(List<string>?), List<string>? fieldsAppCustomProductPageLocalizations = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), List<string>? fieldsAppPreviews = default(List<string>?), List<string>? fieldsAppPreviewSets = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), int? limit = default(int?), int? limitAppPreviews = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPreviewType">filter by attribute &#39;previewType&#39; (optional)</param>
        /// <param name="filterAppStoreVersionExperimentTreatmentLocalization">filter by id(s) of related &#39;appStoreVersionExperimentTreatmentLocalization&#39; (optional)</param>
        /// <param name="filterAppStoreVersionLocalization">filter by id(s) of related &#39;appStoreVersionLocalization&#39; (optional)</param>
        /// <param name="fieldsAppCustomProductPageLocalizations">the fields to include for returned resources of type appCustomProductPageLocalizations (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="fieldsAppPreviews">the fields to include for returned resources of type appPreviews (optional)</param>
        /// <param name="fieldsAppPreviewSets">the fields to include for returned resources of type appPreviewSets (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitAppPreviews">maximum number of related appPreviews returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of AppPreviewSetsResponse</returns>
        ApiResponse<AppPreviewSetsResponse> AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedWithHttpInfo(string id, List<string>? filterPreviewType = default(List<string>?), List<string>? filterAppStoreVersionExperimentTreatmentLocalization = default(List<string>?), List<string>? filterAppStoreVersionLocalization = default(List<string>?), List<string>? fieldsAppCustomProductPageLocalizations = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), List<string>? fieldsAppPreviews = default(List<string>?), List<string>? fieldsAppPreviewSets = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), int? limit = default(int?), int? limitAppPreviews = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterScreenshotDisplayType">filter by attribute &#39;screenshotDisplayType&#39; (optional)</param>
        /// <param name="filterAppStoreVersionExperimentTreatmentLocalization">filter by id(s) of related &#39;appStoreVersionExperimentTreatmentLocalization&#39; (optional)</param>
        /// <param name="filterAppStoreVersionLocalization">filter by id(s) of related &#39;appStoreVersionLocalization&#39; (optional)</param>
        /// <param name="fieldsAppScreenshotSets">the fields to include for returned resources of type appScreenshotSets (optional)</param>
        /// <param name="fieldsAppCustomProductPageLocalizations">the fields to include for returned resources of type appCustomProductPageLocalizations (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="fieldsAppScreenshots">the fields to include for returned resources of type appScreenshots (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitAppScreenshots">maximum number of related appScreenshots returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>AppScreenshotSetsResponse</returns>
        AppScreenshotSetsResponse AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelated(string id, List<string>? filterScreenshotDisplayType = default(List<string>?), List<string>? filterAppStoreVersionExperimentTreatmentLocalization = default(List<string>?), List<string>? filterAppStoreVersionLocalization = default(List<string>?), List<string>? fieldsAppScreenshotSets = default(List<string>?), List<string>? fieldsAppCustomProductPageLocalizations = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), List<string>? fieldsAppScreenshots = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), int? limit = default(int?), int? limitAppScreenshots = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterScreenshotDisplayType">filter by attribute &#39;screenshotDisplayType&#39; (optional)</param>
        /// <param name="filterAppStoreVersionExperimentTreatmentLocalization">filter by id(s) of related &#39;appStoreVersionExperimentTreatmentLocalization&#39; (optional)</param>
        /// <param name="filterAppStoreVersionLocalization">filter by id(s) of related &#39;appStoreVersionLocalization&#39; (optional)</param>
        /// <param name="fieldsAppScreenshotSets">the fields to include for returned resources of type appScreenshotSets (optional)</param>
        /// <param name="fieldsAppCustomProductPageLocalizations">the fields to include for returned resources of type appCustomProductPageLocalizations (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="fieldsAppScreenshots">the fields to include for returned resources of type appScreenshots (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitAppScreenshots">maximum number of related appScreenshots returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of AppScreenshotSetsResponse</returns>
        ApiResponse<AppScreenshotSetsResponse> AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedWithHttpInfo(string id, List<string>? filterScreenshotDisplayType = default(List<string>?), List<string>? filterAppStoreVersionExperimentTreatmentLocalization = default(List<string>?), List<string>? filterAppStoreVersionLocalization = default(List<string>?), List<string>? fieldsAppScreenshotSets = default(List<string>?), List<string>? fieldsAppCustomProductPageLocalizations = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), List<string>? fieldsAppScreenshots = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), int? limit = default(int?), int? limitAppScreenshots = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appCustomProductPageLocalizationCreateRequest">AppCustomProductPageLocalization representation</param>
        /// <returns>AppCustomProductPageLocalizationResponse</returns>
        AppCustomProductPageLocalizationResponse AppCustomProductPageLocalizationsCreateInstance(AppCustomProductPageLocalizationCreateRequest appCustomProductPageLocalizationCreateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appCustomProductPageLocalizationCreateRequest">AppCustomProductPageLocalization representation</param>
        /// <returns>ApiResponse of AppCustomProductPageLocalizationResponse</returns>
        ApiResponse<AppCustomProductPageLocalizationResponse> AppCustomProductPageLocalizationsCreateInstanceWithHttpInfo(AppCustomProductPageLocalizationCreateRequest appCustomProductPageLocalizationCreateRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns></returns>
        void AppCustomProductPageLocalizationsDeleteInstance(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AppCustomProductPageLocalizationsDeleteInstanceWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppCustomProductPageLocalizations">the fields to include for returned resources of type appCustomProductPageLocalizations (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsAppScreenshotSets">the fields to include for returned resources of type appScreenshotSets (optional)</param>
        /// <param name="fieldsAppPreviewSets">the fields to include for returned resources of type appPreviewSets (optional)</param>
        /// <param name="limitAppPreviewSets">maximum number of related appPreviewSets returned (when they are included) (optional)</param>
        /// <param name="limitAppScreenshotSets">maximum number of related appScreenshotSets returned (when they are included) (optional)</param>
        /// <returns>AppCustomProductPageLocalizationResponse</returns>
        AppCustomProductPageLocalizationResponse AppCustomProductPageLocalizationsGetInstance(string id, List<string>? fieldsAppCustomProductPageLocalizations = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsAppScreenshotSets = default(List<string>?), List<string>? fieldsAppPreviewSets = default(List<string>?), int? limitAppPreviewSets = default(int?), int? limitAppScreenshotSets = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppCustomProductPageLocalizations">the fields to include for returned resources of type appCustomProductPageLocalizations (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsAppScreenshotSets">the fields to include for returned resources of type appScreenshotSets (optional)</param>
        /// <param name="fieldsAppPreviewSets">the fields to include for returned resources of type appPreviewSets (optional)</param>
        /// <param name="limitAppPreviewSets">maximum number of related appPreviewSets returned (when they are included) (optional)</param>
        /// <param name="limitAppScreenshotSets">maximum number of related appScreenshotSets returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppCustomProductPageLocalizationResponse</returns>
        ApiResponse<AppCustomProductPageLocalizationResponse> AppCustomProductPageLocalizationsGetInstanceWithHttpInfo(string id, List<string>? fieldsAppCustomProductPageLocalizations = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsAppScreenshotSets = default(List<string>?), List<string>? fieldsAppPreviewSets = default(List<string>?), int? limitAppPreviewSets = default(int?), int? limitAppScreenshotSets = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appCustomProductPageLocalizationUpdateRequest">AppCustomProductPageLocalization representation</param>
        /// <returns>AppCustomProductPageLocalizationResponse</returns>
        AppCustomProductPageLocalizationResponse AppCustomProductPageLocalizationsUpdateInstance(string id, AppCustomProductPageLocalizationUpdateRequest appCustomProductPageLocalizationUpdateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appCustomProductPageLocalizationUpdateRequest">AppCustomProductPageLocalization representation</param>
        /// <returns>ApiResponse of AppCustomProductPageLocalizationResponse</returns>
        ApiResponse<AppCustomProductPageLocalizationResponse> AppCustomProductPageLocalizationsUpdateInstanceWithHttpInfo(string id, AppCustomProductPageLocalizationUpdateRequest appCustomProductPageLocalizationUpdateRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppCustomProductPageLocalizationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPreviewType">filter by attribute &#39;previewType&#39; (optional)</param>
        /// <param name="filterAppStoreVersionExperimentTreatmentLocalization">filter by id(s) of related &#39;appStoreVersionExperimentTreatmentLocalization&#39; (optional)</param>
        /// <param name="filterAppStoreVersionLocalization">filter by id(s) of related &#39;appStoreVersionLocalization&#39; (optional)</param>
        /// <param name="fieldsAppCustomProductPageLocalizations">the fields to include for returned resources of type appCustomProductPageLocalizations (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="fieldsAppPreviews">the fields to include for returned resources of type appPreviews (optional)</param>
        /// <param name="fieldsAppPreviewSets">the fields to include for returned resources of type appPreviewSets (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitAppPreviews">maximum number of related appPreviews returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppPreviewSetsResponse</returns>
        System.Threading.Tasks.Task<AppPreviewSetsResponse> AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedAsync(string id, List<string>? filterPreviewType = default(List<string>?), List<string>? filterAppStoreVersionExperimentTreatmentLocalization = default(List<string>?), List<string>? filterAppStoreVersionLocalization = default(List<string>?), List<string>? fieldsAppCustomProductPageLocalizations = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), List<string>? fieldsAppPreviews = default(List<string>?), List<string>? fieldsAppPreviewSets = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), int? limit = default(int?), int? limitAppPreviews = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPreviewType">filter by attribute &#39;previewType&#39; (optional)</param>
        /// <param name="filterAppStoreVersionExperimentTreatmentLocalization">filter by id(s) of related &#39;appStoreVersionExperimentTreatmentLocalization&#39; (optional)</param>
        /// <param name="filterAppStoreVersionLocalization">filter by id(s) of related &#39;appStoreVersionLocalization&#39; (optional)</param>
        /// <param name="fieldsAppCustomProductPageLocalizations">the fields to include for returned resources of type appCustomProductPageLocalizations (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="fieldsAppPreviews">the fields to include for returned resources of type appPreviews (optional)</param>
        /// <param name="fieldsAppPreviewSets">the fields to include for returned resources of type appPreviewSets (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitAppPreviews">maximum number of related appPreviews returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppPreviewSetsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppPreviewSetsResponse>> AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterPreviewType = default(List<string>?), List<string>? filterAppStoreVersionExperimentTreatmentLocalization = default(List<string>?), List<string>? filterAppStoreVersionLocalization = default(List<string>?), List<string>? fieldsAppCustomProductPageLocalizations = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), List<string>? fieldsAppPreviews = default(List<string>?), List<string>? fieldsAppPreviewSets = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), int? limit = default(int?), int? limitAppPreviews = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterScreenshotDisplayType">filter by attribute &#39;screenshotDisplayType&#39; (optional)</param>
        /// <param name="filterAppStoreVersionExperimentTreatmentLocalization">filter by id(s) of related &#39;appStoreVersionExperimentTreatmentLocalization&#39; (optional)</param>
        /// <param name="filterAppStoreVersionLocalization">filter by id(s) of related &#39;appStoreVersionLocalization&#39; (optional)</param>
        /// <param name="fieldsAppScreenshotSets">the fields to include for returned resources of type appScreenshotSets (optional)</param>
        /// <param name="fieldsAppCustomProductPageLocalizations">the fields to include for returned resources of type appCustomProductPageLocalizations (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="fieldsAppScreenshots">the fields to include for returned resources of type appScreenshots (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitAppScreenshots">maximum number of related appScreenshots returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppScreenshotSetsResponse</returns>
        System.Threading.Tasks.Task<AppScreenshotSetsResponse> AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedAsync(string id, List<string>? filterScreenshotDisplayType = default(List<string>?), List<string>? filterAppStoreVersionExperimentTreatmentLocalization = default(List<string>?), List<string>? filterAppStoreVersionLocalization = default(List<string>?), List<string>? fieldsAppScreenshotSets = default(List<string>?), List<string>? fieldsAppCustomProductPageLocalizations = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), List<string>? fieldsAppScreenshots = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), int? limit = default(int?), int? limitAppScreenshots = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterScreenshotDisplayType">filter by attribute &#39;screenshotDisplayType&#39; (optional)</param>
        /// <param name="filterAppStoreVersionExperimentTreatmentLocalization">filter by id(s) of related &#39;appStoreVersionExperimentTreatmentLocalization&#39; (optional)</param>
        /// <param name="filterAppStoreVersionLocalization">filter by id(s) of related &#39;appStoreVersionLocalization&#39; (optional)</param>
        /// <param name="fieldsAppScreenshotSets">the fields to include for returned resources of type appScreenshotSets (optional)</param>
        /// <param name="fieldsAppCustomProductPageLocalizations">the fields to include for returned resources of type appCustomProductPageLocalizations (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="fieldsAppScreenshots">the fields to include for returned resources of type appScreenshots (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitAppScreenshots">maximum number of related appScreenshots returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppScreenshotSetsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppScreenshotSetsResponse>> AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterScreenshotDisplayType = default(List<string>?), List<string>? filterAppStoreVersionExperimentTreatmentLocalization = default(List<string>?), List<string>? filterAppStoreVersionLocalization = default(List<string>?), List<string>? fieldsAppScreenshotSets = default(List<string>?), List<string>? fieldsAppCustomProductPageLocalizations = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), List<string>? fieldsAppScreenshots = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), int? limit = default(int?), int? limitAppScreenshots = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appCustomProductPageLocalizationCreateRequest">AppCustomProductPageLocalization representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppCustomProductPageLocalizationResponse</returns>
        System.Threading.Tasks.Task<AppCustomProductPageLocalizationResponse> AppCustomProductPageLocalizationsCreateInstanceAsync(AppCustomProductPageLocalizationCreateRequest appCustomProductPageLocalizationCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appCustomProductPageLocalizationCreateRequest">AppCustomProductPageLocalization representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppCustomProductPageLocalizationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppCustomProductPageLocalizationResponse>> AppCustomProductPageLocalizationsCreateInstanceWithHttpInfoAsync(AppCustomProductPageLocalizationCreateRequest appCustomProductPageLocalizationCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AppCustomProductPageLocalizationsDeleteInstanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppCustomProductPageLocalizationsDeleteInstanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppCustomProductPageLocalizations">the fields to include for returned resources of type appCustomProductPageLocalizations (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsAppScreenshotSets">the fields to include for returned resources of type appScreenshotSets (optional)</param>
        /// <param name="fieldsAppPreviewSets">the fields to include for returned resources of type appPreviewSets (optional)</param>
        /// <param name="limitAppPreviewSets">maximum number of related appPreviewSets returned (when they are included) (optional)</param>
        /// <param name="limitAppScreenshotSets">maximum number of related appScreenshotSets returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppCustomProductPageLocalizationResponse</returns>
        System.Threading.Tasks.Task<AppCustomProductPageLocalizationResponse> AppCustomProductPageLocalizationsGetInstanceAsync(string id, List<string>? fieldsAppCustomProductPageLocalizations = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsAppScreenshotSets = default(List<string>?), List<string>? fieldsAppPreviewSets = default(List<string>?), int? limitAppPreviewSets = default(int?), int? limitAppScreenshotSets = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppCustomProductPageLocalizations">the fields to include for returned resources of type appCustomProductPageLocalizations (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsAppScreenshotSets">the fields to include for returned resources of type appScreenshotSets (optional)</param>
        /// <param name="fieldsAppPreviewSets">the fields to include for returned resources of type appPreviewSets (optional)</param>
        /// <param name="limitAppPreviewSets">maximum number of related appPreviewSets returned (when they are included) (optional)</param>
        /// <param name="limitAppScreenshotSets">maximum number of related appScreenshotSets returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppCustomProductPageLocalizationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppCustomProductPageLocalizationResponse>> AppCustomProductPageLocalizationsGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsAppCustomProductPageLocalizations = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsAppScreenshotSets = default(List<string>?), List<string>? fieldsAppPreviewSets = default(List<string>?), int? limitAppPreviewSets = default(int?), int? limitAppScreenshotSets = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appCustomProductPageLocalizationUpdateRequest">AppCustomProductPageLocalization representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppCustomProductPageLocalizationResponse</returns>
        System.Threading.Tasks.Task<AppCustomProductPageLocalizationResponse> AppCustomProductPageLocalizationsUpdateInstanceAsync(string id, AppCustomProductPageLocalizationUpdateRequest appCustomProductPageLocalizationUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appCustomProductPageLocalizationUpdateRequest">AppCustomProductPageLocalization representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppCustomProductPageLocalizationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppCustomProductPageLocalizationResponse>> AppCustomProductPageLocalizationsUpdateInstanceWithHttpInfoAsync(string id, AppCustomProductPageLocalizationUpdateRequest appCustomProductPageLocalizationUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppCustomProductPageLocalizationsApi : IAppCustomProductPageLocalizationsApiSync, IAppCustomProductPageLocalizationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AppCustomProductPageLocalizationsApi : IDisposable, IAppCustomProductPageLocalizationsApi
    {
        private AppStoreConnect.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCustomProductPageLocalizationsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public AppCustomProductPageLocalizationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCustomProductPageLocalizationsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public AppCustomProductPageLocalizationsApi(string basePath)
        {
            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCustomProductPageLocalizationsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public AppCustomProductPageLocalizationsApi(AppStoreConnect.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCustomProductPageLocalizationsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AppCustomProductPageLocalizationsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCustomProductPageLocalizationsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AppCustomProductPageLocalizationsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCustomProductPageLocalizationsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AppCustomProductPageLocalizationsApi(HttpClient client, AppStoreConnect.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppCustomProductPageLocalizationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public AppCustomProductPageLocalizationsApi(AppStoreConnect.Client.ISynchronousClient client, AppStoreConnect.Client.IAsynchronousClient asyncClient, AppStoreConnect.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AppStoreConnect.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AppStoreConnect.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AppStoreConnect.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AppStoreConnect.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AppStoreConnect.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPreviewType">filter by attribute &#39;previewType&#39; (optional)</param>
        /// <param name="filterAppStoreVersionExperimentTreatmentLocalization">filter by id(s) of related &#39;appStoreVersionExperimentTreatmentLocalization&#39; (optional)</param>
        /// <param name="filterAppStoreVersionLocalization">filter by id(s) of related &#39;appStoreVersionLocalization&#39; (optional)</param>
        /// <param name="fieldsAppCustomProductPageLocalizations">the fields to include for returned resources of type appCustomProductPageLocalizations (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="fieldsAppPreviews">the fields to include for returned resources of type appPreviews (optional)</param>
        /// <param name="fieldsAppPreviewSets">the fields to include for returned resources of type appPreviewSets (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitAppPreviews">maximum number of related appPreviews returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>AppPreviewSetsResponse</returns>
        public AppPreviewSetsResponse AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelated(string id, List<string>? filterPreviewType = default(List<string>?), List<string>? filterAppStoreVersionExperimentTreatmentLocalization = default(List<string>?), List<string>? filterAppStoreVersionLocalization = default(List<string>?), List<string>? fieldsAppCustomProductPageLocalizations = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), List<string>? fieldsAppPreviews = default(List<string>?), List<string>? fieldsAppPreviewSets = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), int? limit = default(int?), int? limitAppPreviews = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Client.ApiResponse<AppPreviewSetsResponse> localVarResponse = AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedWithHttpInfo(id, filterPreviewType, filterAppStoreVersionExperimentTreatmentLocalization, filterAppStoreVersionLocalization, fieldsAppCustomProductPageLocalizations, fieldsAppStoreVersionExperimentTreatmentLocalizations, fieldsAppPreviews, fieldsAppPreviewSets, fieldsAppStoreVersionLocalizations, limit, limitAppPreviews, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPreviewType">filter by attribute &#39;previewType&#39; (optional)</param>
        /// <param name="filterAppStoreVersionExperimentTreatmentLocalization">filter by id(s) of related &#39;appStoreVersionExperimentTreatmentLocalization&#39; (optional)</param>
        /// <param name="filterAppStoreVersionLocalization">filter by id(s) of related &#39;appStoreVersionLocalization&#39; (optional)</param>
        /// <param name="fieldsAppCustomProductPageLocalizations">the fields to include for returned resources of type appCustomProductPageLocalizations (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="fieldsAppPreviews">the fields to include for returned resources of type appPreviews (optional)</param>
        /// <param name="fieldsAppPreviewSets">the fields to include for returned resources of type appPreviewSets (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitAppPreviews">maximum number of related appPreviews returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of AppPreviewSetsResponse</returns>
        public AppStoreConnect.Client.ApiResponse<AppPreviewSetsResponse> AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedWithHttpInfo(string id, List<string>? filterPreviewType = default(List<string>?), List<string>? filterAppStoreVersionExperimentTreatmentLocalization = default(List<string>?), List<string>? filterAppStoreVersionLocalization = default(List<string>?), List<string>? fieldsAppCustomProductPageLocalizations = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), List<string>? fieldsAppPreviews = default(List<string>?), List<string>? fieldsAppPreviewSets = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), int? limit = default(int?), int? limitAppPreviews = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppCustomProductPageLocalizationsApi->AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelated");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterPreviewType != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[previewType]", filterPreviewType));
            }
            if (filterAppStoreVersionExperimentTreatmentLocalization != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[appStoreVersionExperimentTreatmentLocalization]", filterAppStoreVersionExperimentTreatmentLocalization));
            }
            if (filterAppStoreVersionLocalization != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[appStoreVersionLocalization]", filterAppStoreVersionLocalization));
            }
            if (fieldsAppCustomProductPageLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appCustomProductPageLocalizations]", fieldsAppCustomProductPageLocalizations));
            }
            if (fieldsAppStoreVersionExperimentTreatmentLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperimentTreatmentLocalizations]", fieldsAppStoreVersionExperimentTreatmentLocalizations));
            }
            if (fieldsAppPreviews != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPreviews]", fieldsAppPreviews));
            }
            if (fieldsAppPreviewSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPreviewSets]", fieldsAppPreviewSets));
            }
            if (fieldsAppStoreVersionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionLocalizations]", fieldsAppStoreVersionLocalizations));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (limitAppPreviews != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[appPreviews]", limitAppPreviews));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppPreviewSetsResponse>("/v1/appCustomProductPageLocalizations/{id}/appPreviewSets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPreviewType">filter by attribute &#39;previewType&#39; (optional)</param>
        /// <param name="filterAppStoreVersionExperimentTreatmentLocalization">filter by id(s) of related &#39;appStoreVersionExperimentTreatmentLocalization&#39; (optional)</param>
        /// <param name="filterAppStoreVersionLocalization">filter by id(s) of related &#39;appStoreVersionLocalization&#39; (optional)</param>
        /// <param name="fieldsAppCustomProductPageLocalizations">the fields to include for returned resources of type appCustomProductPageLocalizations (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="fieldsAppPreviews">the fields to include for returned resources of type appPreviews (optional)</param>
        /// <param name="fieldsAppPreviewSets">the fields to include for returned resources of type appPreviewSets (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitAppPreviews">maximum number of related appPreviews returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppPreviewSetsResponse</returns>
        public async System.Threading.Tasks.Task<AppPreviewSetsResponse> AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedAsync(string id, List<string>? filterPreviewType = default(List<string>?), List<string>? filterAppStoreVersionExperimentTreatmentLocalization = default(List<string>?), List<string>? filterAppStoreVersionLocalization = default(List<string>?), List<string>? fieldsAppCustomProductPageLocalizations = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), List<string>? fieldsAppPreviews = default(List<string>?), List<string>? fieldsAppPreviewSets = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), int? limit = default(int?), int? limitAppPreviews = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<AppPreviewSetsResponse> localVarResponse = await AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedWithHttpInfoAsync(id, filterPreviewType, filterAppStoreVersionExperimentTreatmentLocalization, filterAppStoreVersionLocalization, fieldsAppCustomProductPageLocalizations, fieldsAppStoreVersionExperimentTreatmentLocalizations, fieldsAppPreviews, fieldsAppPreviewSets, fieldsAppStoreVersionLocalizations, limit, limitAppPreviews, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPreviewType">filter by attribute &#39;previewType&#39; (optional)</param>
        /// <param name="filterAppStoreVersionExperimentTreatmentLocalization">filter by id(s) of related &#39;appStoreVersionExperimentTreatmentLocalization&#39; (optional)</param>
        /// <param name="filterAppStoreVersionLocalization">filter by id(s) of related &#39;appStoreVersionLocalization&#39; (optional)</param>
        /// <param name="fieldsAppCustomProductPageLocalizations">the fields to include for returned resources of type appCustomProductPageLocalizations (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="fieldsAppPreviews">the fields to include for returned resources of type appPreviews (optional)</param>
        /// <param name="fieldsAppPreviewSets">the fields to include for returned resources of type appPreviewSets (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitAppPreviews">maximum number of related appPreviews returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppPreviewSetsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<AppPreviewSetsResponse>> AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterPreviewType = default(List<string>?), List<string>? filterAppStoreVersionExperimentTreatmentLocalization = default(List<string>?), List<string>? filterAppStoreVersionLocalization = default(List<string>?), List<string>? fieldsAppCustomProductPageLocalizations = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), List<string>? fieldsAppPreviews = default(List<string>?), List<string>? fieldsAppPreviewSets = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), int? limit = default(int?), int? limitAppPreviews = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppCustomProductPageLocalizationsApi->AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelated");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterPreviewType != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[previewType]", filterPreviewType));
            }
            if (filterAppStoreVersionExperimentTreatmentLocalization != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[appStoreVersionExperimentTreatmentLocalization]", filterAppStoreVersionExperimentTreatmentLocalization));
            }
            if (filterAppStoreVersionLocalization != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[appStoreVersionLocalization]", filterAppStoreVersionLocalization));
            }
            if (fieldsAppCustomProductPageLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appCustomProductPageLocalizations]", fieldsAppCustomProductPageLocalizations));
            }
            if (fieldsAppStoreVersionExperimentTreatmentLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperimentTreatmentLocalizations]", fieldsAppStoreVersionExperimentTreatmentLocalizations));
            }
            if (fieldsAppPreviews != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPreviews]", fieldsAppPreviews));
            }
            if (fieldsAppPreviewSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPreviewSets]", fieldsAppPreviewSets));
            }
            if (fieldsAppStoreVersionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionLocalizations]", fieldsAppStoreVersionLocalizations));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (limitAppPreviews != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[appPreviews]", limitAppPreviews));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppPreviewSetsResponse>("/v1/appCustomProductPageLocalizations/{id}/appPreviewSets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterScreenshotDisplayType">filter by attribute &#39;screenshotDisplayType&#39; (optional)</param>
        /// <param name="filterAppStoreVersionExperimentTreatmentLocalization">filter by id(s) of related &#39;appStoreVersionExperimentTreatmentLocalization&#39; (optional)</param>
        /// <param name="filterAppStoreVersionLocalization">filter by id(s) of related &#39;appStoreVersionLocalization&#39; (optional)</param>
        /// <param name="fieldsAppScreenshotSets">the fields to include for returned resources of type appScreenshotSets (optional)</param>
        /// <param name="fieldsAppCustomProductPageLocalizations">the fields to include for returned resources of type appCustomProductPageLocalizations (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="fieldsAppScreenshots">the fields to include for returned resources of type appScreenshots (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitAppScreenshots">maximum number of related appScreenshots returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>AppScreenshotSetsResponse</returns>
        public AppScreenshotSetsResponse AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelated(string id, List<string>? filterScreenshotDisplayType = default(List<string>?), List<string>? filterAppStoreVersionExperimentTreatmentLocalization = default(List<string>?), List<string>? filterAppStoreVersionLocalization = default(List<string>?), List<string>? fieldsAppScreenshotSets = default(List<string>?), List<string>? fieldsAppCustomProductPageLocalizations = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), List<string>? fieldsAppScreenshots = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), int? limit = default(int?), int? limitAppScreenshots = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Client.ApiResponse<AppScreenshotSetsResponse> localVarResponse = AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedWithHttpInfo(id, filterScreenshotDisplayType, filterAppStoreVersionExperimentTreatmentLocalization, filterAppStoreVersionLocalization, fieldsAppScreenshotSets, fieldsAppCustomProductPageLocalizations, fieldsAppStoreVersionExperimentTreatmentLocalizations, fieldsAppScreenshots, fieldsAppStoreVersionLocalizations, limit, limitAppScreenshots, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterScreenshotDisplayType">filter by attribute &#39;screenshotDisplayType&#39; (optional)</param>
        /// <param name="filterAppStoreVersionExperimentTreatmentLocalization">filter by id(s) of related &#39;appStoreVersionExperimentTreatmentLocalization&#39; (optional)</param>
        /// <param name="filterAppStoreVersionLocalization">filter by id(s) of related &#39;appStoreVersionLocalization&#39; (optional)</param>
        /// <param name="fieldsAppScreenshotSets">the fields to include for returned resources of type appScreenshotSets (optional)</param>
        /// <param name="fieldsAppCustomProductPageLocalizations">the fields to include for returned resources of type appCustomProductPageLocalizations (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="fieldsAppScreenshots">the fields to include for returned resources of type appScreenshots (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitAppScreenshots">maximum number of related appScreenshots returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of AppScreenshotSetsResponse</returns>
        public AppStoreConnect.Client.ApiResponse<AppScreenshotSetsResponse> AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedWithHttpInfo(string id, List<string>? filterScreenshotDisplayType = default(List<string>?), List<string>? filterAppStoreVersionExperimentTreatmentLocalization = default(List<string>?), List<string>? filterAppStoreVersionLocalization = default(List<string>?), List<string>? fieldsAppScreenshotSets = default(List<string>?), List<string>? fieldsAppCustomProductPageLocalizations = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), List<string>? fieldsAppScreenshots = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), int? limit = default(int?), int? limitAppScreenshots = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppCustomProductPageLocalizationsApi->AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelated");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterScreenshotDisplayType != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[screenshotDisplayType]", filterScreenshotDisplayType));
            }
            if (filterAppStoreVersionExperimentTreatmentLocalization != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[appStoreVersionExperimentTreatmentLocalization]", filterAppStoreVersionExperimentTreatmentLocalization));
            }
            if (filterAppStoreVersionLocalization != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[appStoreVersionLocalization]", filterAppStoreVersionLocalization));
            }
            if (fieldsAppScreenshotSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appScreenshotSets]", fieldsAppScreenshotSets));
            }
            if (fieldsAppCustomProductPageLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appCustomProductPageLocalizations]", fieldsAppCustomProductPageLocalizations));
            }
            if (fieldsAppStoreVersionExperimentTreatmentLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperimentTreatmentLocalizations]", fieldsAppStoreVersionExperimentTreatmentLocalizations));
            }
            if (fieldsAppScreenshots != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appScreenshots]", fieldsAppScreenshots));
            }
            if (fieldsAppStoreVersionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionLocalizations]", fieldsAppStoreVersionLocalizations));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (limitAppScreenshots != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[appScreenshots]", limitAppScreenshots));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppScreenshotSetsResponse>("/v1/appCustomProductPageLocalizations/{id}/appScreenshotSets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterScreenshotDisplayType">filter by attribute &#39;screenshotDisplayType&#39; (optional)</param>
        /// <param name="filterAppStoreVersionExperimentTreatmentLocalization">filter by id(s) of related &#39;appStoreVersionExperimentTreatmentLocalization&#39; (optional)</param>
        /// <param name="filterAppStoreVersionLocalization">filter by id(s) of related &#39;appStoreVersionLocalization&#39; (optional)</param>
        /// <param name="fieldsAppScreenshotSets">the fields to include for returned resources of type appScreenshotSets (optional)</param>
        /// <param name="fieldsAppCustomProductPageLocalizations">the fields to include for returned resources of type appCustomProductPageLocalizations (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="fieldsAppScreenshots">the fields to include for returned resources of type appScreenshots (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitAppScreenshots">maximum number of related appScreenshots returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppScreenshotSetsResponse</returns>
        public async System.Threading.Tasks.Task<AppScreenshotSetsResponse> AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedAsync(string id, List<string>? filterScreenshotDisplayType = default(List<string>?), List<string>? filterAppStoreVersionExperimentTreatmentLocalization = default(List<string>?), List<string>? filterAppStoreVersionLocalization = default(List<string>?), List<string>? fieldsAppScreenshotSets = default(List<string>?), List<string>? fieldsAppCustomProductPageLocalizations = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), List<string>? fieldsAppScreenshots = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), int? limit = default(int?), int? limitAppScreenshots = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<AppScreenshotSetsResponse> localVarResponse = await AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedWithHttpInfoAsync(id, filterScreenshotDisplayType, filterAppStoreVersionExperimentTreatmentLocalization, filterAppStoreVersionLocalization, fieldsAppScreenshotSets, fieldsAppCustomProductPageLocalizations, fieldsAppStoreVersionExperimentTreatmentLocalizations, fieldsAppScreenshots, fieldsAppStoreVersionLocalizations, limit, limitAppScreenshots, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterScreenshotDisplayType">filter by attribute &#39;screenshotDisplayType&#39; (optional)</param>
        /// <param name="filterAppStoreVersionExperimentTreatmentLocalization">filter by id(s) of related &#39;appStoreVersionExperimentTreatmentLocalization&#39; (optional)</param>
        /// <param name="filterAppStoreVersionLocalization">filter by id(s) of related &#39;appStoreVersionLocalization&#39; (optional)</param>
        /// <param name="fieldsAppScreenshotSets">the fields to include for returned resources of type appScreenshotSets (optional)</param>
        /// <param name="fieldsAppCustomProductPageLocalizations">the fields to include for returned resources of type appCustomProductPageLocalizations (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="fieldsAppScreenshots">the fields to include for returned resources of type appScreenshots (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitAppScreenshots">maximum number of related appScreenshots returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppScreenshotSetsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<AppScreenshotSetsResponse>> AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterScreenshotDisplayType = default(List<string>?), List<string>? filterAppStoreVersionExperimentTreatmentLocalization = default(List<string>?), List<string>? filterAppStoreVersionLocalization = default(List<string>?), List<string>? fieldsAppScreenshotSets = default(List<string>?), List<string>? fieldsAppCustomProductPageLocalizations = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), List<string>? fieldsAppScreenshots = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), int? limit = default(int?), int? limitAppScreenshots = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppCustomProductPageLocalizationsApi->AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelated");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterScreenshotDisplayType != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[screenshotDisplayType]", filterScreenshotDisplayType));
            }
            if (filterAppStoreVersionExperimentTreatmentLocalization != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[appStoreVersionExperimentTreatmentLocalization]", filterAppStoreVersionExperimentTreatmentLocalization));
            }
            if (filterAppStoreVersionLocalization != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[appStoreVersionLocalization]", filterAppStoreVersionLocalization));
            }
            if (fieldsAppScreenshotSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appScreenshotSets]", fieldsAppScreenshotSets));
            }
            if (fieldsAppCustomProductPageLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appCustomProductPageLocalizations]", fieldsAppCustomProductPageLocalizations));
            }
            if (fieldsAppStoreVersionExperimentTreatmentLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperimentTreatmentLocalizations]", fieldsAppStoreVersionExperimentTreatmentLocalizations));
            }
            if (fieldsAppScreenshots != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appScreenshots]", fieldsAppScreenshots));
            }
            if (fieldsAppStoreVersionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionLocalizations]", fieldsAppStoreVersionLocalizations));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (limitAppScreenshots != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[appScreenshots]", limitAppScreenshots));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppScreenshotSetsResponse>("/v1/appCustomProductPageLocalizations/{id}/appScreenshotSets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appCustomProductPageLocalizationCreateRequest">AppCustomProductPageLocalization representation</param>
        /// <returns>AppCustomProductPageLocalizationResponse</returns>
        public AppCustomProductPageLocalizationResponse AppCustomProductPageLocalizationsCreateInstance(AppCustomProductPageLocalizationCreateRequest appCustomProductPageLocalizationCreateRequest)
        {
            AppStoreConnect.Client.ApiResponse<AppCustomProductPageLocalizationResponse> localVarResponse = AppCustomProductPageLocalizationsCreateInstanceWithHttpInfo(appCustomProductPageLocalizationCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appCustomProductPageLocalizationCreateRequest">AppCustomProductPageLocalization representation</param>
        /// <returns>ApiResponse of AppCustomProductPageLocalizationResponse</returns>
        public AppStoreConnect.Client.ApiResponse<AppCustomProductPageLocalizationResponse> AppCustomProductPageLocalizationsCreateInstanceWithHttpInfo(AppCustomProductPageLocalizationCreateRequest appCustomProductPageLocalizationCreateRequest)
        {
            // verify the required parameter 'appCustomProductPageLocalizationCreateRequest' is set
            if (appCustomProductPageLocalizationCreateRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'appCustomProductPageLocalizationCreateRequest' when calling AppCustomProductPageLocalizationsApi->AppCustomProductPageLocalizationsCreateInstance");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = appCustomProductPageLocalizationCreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AppCustomProductPageLocalizationResponse>("/v1/appCustomProductPageLocalizations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppCustomProductPageLocalizationsCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appCustomProductPageLocalizationCreateRequest">AppCustomProductPageLocalization representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppCustomProductPageLocalizationResponse</returns>
        public async System.Threading.Tasks.Task<AppCustomProductPageLocalizationResponse> AppCustomProductPageLocalizationsCreateInstanceAsync(AppCustomProductPageLocalizationCreateRequest appCustomProductPageLocalizationCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<AppCustomProductPageLocalizationResponse> localVarResponse = await AppCustomProductPageLocalizationsCreateInstanceWithHttpInfoAsync(appCustomProductPageLocalizationCreateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appCustomProductPageLocalizationCreateRequest">AppCustomProductPageLocalization representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppCustomProductPageLocalizationResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<AppCustomProductPageLocalizationResponse>> AppCustomProductPageLocalizationsCreateInstanceWithHttpInfoAsync(AppCustomProductPageLocalizationCreateRequest appCustomProductPageLocalizationCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appCustomProductPageLocalizationCreateRequest' is set
            if (appCustomProductPageLocalizationCreateRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'appCustomProductPageLocalizationCreateRequest' when calling AppCustomProductPageLocalizationsApi->AppCustomProductPageLocalizationsCreateInstance");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = appCustomProductPageLocalizationCreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AppCustomProductPageLocalizationResponse>("/v1/appCustomProductPageLocalizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppCustomProductPageLocalizationsCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns></returns>
        public void AppCustomProductPageLocalizationsDeleteInstance(string id)
        {
            AppCustomProductPageLocalizationsDeleteInstanceWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Client.ApiResponse<Object> AppCustomProductPageLocalizationsDeleteInstanceWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppCustomProductPageLocalizationsApi->AppCustomProductPageLocalizationsDeleteInstance");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/appCustomProductPageLocalizations/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppCustomProductPageLocalizationsDeleteInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AppCustomProductPageLocalizationsDeleteInstanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AppCustomProductPageLocalizationsDeleteInstanceWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<Object>> AppCustomProductPageLocalizationsDeleteInstanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppCustomProductPageLocalizationsApi->AppCustomProductPageLocalizationsDeleteInstance");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/appCustomProductPageLocalizations/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppCustomProductPageLocalizationsDeleteInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppCustomProductPageLocalizations">the fields to include for returned resources of type appCustomProductPageLocalizations (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsAppScreenshotSets">the fields to include for returned resources of type appScreenshotSets (optional)</param>
        /// <param name="fieldsAppPreviewSets">the fields to include for returned resources of type appPreviewSets (optional)</param>
        /// <param name="limitAppPreviewSets">maximum number of related appPreviewSets returned (when they are included) (optional)</param>
        /// <param name="limitAppScreenshotSets">maximum number of related appScreenshotSets returned (when they are included) (optional)</param>
        /// <returns>AppCustomProductPageLocalizationResponse</returns>
        public AppCustomProductPageLocalizationResponse AppCustomProductPageLocalizationsGetInstance(string id, List<string>? fieldsAppCustomProductPageLocalizations = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsAppScreenshotSets = default(List<string>?), List<string>? fieldsAppPreviewSets = default(List<string>?), int? limitAppPreviewSets = default(int?), int? limitAppScreenshotSets = default(int?))
        {
            AppStoreConnect.Client.ApiResponse<AppCustomProductPageLocalizationResponse> localVarResponse = AppCustomProductPageLocalizationsGetInstanceWithHttpInfo(id, fieldsAppCustomProductPageLocalizations, include, fieldsAppScreenshotSets, fieldsAppPreviewSets, limitAppPreviewSets, limitAppScreenshotSets);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppCustomProductPageLocalizations">the fields to include for returned resources of type appCustomProductPageLocalizations (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsAppScreenshotSets">the fields to include for returned resources of type appScreenshotSets (optional)</param>
        /// <param name="fieldsAppPreviewSets">the fields to include for returned resources of type appPreviewSets (optional)</param>
        /// <param name="limitAppPreviewSets">maximum number of related appPreviewSets returned (when they are included) (optional)</param>
        /// <param name="limitAppScreenshotSets">maximum number of related appScreenshotSets returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppCustomProductPageLocalizationResponse</returns>
        public AppStoreConnect.Client.ApiResponse<AppCustomProductPageLocalizationResponse> AppCustomProductPageLocalizationsGetInstanceWithHttpInfo(string id, List<string>? fieldsAppCustomProductPageLocalizations = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsAppScreenshotSets = default(List<string>?), List<string>? fieldsAppPreviewSets = default(List<string>?), int? limitAppPreviewSets = default(int?), int? limitAppScreenshotSets = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppCustomProductPageLocalizationsApi->AppCustomProductPageLocalizationsGetInstance");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppCustomProductPageLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appCustomProductPageLocalizations]", fieldsAppCustomProductPageLocalizations));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (fieldsAppScreenshotSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appScreenshotSets]", fieldsAppScreenshotSets));
            }
            if (fieldsAppPreviewSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPreviewSets]", fieldsAppPreviewSets));
            }
            if (limitAppPreviewSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[appPreviewSets]", limitAppPreviewSets));
            }
            if (limitAppScreenshotSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[appScreenshotSets]", limitAppScreenshotSets));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppCustomProductPageLocalizationResponse>("/v1/appCustomProductPageLocalizations/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppCustomProductPageLocalizationsGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppCustomProductPageLocalizations">the fields to include for returned resources of type appCustomProductPageLocalizations (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsAppScreenshotSets">the fields to include for returned resources of type appScreenshotSets (optional)</param>
        /// <param name="fieldsAppPreviewSets">the fields to include for returned resources of type appPreviewSets (optional)</param>
        /// <param name="limitAppPreviewSets">maximum number of related appPreviewSets returned (when they are included) (optional)</param>
        /// <param name="limitAppScreenshotSets">maximum number of related appScreenshotSets returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppCustomProductPageLocalizationResponse</returns>
        public async System.Threading.Tasks.Task<AppCustomProductPageLocalizationResponse> AppCustomProductPageLocalizationsGetInstanceAsync(string id, List<string>? fieldsAppCustomProductPageLocalizations = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsAppScreenshotSets = default(List<string>?), List<string>? fieldsAppPreviewSets = default(List<string>?), int? limitAppPreviewSets = default(int?), int? limitAppScreenshotSets = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<AppCustomProductPageLocalizationResponse> localVarResponse = await AppCustomProductPageLocalizationsGetInstanceWithHttpInfoAsync(id, fieldsAppCustomProductPageLocalizations, include, fieldsAppScreenshotSets, fieldsAppPreviewSets, limitAppPreviewSets, limitAppScreenshotSets, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppCustomProductPageLocalizations">the fields to include for returned resources of type appCustomProductPageLocalizations (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsAppScreenshotSets">the fields to include for returned resources of type appScreenshotSets (optional)</param>
        /// <param name="fieldsAppPreviewSets">the fields to include for returned resources of type appPreviewSets (optional)</param>
        /// <param name="limitAppPreviewSets">maximum number of related appPreviewSets returned (when they are included) (optional)</param>
        /// <param name="limitAppScreenshotSets">maximum number of related appScreenshotSets returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppCustomProductPageLocalizationResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<AppCustomProductPageLocalizationResponse>> AppCustomProductPageLocalizationsGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsAppCustomProductPageLocalizations = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsAppScreenshotSets = default(List<string>?), List<string>? fieldsAppPreviewSets = default(List<string>?), int? limitAppPreviewSets = default(int?), int? limitAppScreenshotSets = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppCustomProductPageLocalizationsApi->AppCustomProductPageLocalizationsGetInstance");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppCustomProductPageLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appCustomProductPageLocalizations]", fieldsAppCustomProductPageLocalizations));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (fieldsAppScreenshotSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appScreenshotSets]", fieldsAppScreenshotSets));
            }
            if (fieldsAppPreviewSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPreviewSets]", fieldsAppPreviewSets));
            }
            if (limitAppPreviewSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[appPreviewSets]", limitAppPreviewSets));
            }
            if (limitAppScreenshotSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[appScreenshotSets]", limitAppScreenshotSets));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppCustomProductPageLocalizationResponse>("/v1/appCustomProductPageLocalizations/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppCustomProductPageLocalizationsGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appCustomProductPageLocalizationUpdateRequest">AppCustomProductPageLocalization representation</param>
        /// <returns>AppCustomProductPageLocalizationResponse</returns>
        public AppCustomProductPageLocalizationResponse AppCustomProductPageLocalizationsUpdateInstance(string id, AppCustomProductPageLocalizationUpdateRequest appCustomProductPageLocalizationUpdateRequest)
        {
            AppStoreConnect.Client.ApiResponse<AppCustomProductPageLocalizationResponse> localVarResponse = AppCustomProductPageLocalizationsUpdateInstanceWithHttpInfo(id, appCustomProductPageLocalizationUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appCustomProductPageLocalizationUpdateRequest">AppCustomProductPageLocalization representation</param>
        /// <returns>ApiResponse of AppCustomProductPageLocalizationResponse</returns>
        public AppStoreConnect.Client.ApiResponse<AppCustomProductPageLocalizationResponse> AppCustomProductPageLocalizationsUpdateInstanceWithHttpInfo(string id, AppCustomProductPageLocalizationUpdateRequest appCustomProductPageLocalizationUpdateRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppCustomProductPageLocalizationsApi->AppCustomProductPageLocalizationsUpdateInstance");

            // verify the required parameter 'appCustomProductPageLocalizationUpdateRequest' is set
            if (appCustomProductPageLocalizationUpdateRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'appCustomProductPageLocalizationUpdateRequest' when calling AppCustomProductPageLocalizationsApi->AppCustomProductPageLocalizationsUpdateInstance");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = appCustomProductPageLocalizationUpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<AppCustomProductPageLocalizationResponse>("/v1/appCustomProductPageLocalizations/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppCustomProductPageLocalizationsUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appCustomProductPageLocalizationUpdateRequest">AppCustomProductPageLocalization representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppCustomProductPageLocalizationResponse</returns>
        public async System.Threading.Tasks.Task<AppCustomProductPageLocalizationResponse> AppCustomProductPageLocalizationsUpdateInstanceAsync(string id, AppCustomProductPageLocalizationUpdateRequest appCustomProductPageLocalizationUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<AppCustomProductPageLocalizationResponse> localVarResponse = await AppCustomProductPageLocalizationsUpdateInstanceWithHttpInfoAsync(id, appCustomProductPageLocalizationUpdateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appCustomProductPageLocalizationUpdateRequest">AppCustomProductPageLocalization representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppCustomProductPageLocalizationResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<AppCustomProductPageLocalizationResponse>> AppCustomProductPageLocalizationsUpdateInstanceWithHttpInfoAsync(string id, AppCustomProductPageLocalizationUpdateRequest appCustomProductPageLocalizationUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppCustomProductPageLocalizationsApi->AppCustomProductPageLocalizationsUpdateInstance");

            // verify the required parameter 'appCustomProductPageLocalizationUpdateRequest' is set
            if (appCustomProductPageLocalizationUpdateRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'appCustomProductPageLocalizationUpdateRequest' when calling AppCustomProductPageLocalizationsApi->AppCustomProductPageLocalizationsUpdateInstance");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = appCustomProductPageLocalizationUpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<AppCustomProductPageLocalizationResponse>("/v1/appCustomProductPageLocalizations/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppCustomProductPageLocalizationsUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
