/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AppStoreConnect.Client;
using AppStoreConnect.Model;

namespace AppStoreConnect.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionAppStoreReviewScreenshots">the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>SubscriptionAppStoreReviewScreenshotResponse</returns>
        SubscriptionAppStoreReviewScreenshotResponse SubscriptionsAppStoreReviewScreenshotGetToOneRelated(string id, List<string>? fieldsSubscriptionAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionAppStoreReviewScreenshots">the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of SubscriptionAppStoreReviewScreenshotResponse</returns>
        ApiResponse<SubscriptionAppStoreReviewScreenshotResponse> SubscriptionsAppStoreReviewScreenshotGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsSubscriptionAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionCreateRequest">Subscription representation</param>
        /// <returns>SubscriptionResponse</returns>
        SubscriptionResponse SubscriptionsCreateInstance(SubscriptionCreateRequest subscriptionCreateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionCreateRequest">Subscription representation</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        ApiResponse<SubscriptionResponse> SubscriptionsCreateInstanceWithHttpInfo(SubscriptionCreateRequest subscriptionCreateRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns></returns>
        void SubscriptionsDeleteInstance(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SubscriptionsDeleteInstanceWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOffers">the fields to include for returned resources of type subscriptionPromotionalOffers (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionAppStoreReviewScreenshots">the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsSubscriptionPrices">the fields to include for returned resources of type subscriptionPrices (optional)</param>
        /// <param name="fieldsSubscriptionIntroductoryOffers">the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)</param>
        /// <param name="fieldsSubscriptionLocalizations">the fields to include for returned resources of type subscriptionLocalizations (optional)</param>
        /// <param name="limitIntroductoryOffers">maximum number of related introductoryOffers returned (when they are included) (optional)</param>
        /// <param name="limitOfferCodes">maximum number of related offerCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="limitPromotionalOffers">maximum number of related promotionalOffers returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionLocalizations">maximum number of related subscriptionLocalizations returned (when they are included) (optional)</param>
        /// <returns>SubscriptionResponse</returns>
        SubscriptionResponse SubscriptionsGetInstance(string id, List<string>? fieldsSubscriptions = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOffers = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsSubscriptionPrices = default(List<string>?), List<string>? fieldsSubscriptionIntroductoryOffers = default(List<string>?), List<string>? fieldsSubscriptionLocalizations = default(List<string>?), int? limitIntroductoryOffers = default(int?), int? limitOfferCodes = default(int?), int? limitPrices = default(int?), int? limitPromotionalOffers = default(int?), int? limitSubscriptionLocalizations = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOffers">the fields to include for returned resources of type subscriptionPromotionalOffers (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionAppStoreReviewScreenshots">the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsSubscriptionPrices">the fields to include for returned resources of type subscriptionPrices (optional)</param>
        /// <param name="fieldsSubscriptionIntroductoryOffers">the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)</param>
        /// <param name="fieldsSubscriptionLocalizations">the fields to include for returned resources of type subscriptionLocalizations (optional)</param>
        /// <param name="limitIntroductoryOffers">maximum number of related introductoryOffers returned (when they are included) (optional)</param>
        /// <param name="limitOfferCodes">maximum number of related offerCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="limitPromotionalOffers">maximum number of related promotionalOffers returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionLocalizations">maximum number of related subscriptionLocalizations returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        ApiResponse<SubscriptionResponse> SubscriptionsGetInstanceWithHttpInfo(string id, List<string>? fieldsSubscriptions = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOffers = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsSubscriptionPrices = default(List<string>?), List<string>? fieldsSubscriptionIntroductoryOffers = default(List<string>?), List<string>? fieldsSubscriptionLocalizations = default(List<string>?), int? limitIntroductoryOffers = default(int?), int? limitOfferCodes = default(int?), int? limitPrices = default(int?), int? limitPromotionalOffers = default(int?), int? limitSubscriptionLocalizations = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionIntroductoryOffersLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        void SubscriptionsIntroductoryOffersDeleteToManyRelationship(string id, SubscriptionIntroductoryOffersLinkagesRequest subscriptionIntroductoryOffersLinkagesRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionIntroductoryOffersLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SubscriptionsIntroductoryOffersDeleteToManyRelationshipWithHttpInfo(string id, SubscriptionIntroductoryOffersLinkagesRequest subscriptionIntroductoryOffersLinkagesRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionIntroductoryOffers">the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>SubscriptionIntroductoryOffersResponse</returns>
        SubscriptionIntroductoryOffersResponse SubscriptionsIntroductoryOffersGetToManyRelated(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionIntroductoryOffers = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionIntroductoryOffers">the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of SubscriptionIntroductoryOffersResponse</returns>
        ApiResponse<SubscriptionIntroductoryOffersResponse> SubscriptionsIntroductoryOffersGetToManyRelatedWithHttpInfo(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionIntroductoryOffers = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>SubscriptionIntroductoryOffersLinkagesResponse</returns>
        SubscriptionIntroductoryOffersLinkagesResponse SubscriptionsIntroductoryOffersGetToManyRelationship(string id, int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of SubscriptionIntroductoryOffersLinkagesResponse</returns>
        ApiResponse<SubscriptionIntroductoryOffersLinkagesResponse> SubscriptionsIntroductoryOffersGetToManyRelationshipWithHttpInfo(string id, int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by territory (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeCustomCodes">the fields to include for returned resources of type subscriptionOfferCodeCustomCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeOneTimeUseCodes">the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodePrices">the fields to include for returned resources of type subscriptionOfferCodePrices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitOneTimeUseCodes">maximum number of related oneTimeUseCodes returned (when they are included) (optional)</param>
        /// <param name="limitCustomCodes">maximum number of related customCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>SubscriptionOfferCodesResponse</returns>
        SubscriptionOfferCodesResponse SubscriptionsOfferCodesGetToManyRelated(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeCustomCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeOneTimeUseCodes = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionOfferCodePrices = default(List<string>?), int? limit = default(int?), int? limitOneTimeUseCodes = default(int?), int? limitCustomCodes = default(int?), int? limitPrices = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by territory (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeCustomCodes">the fields to include for returned resources of type subscriptionOfferCodeCustomCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeOneTimeUseCodes">the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodePrices">the fields to include for returned resources of type subscriptionOfferCodePrices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitOneTimeUseCodes">maximum number of related oneTimeUseCodes returned (when they are included) (optional)</param>
        /// <param name="limitCustomCodes">maximum number of related customCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of SubscriptionOfferCodesResponse</returns>
        ApiResponse<SubscriptionOfferCodesResponse> SubscriptionsOfferCodesGetToManyRelatedWithHttpInfo(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeCustomCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeOneTimeUseCodes = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionOfferCodePrices = default(List<string>?), int? limit = default(int?), int? limitOneTimeUseCodes = default(int?), int? limitCustomCodes = default(int?), int? limitPrices = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>SubscriptionPricePointsResponse</returns>
        SubscriptionPricePointsResponse SubscriptionsPricePointsGetToManyRelated(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of SubscriptionPricePointsResponse</returns>
        ApiResponse<SubscriptionPricePointsResponse> SubscriptionsPricePointsGetToManyRelatedWithHttpInfo(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionPricesLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        void SubscriptionsPricesDeleteToManyRelationship(string id, SubscriptionPricesLinkagesRequest subscriptionPricesLinkagesRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionPricesLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SubscriptionsPricesDeleteToManyRelationshipWithHttpInfo(string id, SubscriptionPricesLinkagesRequest subscriptionPricesLinkagesRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterSubscriptionPricePoint">filter by id(s) of related &#39;subscriptionPricePoint&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsSubscriptionPrices">the fields to include for returned resources of type subscriptionPrices (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>SubscriptionPricesResponse</returns>
        SubscriptionPricesResponse SubscriptionsPricesGetToManyRelated(string id, List<string>? filterSubscriptionPricePoint = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsSubscriptionPrices = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterSubscriptionPricePoint">filter by id(s) of related &#39;subscriptionPricePoint&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsSubscriptionPrices">the fields to include for returned resources of type subscriptionPrices (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of SubscriptionPricesResponse</returns>
        ApiResponse<SubscriptionPricesResponse> SubscriptionsPricesGetToManyRelatedWithHttpInfo(string id, List<string>? filterSubscriptionPricePoint = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsSubscriptionPrices = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>SubscriptionPricesLinkagesResponse</returns>
        SubscriptionPricesLinkagesResponse SubscriptionsPricesGetToManyRelationship(string id, int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of SubscriptionPricesLinkagesResponse</returns>
        ApiResponse<SubscriptionPricesLinkagesResponse> SubscriptionsPricesGetToManyRelationshipWithHttpInfo(string id, int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsPromotedPurchaseImages">the fields to include for returned resources of type promotedPurchaseImages (optional)</param>
        /// <param name="limitPromotionImages">maximum number of related promotionImages returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>PromotedPurchaseResponse</returns>
        PromotedPurchaseResponse SubscriptionsPromotedPurchaseGetToOneRelated(string id, List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsPromotedPurchaseImages = default(List<string>?), int? limitPromotionImages = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsPromotedPurchaseImages">the fields to include for returned resources of type promotedPurchaseImages (optional)</param>
        /// <param name="limitPromotionImages">maximum number of related promotionImages returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of PromotedPurchaseResponse</returns>
        ApiResponse<PromotedPurchaseResponse> SubscriptionsPromotedPurchaseGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsPromotedPurchaseImages = default(List<string>?), int? limitPromotionImages = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by territory (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOffers">the fields to include for returned resources of type subscriptionPromotionalOffers (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOfferPrices">the fields to include for returned resources of type subscriptionPromotionalOfferPrices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>SubscriptionPromotionalOffersResponse</returns>
        SubscriptionPromotionalOffersResponse SubscriptionsPromotionalOffersGetToManyRelated(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOffers = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOfferPrices = default(List<string>?), int? limit = default(int?), int? limitPrices = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by territory (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOffers">the fields to include for returned resources of type subscriptionPromotionalOffers (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOfferPrices">the fields to include for returned resources of type subscriptionPromotionalOfferPrices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of SubscriptionPromotionalOffersResponse</returns>
        ApiResponse<SubscriptionPromotionalOffersResponse> SubscriptionsPromotionalOffersGetToManyRelatedWithHttpInfo(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOffers = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOfferPrices = default(List<string>?), int? limit = default(int?), int? limitPrices = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionLocalizations">the fields to include for returned resources of type subscriptionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>SubscriptionLocalizationsResponse</returns>
        SubscriptionLocalizationsResponse SubscriptionsSubscriptionLocalizationsGetToManyRelated(string id, List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionLocalizations">the fields to include for returned resources of type subscriptionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of SubscriptionLocalizationsResponse</returns>
        ApiResponse<SubscriptionLocalizationsResponse> SubscriptionsSubscriptionLocalizationsGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionUpdateRequest">Subscription representation</param>
        /// <returns>SubscriptionResponse</returns>
        SubscriptionResponse SubscriptionsUpdateInstance(string id, SubscriptionUpdateRequest subscriptionUpdateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionUpdateRequest">Subscription representation</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        ApiResponse<SubscriptionResponse> SubscriptionsUpdateInstanceWithHttpInfo(string id, SubscriptionUpdateRequest subscriptionUpdateRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionAppStoreReviewScreenshots">the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionAppStoreReviewScreenshotResponse</returns>
        System.Threading.Tasks.Task<SubscriptionAppStoreReviewScreenshotResponse> SubscriptionsAppStoreReviewScreenshotGetToOneRelatedAsync(string id, List<string>? fieldsSubscriptionAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionAppStoreReviewScreenshots">the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionAppStoreReviewScreenshotResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionAppStoreReviewScreenshotResponse>> SubscriptionsAppStoreReviewScreenshotGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsSubscriptionAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionCreateRequest">Subscription representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        System.Threading.Tasks.Task<SubscriptionResponse> SubscriptionsCreateInstanceAsync(SubscriptionCreateRequest subscriptionCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionCreateRequest">Subscription representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionResponse>> SubscriptionsCreateInstanceWithHttpInfoAsync(SubscriptionCreateRequest subscriptionCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SubscriptionsDeleteInstanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubscriptionsDeleteInstanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOffers">the fields to include for returned resources of type subscriptionPromotionalOffers (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionAppStoreReviewScreenshots">the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsSubscriptionPrices">the fields to include for returned resources of type subscriptionPrices (optional)</param>
        /// <param name="fieldsSubscriptionIntroductoryOffers">the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)</param>
        /// <param name="fieldsSubscriptionLocalizations">the fields to include for returned resources of type subscriptionLocalizations (optional)</param>
        /// <param name="limitIntroductoryOffers">maximum number of related introductoryOffers returned (when they are included) (optional)</param>
        /// <param name="limitOfferCodes">maximum number of related offerCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="limitPromotionalOffers">maximum number of related promotionalOffers returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionLocalizations">maximum number of related subscriptionLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        System.Threading.Tasks.Task<SubscriptionResponse> SubscriptionsGetInstanceAsync(string id, List<string>? fieldsSubscriptions = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOffers = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsSubscriptionPrices = default(List<string>?), List<string>? fieldsSubscriptionIntroductoryOffers = default(List<string>?), List<string>? fieldsSubscriptionLocalizations = default(List<string>?), int? limitIntroductoryOffers = default(int?), int? limitOfferCodes = default(int?), int? limitPrices = default(int?), int? limitPromotionalOffers = default(int?), int? limitSubscriptionLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOffers">the fields to include for returned resources of type subscriptionPromotionalOffers (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionAppStoreReviewScreenshots">the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsSubscriptionPrices">the fields to include for returned resources of type subscriptionPrices (optional)</param>
        /// <param name="fieldsSubscriptionIntroductoryOffers">the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)</param>
        /// <param name="fieldsSubscriptionLocalizations">the fields to include for returned resources of type subscriptionLocalizations (optional)</param>
        /// <param name="limitIntroductoryOffers">maximum number of related introductoryOffers returned (when they are included) (optional)</param>
        /// <param name="limitOfferCodes">maximum number of related offerCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="limitPromotionalOffers">maximum number of related promotionalOffers returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionLocalizations">maximum number of related subscriptionLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionResponse>> SubscriptionsGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsSubscriptions = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOffers = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsSubscriptionPrices = default(List<string>?), List<string>? fieldsSubscriptionIntroductoryOffers = default(List<string>?), List<string>? fieldsSubscriptionLocalizations = default(List<string>?), int? limitIntroductoryOffers = default(int?), int? limitOfferCodes = default(int?), int? limitPrices = default(int?), int? limitPromotionalOffers = default(int?), int? limitSubscriptionLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionIntroductoryOffersLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SubscriptionsIntroductoryOffersDeleteToManyRelationshipAsync(string id, SubscriptionIntroductoryOffersLinkagesRequest subscriptionIntroductoryOffersLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionIntroductoryOffersLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubscriptionsIntroductoryOffersDeleteToManyRelationshipWithHttpInfoAsync(string id, SubscriptionIntroductoryOffersLinkagesRequest subscriptionIntroductoryOffersLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionIntroductoryOffers">the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionIntroductoryOffersResponse</returns>
        System.Threading.Tasks.Task<SubscriptionIntroductoryOffersResponse> SubscriptionsIntroductoryOffersGetToManyRelatedAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionIntroductoryOffers = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionIntroductoryOffers">the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionIntroductoryOffersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionIntroductoryOffersResponse>> SubscriptionsIntroductoryOffersGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionIntroductoryOffers = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionIntroductoryOffersLinkagesResponse</returns>
        System.Threading.Tasks.Task<SubscriptionIntroductoryOffersLinkagesResponse> SubscriptionsIntroductoryOffersGetToManyRelationshipAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionIntroductoryOffersLinkagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionIntroductoryOffersLinkagesResponse>> SubscriptionsIntroductoryOffersGetToManyRelationshipWithHttpInfoAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by territory (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeCustomCodes">the fields to include for returned resources of type subscriptionOfferCodeCustomCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeOneTimeUseCodes">the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodePrices">the fields to include for returned resources of type subscriptionOfferCodePrices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitOneTimeUseCodes">maximum number of related oneTimeUseCodes returned (when they are included) (optional)</param>
        /// <param name="limitCustomCodes">maximum number of related customCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionOfferCodesResponse</returns>
        System.Threading.Tasks.Task<SubscriptionOfferCodesResponse> SubscriptionsOfferCodesGetToManyRelatedAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeCustomCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeOneTimeUseCodes = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionOfferCodePrices = default(List<string>?), int? limit = default(int?), int? limitOneTimeUseCodes = default(int?), int? limitCustomCodes = default(int?), int? limitPrices = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by territory (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeCustomCodes">the fields to include for returned resources of type subscriptionOfferCodeCustomCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeOneTimeUseCodes">the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodePrices">the fields to include for returned resources of type subscriptionOfferCodePrices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitOneTimeUseCodes">maximum number of related oneTimeUseCodes returned (when they are included) (optional)</param>
        /// <param name="limitCustomCodes">maximum number of related customCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionOfferCodesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionOfferCodesResponse>> SubscriptionsOfferCodesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeCustomCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeOneTimeUseCodes = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionOfferCodePrices = default(List<string>?), int? limit = default(int?), int? limitOneTimeUseCodes = default(int?), int? limitCustomCodes = default(int?), int? limitPrices = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionPricePointsResponse</returns>
        System.Threading.Tasks.Task<SubscriptionPricePointsResponse> SubscriptionsPricePointsGetToManyRelatedAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionPricePointsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionPricePointsResponse>> SubscriptionsPricePointsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionPricesLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SubscriptionsPricesDeleteToManyRelationshipAsync(string id, SubscriptionPricesLinkagesRequest subscriptionPricesLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionPricesLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubscriptionsPricesDeleteToManyRelationshipWithHttpInfoAsync(string id, SubscriptionPricesLinkagesRequest subscriptionPricesLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterSubscriptionPricePoint">filter by id(s) of related &#39;subscriptionPricePoint&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsSubscriptionPrices">the fields to include for returned resources of type subscriptionPrices (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionPricesResponse</returns>
        System.Threading.Tasks.Task<SubscriptionPricesResponse> SubscriptionsPricesGetToManyRelatedAsync(string id, List<string>? filterSubscriptionPricePoint = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsSubscriptionPrices = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterSubscriptionPricePoint">filter by id(s) of related &#39;subscriptionPricePoint&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsSubscriptionPrices">the fields to include for returned resources of type subscriptionPrices (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionPricesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionPricesResponse>> SubscriptionsPricesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterSubscriptionPricePoint = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsSubscriptionPrices = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionPricesLinkagesResponse</returns>
        System.Threading.Tasks.Task<SubscriptionPricesLinkagesResponse> SubscriptionsPricesGetToManyRelationshipAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionPricesLinkagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionPricesLinkagesResponse>> SubscriptionsPricesGetToManyRelationshipWithHttpInfoAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsPromotedPurchaseImages">the fields to include for returned resources of type promotedPurchaseImages (optional)</param>
        /// <param name="limitPromotionImages">maximum number of related promotionImages returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotedPurchaseResponse</returns>
        System.Threading.Tasks.Task<PromotedPurchaseResponse> SubscriptionsPromotedPurchaseGetToOneRelatedAsync(string id, List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsPromotedPurchaseImages = default(List<string>?), int? limitPromotionImages = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsPromotedPurchaseImages">the fields to include for returned resources of type promotedPurchaseImages (optional)</param>
        /// <param name="limitPromotionImages">maximum number of related promotionImages returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotedPurchaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PromotedPurchaseResponse>> SubscriptionsPromotedPurchaseGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsPromotedPurchaseImages = default(List<string>?), int? limitPromotionImages = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by territory (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOffers">the fields to include for returned resources of type subscriptionPromotionalOffers (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOfferPrices">the fields to include for returned resources of type subscriptionPromotionalOfferPrices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionPromotionalOffersResponse</returns>
        System.Threading.Tasks.Task<SubscriptionPromotionalOffersResponse> SubscriptionsPromotionalOffersGetToManyRelatedAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOffers = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOfferPrices = default(List<string>?), int? limit = default(int?), int? limitPrices = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by territory (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOffers">the fields to include for returned resources of type subscriptionPromotionalOffers (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOfferPrices">the fields to include for returned resources of type subscriptionPromotionalOfferPrices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionPromotionalOffersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionPromotionalOffersResponse>> SubscriptionsPromotionalOffersGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOffers = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOfferPrices = default(List<string>?), int? limit = default(int?), int? limitPrices = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionLocalizations">the fields to include for returned resources of type subscriptionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionLocalizationsResponse</returns>
        System.Threading.Tasks.Task<SubscriptionLocalizationsResponse> SubscriptionsSubscriptionLocalizationsGetToManyRelatedAsync(string id, List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionLocalizations">the fields to include for returned resources of type subscriptionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionLocalizationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionLocalizationsResponse>> SubscriptionsSubscriptionLocalizationsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionUpdateRequest">Subscription representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        System.Threading.Tasks.Task<SubscriptionResponse> SubscriptionsUpdateInstanceAsync(string id, SubscriptionUpdateRequest subscriptionUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionUpdateRequest">Subscription representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionResponse>> SubscriptionsUpdateInstanceWithHttpInfoAsync(string id, SubscriptionUpdateRequest subscriptionUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionsApi : ISubscriptionsApiSync, ISubscriptionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubscriptionsApi : IDisposable, ISubscriptionsApi
    {
        private AppStoreConnect.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public SubscriptionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public SubscriptionsApi(string basePath)
        {
            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public SubscriptionsApi(AppStoreConnect.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SubscriptionsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SubscriptionsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SubscriptionsApi(HttpClient client, AppStoreConnect.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public SubscriptionsApi(AppStoreConnect.Client.ISynchronousClient client, AppStoreConnect.Client.IAsynchronousClient asyncClient, AppStoreConnect.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AppStoreConnect.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AppStoreConnect.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AppStoreConnect.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AppStoreConnect.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AppStoreConnect.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionAppStoreReviewScreenshots">the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>SubscriptionAppStoreReviewScreenshotResponse</returns>
        public SubscriptionAppStoreReviewScreenshotResponse SubscriptionsAppStoreReviewScreenshotGetToOneRelated(string id, List<string>? fieldsSubscriptionAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionAppStoreReviewScreenshotResponse> localVarResponse = SubscriptionsAppStoreReviewScreenshotGetToOneRelatedWithHttpInfo(id, fieldsSubscriptionAppStoreReviewScreenshots, fieldsSubscriptions, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionAppStoreReviewScreenshots">the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of SubscriptionAppStoreReviewScreenshotResponse</returns>
        public AppStoreConnect.Client.ApiResponse<SubscriptionAppStoreReviewScreenshotResponse> SubscriptionsAppStoreReviewScreenshotGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsSubscriptionAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsAppStoreReviewScreenshotGetToOneRelated");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsSubscriptionAppStoreReviewScreenshots != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionAppStoreReviewScreenshots]", fieldsSubscriptionAppStoreReviewScreenshots));
            }
            if (fieldsSubscriptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptions]", fieldsSubscriptions));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionAppStoreReviewScreenshotResponse>("/v1/subscriptions/{id}/appStoreReviewScreenshot", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsAppStoreReviewScreenshotGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionAppStoreReviewScreenshots">the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionAppStoreReviewScreenshotResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionAppStoreReviewScreenshotResponse> SubscriptionsAppStoreReviewScreenshotGetToOneRelatedAsync(string id, List<string>? fieldsSubscriptionAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionAppStoreReviewScreenshotResponse> localVarResponse = await SubscriptionsAppStoreReviewScreenshotGetToOneRelatedWithHttpInfoAsync(id, fieldsSubscriptionAppStoreReviewScreenshots, fieldsSubscriptions, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionAppStoreReviewScreenshots">the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionAppStoreReviewScreenshotResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<SubscriptionAppStoreReviewScreenshotResponse>> SubscriptionsAppStoreReviewScreenshotGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsSubscriptionAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsAppStoreReviewScreenshotGetToOneRelated");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsSubscriptionAppStoreReviewScreenshots != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionAppStoreReviewScreenshots]", fieldsSubscriptionAppStoreReviewScreenshots));
            }
            if (fieldsSubscriptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptions]", fieldsSubscriptions));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SubscriptionAppStoreReviewScreenshotResponse>("/v1/subscriptions/{id}/appStoreReviewScreenshot", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsAppStoreReviewScreenshotGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionCreateRequest">Subscription representation</param>
        /// <returns>SubscriptionResponse</returns>
        public SubscriptionResponse SubscriptionsCreateInstance(SubscriptionCreateRequest subscriptionCreateRequest)
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionResponse> localVarResponse = SubscriptionsCreateInstanceWithHttpInfo(subscriptionCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionCreateRequest">Subscription representation</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        public AppStoreConnect.Client.ApiResponse<SubscriptionResponse> SubscriptionsCreateInstanceWithHttpInfo(SubscriptionCreateRequest subscriptionCreateRequest)
        {
            // verify the required parameter 'subscriptionCreateRequest' is set
            if (subscriptionCreateRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'subscriptionCreateRequest' when calling SubscriptionsApi->SubscriptionsCreateInstance");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = subscriptionCreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SubscriptionResponse>("/v1/subscriptions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionCreateRequest">Subscription representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionResponse> SubscriptionsCreateInstanceAsync(SubscriptionCreateRequest subscriptionCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionResponse> localVarResponse = await SubscriptionsCreateInstanceWithHttpInfoAsync(subscriptionCreateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionCreateRequest">Subscription representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<SubscriptionResponse>> SubscriptionsCreateInstanceWithHttpInfoAsync(SubscriptionCreateRequest subscriptionCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionCreateRequest' is set
            if (subscriptionCreateRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'subscriptionCreateRequest' when calling SubscriptionsApi->SubscriptionsCreateInstance");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = subscriptionCreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SubscriptionResponse>("/v1/subscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns></returns>
        public void SubscriptionsDeleteInstance(string id)
        {
            SubscriptionsDeleteInstanceWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Client.ApiResponse<Object> SubscriptionsDeleteInstanceWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsDeleteInstance");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/subscriptions/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsDeleteInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SubscriptionsDeleteInstanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SubscriptionsDeleteInstanceWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<Object>> SubscriptionsDeleteInstanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsDeleteInstance");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/subscriptions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsDeleteInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOffers">the fields to include for returned resources of type subscriptionPromotionalOffers (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionAppStoreReviewScreenshots">the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsSubscriptionPrices">the fields to include for returned resources of type subscriptionPrices (optional)</param>
        /// <param name="fieldsSubscriptionIntroductoryOffers">the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)</param>
        /// <param name="fieldsSubscriptionLocalizations">the fields to include for returned resources of type subscriptionLocalizations (optional)</param>
        /// <param name="limitIntroductoryOffers">maximum number of related introductoryOffers returned (when they are included) (optional)</param>
        /// <param name="limitOfferCodes">maximum number of related offerCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="limitPromotionalOffers">maximum number of related promotionalOffers returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionLocalizations">maximum number of related subscriptionLocalizations returned (when they are included) (optional)</param>
        /// <returns>SubscriptionResponse</returns>
        public SubscriptionResponse SubscriptionsGetInstance(string id, List<string>? fieldsSubscriptions = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOffers = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsSubscriptionPrices = default(List<string>?), List<string>? fieldsSubscriptionIntroductoryOffers = default(List<string>?), List<string>? fieldsSubscriptionLocalizations = default(List<string>?), int? limitIntroductoryOffers = default(int?), int? limitOfferCodes = default(int?), int? limitPrices = default(int?), int? limitPromotionalOffers = default(int?), int? limitSubscriptionLocalizations = default(int?))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionResponse> localVarResponse = SubscriptionsGetInstanceWithHttpInfo(id, fieldsSubscriptions, include, fieldsPromotedPurchases, fieldsSubscriptionPricePoints, fieldsSubscriptionPromotionalOffers, fieldsSubscriptionOfferCodes, fieldsSubscriptionAppStoreReviewScreenshots, fieldsSubscriptionPrices, fieldsSubscriptionIntroductoryOffers, fieldsSubscriptionLocalizations, limitIntroductoryOffers, limitOfferCodes, limitPrices, limitPromotionalOffers, limitSubscriptionLocalizations);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOffers">the fields to include for returned resources of type subscriptionPromotionalOffers (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionAppStoreReviewScreenshots">the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsSubscriptionPrices">the fields to include for returned resources of type subscriptionPrices (optional)</param>
        /// <param name="fieldsSubscriptionIntroductoryOffers">the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)</param>
        /// <param name="fieldsSubscriptionLocalizations">the fields to include for returned resources of type subscriptionLocalizations (optional)</param>
        /// <param name="limitIntroductoryOffers">maximum number of related introductoryOffers returned (when they are included) (optional)</param>
        /// <param name="limitOfferCodes">maximum number of related offerCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="limitPromotionalOffers">maximum number of related promotionalOffers returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionLocalizations">maximum number of related subscriptionLocalizations returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        public AppStoreConnect.Client.ApiResponse<SubscriptionResponse> SubscriptionsGetInstanceWithHttpInfo(string id, List<string>? fieldsSubscriptions = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOffers = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsSubscriptionPrices = default(List<string>?), List<string>? fieldsSubscriptionIntroductoryOffers = default(List<string>?), List<string>? fieldsSubscriptionLocalizations = default(List<string>?), int? limitIntroductoryOffers = default(int?), int? limitOfferCodes = default(int?), int? limitPrices = default(int?), int? limitPromotionalOffers = default(int?), int? limitSubscriptionLocalizations = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsGetInstance");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsSubscriptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptions]", fieldsSubscriptions));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (fieldsPromotedPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[promotedPurchases]", fieldsPromotedPurchases));
            }
            if (fieldsSubscriptionPricePoints != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionPricePoints]", fieldsSubscriptionPricePoints));
            }
            if (fieldsSubscriptionPromotionalOffers != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionPromotionalOffers]", fieldsSubscriptionPromotionalOffers));
            }
            if (fieldsSubscriptionOfferCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionOfferCodes]", fieldsSubscriptionOfferCodes));
            }
            if (fieldsSubscriptionAppStoreReviewScreenshots != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionAppStoreReviewScreenshots]", fieldsSubscriptionAppStoreReviewScreenshots));
            }
            if (fieldsSubscriptionPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionPrices]", fieldsSubscriptionPrices));
            }
            if (fieldsSubscriptionIntroductoryOffers != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionIntroductoryOffers]", fieldsSubscriptionIntroductoryOffers));
            }
            if (fieldsSubscriptionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionLocalizations]", fieldsSubscriptionLocalizations));
            }
            if (limitIntroductoryOffers != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[introductoryOffers]", limitIntroductoryOffers));
            }
            if (limitOfferCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[offerCodes]", limitOfferCodes));
            }
            if (limitPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[prices]", limitPrices));
            }
            if (limitPromotionalOffers != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[promotionalOffers]", limitPromotionalOffers));
            }
            if (limitSubscriptionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[subscriptionLocalizations]", limitSubscriptionLocalizations));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionResponse>("/v1/subscriptions/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOffers">the fields to include for returned resources of type subscriptionPromotionalOffers (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionAppStoreReviewScreenshots">the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsSubscriptionPrices">the fields to include for returned resources of type subscriptionPrices (optional)</param>
        /// <param name="fieldsSubscriptionIntroductoryOffers">the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)</param>
        /// <param name="fieldsSubscriptionLocalizations">the fields to include for returned resources of type subscriptionLocalizations (optional)</param>
        /// <param name="limitIntroductoryOffers">maximum number of related introductoryOffers returned (when they are included) (optional)</param>
        /// <param name="limitOfferCodes">maximum number of related offerCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="limitPromotionalOffers">maximum number of related promotionalOffers returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionLocalizations">maximum number of related subscriptionLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionResponse> SubscriptionsGetInstanceAsync(string id, List<string>? fieldsSubscriptions = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOffers = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsSubscriptionPrices = default(List<string>?), List<string>? fieldsSubscriptionIntroductoryOffers = default(List<string>?), List<string>? fieldsSubscriptionLocalizations = default(List<string>?), int? limitIntroductoryOffers = default(int?), int? limitOfferCodes = default(int?), int? limitPrices = default(int?), int? limitPromotionalOffers = default(int?), int? limitSubscriptionLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionResponse> localVarResponse = await SubscriptionsGetInstanceWithHttpInfoAsync(id, fieldsSubscriptions, include, fieldsPromotedPurchases, fieldsSubscriptionPricePoints, fieldsSubscriptionPromotionalOffers, fieldsSubscriptionOfferCodes, fieldsSubscriptionAppStoreReviewScreenshots, fieldsSubscriptionPrices, fieldsSubscriptionIntroductoryOffers, fieldsSubscriptionLocalizations, limitIntroductoryOffers, limitOfferCodes, limitPrices, limitPromotionalOffers, limitSubscriptionLocalizations, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOffers">the fields to include for returned resources of type subscriptionPromotionalOffers (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionAppStoreReviewScreenshots">the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsSubscriptionPrices">the fields to include for returned resources of type subscriptionPrices (optional)</param>
        /// <param name="fieldsSubscriptionIntroductoryOffers">the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)</param>
        /// <param name="fieldsSubscriptionLocalizations">the fields to include for returned resources of type subscriptionLocalizations (optional)</param>
        /// <param name="limitIntroductoryOffers">maximum number of related introductoryOffers returned (when they are included) (optional)</param>
        /// <param name="limitOfferCodes">maximum number of related offerCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="limitPromotionalOffers">maximum number of related promotionalOffers returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionLocalizations">maximum number of related subscriptionLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<SubscriptionResponse>> SubscriptionsGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsSubscriptions = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOffers = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsSubscriptionPrices = default(List<string>?), List<string>? fieldsSubscriptionIntroductoryOffers = default(List<string>?), List<string>? fieldsSubscriptionLocalizations = default(List<string>?), int? limitIntroductoryOffers = default(int?), int? limitOfferCodes = default(int?), int? limitPrices = default(int?), int? limitPromotionalOffers = default(int?), int? limitSubscriptionLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsGetInstance");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsSubscriptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptions]", fieldsSubscriptions));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (fieldsPromotedPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[promotedPurchases]", fieldsPromotedPurchases));
            }
            if (fieldsSubscriptionPricePoints != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionPricePoints]", fieldsSubscriptionPricePoints));
            }
            if (fieldsSubscriptionPromotionalOffers != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionPromotionalOffers]", fieldsSubscriptionPromotionalOffers));
            }
            if (fieldsSubscriptionOfferCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionOfferCodes]", fieldsSubscriptionOfferCodes));
            }
            if (fieldsSubscriptionAppStoreReviewScreenshots != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionAppStoreReviewScreenshots]", fieldsSubscriptionAppStoreReviewScreenshots));
            }
            if (fieldsSubscriptionPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionPrices]", fieldsSubscriptionPrices));
            }
            if (fieldsSubscriptionIntroductoryOffers != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionIntroductoryOffers]", fieldsSubscriptionIntroductoryOffers));
            }
            if (fieldsSubscriptionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionLocalizations]", fieldsSubscriptionLocalizations));
            }
            if (limitIntroductoryOffers != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[introductoryOffers]", limitIntroductoryOffers));
            }
            if (limitOfferCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[offerCodes]", limitOfferCodes));
            }
            if (limitPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[prices]", limitPrices));
            }
            if (limitPromotionalOffers != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[promotionalOffers]", limitPromotionalOffers));
            }
            if (limitSubscriptionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[subscriptionLocalizations]", limitSubscriptionLocalizations));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SubscriptionResponse>("/v1/subscriptions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionIntroductoryOffersLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        public void SubscriptionsIntroductoryOffersDeleteToManyRelationship(string id, SubscriptionIntroductoryOffersLinkagesRequest subscriptionIntroductoryOffersLinkagesRequest)
        {
            SubscriptionsIntroductoryOffersDeleteToManyRelationshipWithHttpInfo(id, subscriptionIntroductoryOffersLinkagesRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionIntroductoryOffersLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Client.ApiResponse<Object> SubscriptionsIntroductoryOffersDeleteToManyRelationshipWithHttpInfo(string id, SubscriptionIntroductoryOffersLinkagesRequest subscriptionIntroductoryOffersLinkagesRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsIntroductoryOffersDeleteToManyRelationship");

            // verify the required parameter 'subscriptionIntroductoryOffersLinkagesRequest' is set
            if (subscriptionIntroductoryOffersLinkagesRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'subscriptionIntroductoryOffersLinkagesRequest' when calling SubscriptionsApi->SubscriptionsIntroductoryOffersDeleteToManyRelationship");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = subscriptionIntroductoryOffersLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/subscriptions/{id}/relationships/introductoryOffers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsIntroductoryOffersDeleteToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionIntroductoryOffersLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SubscriptionsIntroductoryOffersDeleteToManyRelationshipAsync(string id, SubscriptionIntroductoryOffersLinkagesRequest subscriptionIntroductoryOffersLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SubscriptionsIntroductoryOffersDeleteToManyRelationshipWithHttpInfoAsync(id, subscriptionIntroductoryOffersLinkagesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionIntroductoryOffersLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<Object>> SubscriptionsIntroductoryOffersDeleteToManyRelationshipWithHttpInfoAsync(string id, SubscriptionIntroductoryOffersLinkagesRequest subscriptionIntroductoryOffersLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsIntroductoryOffersDeleteToManyRelationship");

            // verify the required parameter 'subscriptionIntroductoryOffersLinkagesRequest' is set
            if (subscriptionIntroductoryOffersLinkagesRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'subscriptionIntroductoryOffersLinkagesRequest' when calling SubscriptionsApi->SubscriptionsIntroductoryOffersDeleteToManyRelationship");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = subscriptionIntroductoryOffersLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/subscriptions/{id}/relationships/introductoryOffers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsIntroductoryOffersDeleteToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionIntroductoryOffers">the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>SubscriptionIntroductoryOffersResponse</returns>
        public SubscriptionIntroductoryOffersResponse SubscriptionsIntroductoryOffersGetToManyRelated(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionIntroductoryOffers = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionIntroductoryOffersResponse> localVarResponse = SubscriptionsIntroductoryOffersGetToManyRelatedWithHttpInfo(id, filterTerritory, fieldsSubscriptionPricePoints, fieldsSubscriptions, fieldsSubscriptionIntroductoryOffers, fieldsTerritories, limit, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionIntroductoryOffers">the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of SubscriptionIntroductoryOffersResponse</returns>
        public AppStoreConnect.Client.ApiResponse<SubscriptionIntroductoryOffersResponse> SubscriptionsIntroductoryOffersGetToManyRelatedWithHttpInfo(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionIntroductoryOffers = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsIntroductoryOffersGetToManyRelated");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterTerritory != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[territory]", filterTerritory));
            }
            if (fieldsSubscriptionPricePoints != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionPricePoints]", fieldsSubscriptionPricePoints));
            }
            if (fieldsSubscriptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptions]", fieldsSubscriptions));
            }
            if (fieldsSubscriptionIntroductoryOffers != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionIntroductoryOffers]", fieldsSubscriptionIntroductoryOffers));
            }
            if (fieldsTerritories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[territories]", fieldsTerritories));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionIntroductoryOffersResponse>("/v1/subscriptions/{id}/introductoryOffers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsIntroductoryOffersGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionIntroductoryOffers">the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionIntroductoryOffersResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionIntroductoryOffersResponse> SubscriptionsIntroductoryOffersGetToManyRelatedAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionIntroductoryOffers = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionIntroductoryOffersResponse> localVarResponse = await SubscriptionsIntroductoryOffersGetToManyRelatedWithHttpInfoAsync(id, filterTerritory, fieldsSubscriptionPricePoints, fieldsSubscriptions, fieldsSubscriptionIntroductoryOffers, fieldsTerritories, limit, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionIntroductoryOffers">the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionIntroductoryOffersResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<SubscriptionIntroductoryOffersResponse>> SubscriptionsIntroductoryOffersGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionIntroductoryOffers = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsIntroductoryOffersGetToManyRelated");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterTerritory != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[territory]", filterTerritory));
            }
            if (fieldsSubscriptionPricePoints != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionPricePoints]", fieldsSubscriptionPricePoints));
            }
            if (fieldsSubscriptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptions]", fieldsSubscriptions));
            }
            if (fieldsSubscriptionIntroductoryOffers != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionIntroductoryOffers]", fieldsSubscriptionIntroductoryOffers));
            }
            if (fieldsTerritories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[territories]", fieldsTerritories));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SubscriptionIntroductoryOffersResponse>("/v1/subscriptions/{id}/introductoryOffers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsIntroductoryOffersGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>SubscriptionIntroductoryOffersLinkagesResponse</returns>
        public SubscriptionIntroductoryOffersLinkagesResponse SubscriptionsIntroductoryOffersGetToManyRelationship(string id, int? limit = default(int?))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionIntroductoryOffersLinkagesResponse> localVarResponse = SubscriptionsIntroductoryOffersGetToManyRelationshipWithHttpInfo(id, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of SubscriptionIntroductoryOffersLinkagesResponse</returns>
        public AppStoreConnect.Client.ApiResponse<SubscriptionIntroductoryOffersLinkagesResponse> SubscriptionsIntroductoryOffersGetToManyRelationshipWithHttpInfo(string id, int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsIntroductoryOffersGetToManyRelationship");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionIntroductoryOffersLinkagesResponse>("/v1/subscriptions/{id}/relationships/introductoryOffers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsIntroductoryOffersGetToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionIntroductoryOffersLinkagesResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionIntroductoryOffersLinkagesResponse> SubscriptionsIntroductoryOffersGetToManyRelationshipAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionIntroductoryOffersLinkagesResponse> localVarResponse = await SubscriptionsIntroductoryOffersGetToManyRelationshipWithHttpInfoAsync(id, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionIntroductoryOffersLinkagesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<SubscriptionIntroductoryOffersLinkagesResponse>> SubscriptionsIntroductoryOffersGetToManyRelationshipWithHttpInfoAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsIntroductoryOffersGetToManyRelationship");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SubscriptionIntroductoryOffersLinkagesResponse>("/v1/subscriptions/{id}/relationships/introductoryOffers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsIntroductoryOffersGetToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by territory (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeCustomCodes">the fields to include for returned resources of type subscriptionOfferCodeCustomCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeOneTimeUseCodes">the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodePrices">the fields to include for returned resources of type subscriptionOfferCodePrices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitOneTimeUseCodes">maximum number of related oneTimeUseCodes returned (when they are included) (optional)</param>
        /// <param name="limitCustomCodes">maximum number of related customCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>SubscriptionOfferCodesResponse</returns>
        public SubscriptionOfferCodesResponse SubscriptionsOfferCodesGetToManyRelated(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeCustomCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeOneTimeUseCodes = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionOfferCodePrices = default(List<string>?), int? limit = default(int?), int? limitOneTimeUseCodes = default(int?), int? limitCustomCodes = default(int?), int? limitPrices = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionOfferCodesResponse> localVarResponse = SubscriptionsOfferCodesGetToManyRelatedWithHttpInfo(id, filterTerritory, fieldsSubscriptionOfferCodeCustomCodes, fieldsSubscriptionOfferCodes, fieldsSubscriptionOfferCodeOneTimeUseCodes, fieldsSubscriptions, fieldsSubscriptionOfferCodePrices, limit, limitOneTimeUseCodes, limitCustomCodes, limitPrices, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by territory (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeCustomCodes">the fields to include for returned resources of type subscriptionOfferCodeCustomCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeOneTimeUseCodes">the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodePrices">the fields to include for returned resources of type subscriptionOfferCodePrices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitOneTimeUseCodes">maximum number of related oneTimeUseCodes returned (when they are included) (optional)</param>
        /// <param name="limitCustomCodes">maximum number of related customCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of SubscriptionOfferCodesResponse</returns>
        public AppStoreConnect.Client.ApiResponse<SubscriptionOfferCodesResponse> SubscriptionsOfferCodesGetToManyRelatedWithHttpInfo(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeCustomCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeOneTimeUseCodes = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionOfferCodePrices = default(List<string>?), int? limit = default(int?), int? limitOneTimeUseCodes = default(int?), int? limitCustomCodes = default(int?), int? limitPrices = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsOfferCodesGetToManyRelated");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterTerritory != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[territory]", filterTerritory));
            }
            if (fieldsSubscriptionOfferCodeCustomCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionOfferCodeCustomCodes]", fieldsSubscriptionOfferCodeCustomCodes));
            }
            if (fieldsSubscriptionOfferCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionOfferCodes]", fieldsSubscriptionOfferCodes));
            }
            if (fieldsSubscriptionOfferCodeOneTimeUseCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionOfferCodeOneTimeUseCodes]", fieldsSubscriptionOfferCodeOneTimeUseCodes));
            }
            if (fieldsSubscriptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptions]", fieldsSubscriptions));
            }
            if (fieldsSubscriptionOfferCodePrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionOfferCodePrices]", fieldsSubscriptionOfferCodePrices));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (limitOneTimeUseCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[oneTimeUseCodes]", limitOneTimeUseCodes));
            }
            if (limitCustomCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[customCodes]", limitCustomCodes));
            }
            if (limitPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[prices]", limitPrices));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionOfferCodesResponse>("/v1/subscriptions/{id}/offerCodes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsOfferCodesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by territory (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeCustomCodes">the fields to include for returned resources of type subscriptionOfferCodeCustomCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeOneTimeUseCodes">the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodePrices">the fields to include for returned resources of type subscriptionOfferCodePrices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitOneTimeUseCodes">maximum number of related oneTimeUseCodes returned (when they are included) (optional)</param>
        /// <param name="limitCustomCodes">maximum number of related customCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionOfferCodesResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionOfferCodesResponse> SubscriptionsOfferCodesGetToManyRelatedAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeCustomCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeOneTimeUseCodes = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionOfferCodePrices = default(List<string>?), int? limit = default(int?), int? limitOneTimeUseCodes = default(int?), int? limitCustomCodes = default(int?), int? limitPrices = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionOfferCodesResponse> localVarResponse = await SubscriptionsOfferCodesGetToManyRelatedWithHttpInfoAsync(id, filterTerritory, fieldsSubscriptionOfferCodeCustomCodes, fieldsSubscriptionOfferCodes, fieldsSubscriptionOfferCodeOneTimeUseCodes, fieldsSubscriptions, fieldsSubscriptionOfferCodePrices, limit, limitOneTimeUseCodes, limitCustomCodes, limitPrices, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by territory (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeCustomCodes">the fields to include for returned resources of type subscriptionOfferCodeCustomCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeOneTimeUseCodes">the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodePrices">the fields to include for returned resources of type subscriptionOfferCodePrices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitOneTimeUseCodes">maximum number of related oneTimeUseCodes returned (when they are included) (optional)</param>
        /// <param name="limitCustomCodes">maximum number of related customCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionOfferCodesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<SubscriptionOfferCodesResponse>> SubscriptionsOfferCodesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeCustomCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeOneTimeUseCodes = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionOfferCodePrices = default(List<string>?), int? limit = default(int?), int? limitOneTimeUseCodes = default(int?), int? limitCustomCodes = default(int?), int? limitPrices = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsOfferCodesGetToManyRelated");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterTerritory != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[territory]", filterTerritory));
            }
            if (fieldsSubscriptionOfferCodeCustomCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionOfferCodeCustomCodes]", fieldsSubscriptionOfferCodeCustomCodes));
            }
            if (fieldsSubscriptionOfferCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionOfferCodes]", fieldsSubscriptionOfferCodes));
            }
            if (fieldsSubscriptionOfferCodeOneTimeUseCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionOfferCodeOneTimeUseCodes]", fieldsSubscriptionOfferCodeOneTimeUseCodes));
            }
            if (fieldsSubscriptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptions]", fieldsSubscriptions));
            }
            if (fieldsSubscriptionOfferCodePrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionOfferCodePrices]", fieldsSubscriptionOfferCodePrices));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (limitOneTimeUseCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[oneTimeUseCodes]", limitOneTimeUseCodes));
            }
            if (limitCustomCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[customCodes]", limitCustomCodes));
            }
            if (limitPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[prices]", limitPrices));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SubscriptionOfferCodesResponse>("/v1/subscriptions/{id}/offerCodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsOfferCodesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>SubscriptionPricePointsResponse</returns>
        public SubscriptionPricePointsResponse SubscriptionsPricePointsGetToManyRelated(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionPricePointsResponse> localVarResponse = SubscriptionsPricePointsGetToManyRelatedWithHttpInfo(id, filterTerritory, fieldsSubscriptionPricePoints, fieldsTerritories, limit, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of SubscriptionPricePointsResponse</returns>
        public AppStoreConnect.Client.ApiResponse<SubscriptionPricePointsResponse> SubscriptionsPricePointsGetToManyRelatedWithHttpInfo(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsPricePointsGetToManyRelated");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterTerritory != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[territory]", filterTerritory));
            }
            if (fieldsSubscriptionPricePoints != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionPricePoints]", fieldsSubscriptionPricePoints));
            }
            if (fieldsTerritories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[territories]", fieldsTerritories));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionPricePointsResponse>("/v1/subscriptions/{id}/pricePoints", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsPricePointsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionPricePointsResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionPricePointsResponse> SubscriptionsPricePointsGetToManyRelatedAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionPricePointsResponse> localVarResponse = await SubscriptionsPricePointsGetToManyRelatedWithHttpInfoAsync(id, filterTerritory, fieldsSubscriptionPricePoints, fieldsTerritories, limit, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionPricePointsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<SubscriptionPricePointsResponse>> SubscriptionsPricePointsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsPricePointsGetToManyRelated");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterTerritory != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[territory]", filterTerritory));
            }
            if (fieldsSubscriptionPricePoints != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionPricePoints]", fieldsSubscriptionPricePoints));
            }
            if (fieldsTerritories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[territories]", fieldsTerritories));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SubscriptionPricePointsResponse>("/v1/subscriptions/{id}/pricePoints", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsPricePointsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionPricesLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        public void SubscriptionsPricesDeleteToManyRelationship(string id, SubscriptionPricesLinkagesRequest subscriptionPricesLinkagesRequest)
        {
            SubscriptionsPricesDeleteToManyRelationshipWithHttpInfo(id, subscriptionPricesLinkagesRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionPricesLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Client.ApiResponse<Object> SubscriptionsPricesDeleteToManyRelationshipWithHttpInfo(string id, SubscriptionPricesLinkagesRequest subscriptionPricesLinkagesRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsPricesDeleteToManyRelationship");

            // verify the required parameter 'subscriptionPricesLinkagesRequest' is set
            if (subscriptionPricesLinkagesRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'subscriptionPricesLinkagesRequest' when calling SubscriptionsApi->SubscriptionsPricesDeleteToManyRelationship");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = subscriptionPricesLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/subscriptions/{id}/relationships/prices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsPricesDeleteToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionPricesLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SubscriptionsPricesDeleteToManyRelationshipAsync(string id, SubscriptionPricesLinkagesRequest subscriptionPricesLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SubscriptionsPricesDeleteToManyRelationshipWithHttpInfoAsync(id, subscriptionPricesLinkagesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionPricesLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<Object>> SubscriptionsPricesDeleteToManyRelationshipWithHttpInfoAsync(string id, SubscriptionPricesLinkagesRequest subscriptionPricesLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsPricesDeleteToManyRelationship");

            // verify the required parameter 'subscriptionPricesLinkagesRequest' is set
            if (subscriptionPricesLinkagesRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'subscriptionPricesLinkagesRequest' when calling SubscriptionsApi->SubscriptionsPricesDeleteToManyRelationship");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = subscriptionPricesLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/subscriptions/{id}/relationships/prices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsPricesDeleteToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterSubscriptionPricePoint">filter by id(s) of related &#39;subscriptionPricePoint&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsSubscriptionPrices">the fields to include for returned resources of type subscriptionPrices (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>SubscriptionPricesResponse</returns>
        public SubscriptionPricesResponse SubscriptionsPricesGetToManyRelated(string id, List<string>? filterSubscriptionPricePoint = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsSubscriptionPrices = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionPricesResponse> localVarResponse = SubscriptionsPricesGetToManyRelatedWithHttpInfo(id, filterSubscriptionPricePoint, filterTerritory, fieldsSubscriptionPricePoints, fieldsSubscriptionPrices, fieldsTerritories, limit, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterSubscriptionPricePoint">filter by id(s) of related &#39;subscriptionPricePoint&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsSubscriptionPrices">the fields to include for returned resources of type subscriptionPrices (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of SubscriptionPricesResponse</returns>
        public AppStoreConnect.Client.ApiResponse<SubscriptionPricesResponse> SubscriptionsPricesGetToManyRelatedWithHttpInfo(string id, List<string>? filterSubscriptionPricePoint = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsSubscriptionPrices = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsPricesGetToManyRelated");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterSubscriptionPricePoint != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[subscriptionPricePoint]", filterSubscriptionPricePoint));
            }
            if (filterTerritory != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[territory]", filterTerritory));
            }
            if (fieldsSubscriptionPricePoints != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionPricePoints]", fieldsSubscriptionPricePoints));
            }
            if (fieldsSubscriptionPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionPrices]", fieldsSubscriptionPrices));
            }
            if (fieldsTerritories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[territories]", fieldsTerritories));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionPricesResponse>("/v1/subscriptions/{id}/prices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsPricesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterSubscriptionPricePoint">filter by id(s) of related &#39;subscriptionPricePoint&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsSubscriptionPrices">the fields to include for returned resources of type subscriptionPrices (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionPricesResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionPricesResponse> SubscriptionsPricesGetToManyRelatedAsync(string id, List<string>? filterSubscriptionPricePoint = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsSubscriptionPrices = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionPricesResponse> localVarResponse = await SubscriptionsPricesGetToManyRelatedWithHttpInfoAsync(id, filterSubscriptionPricePoint, filterTerritory, fieldsSubscriptionPricePoints, fieldsSubscriptionPrices, fieldsTerritories, limit, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterSubscriptionPricePoint">filter by id(s) of related &#39;subscriptionPricePoint&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsSubscriptionPrices">the fields to include for returned resources of type subscriptionPrices (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionPricesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<SubscriptionPricesResponse>> SubscriptionsPricesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterSubscriptionPricePoint = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsSubscriptionPrices = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsPricesGetToManyRelated");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterSubscriptionPricePoint != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[subscriptionPricePoint]", filterSubscriptionPricePoint));
            }
            if (filterTerritory != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[territory]", filterTerritory));
            }
            if (fieldsSubscriptionPricePoints != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionPricePoints]", fieldsSubscriptionPricePoints));
            }
            if (fieldsSubscriptionPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionPrices]", fieldsSubscriptionPrices));
            }
            if (fieldsTerritories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[territories]", fieldsTerritories));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SubscriptionPricesResponse>("/v1/subscriptions/{id}/prices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsPricesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>SubscriptionPricesLinkagesResponse</returns>
        public SubscriptionPricesLinkagesResponse SubscriptionsPricesGetToManyRelationship(string id, int? limit = default(int?))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionPricesLinkagesResponse> localVarResponse = SubscriptionsPricesGetToManyRelationshipWithHttpInfo(id, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of SubscriptionPricesLinkagesResponse</returns>
        public AppStoreConnect.Client.ApiResponse<SubscriptionPricesLinkagesResponse> SubscriptionsPricesGetToManyRelationshipWithHttpInfo(string id, int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsPricesGetToManyRelationship");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionPricesLinkagesResponse>("/v1/subscriptions/{id}/relationships/prices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsPricesGetToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionPricesLinkagesResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionPricesLinkagesResponse> SubscriptionsPricesGetToManyRelationshipAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionPricesLinkagesResponse> localVarResponse = await SubscriptionsPricesGetToManyRelationshipWithHttpInfoAsync(id, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionPricesLinkagesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<SubscriptionPricesLinkagesResponse>> SubscriptionsPricesGetToManyRelationshipWithHttpInfoAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsPricesGetToManyRelationship");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SubscriptionPricesLinkagesResponse>("/v1/subscriptions/{id}/relationships/prices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsPricesGetToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsPromotedPurchaseImages">the fields to include for returned resources of type promotedPurchaseImages (optional)</param>
        /// <param name="limitPromotionImages">maximum number of related promotionImages returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>PromotedPurchaseResponse</returns>
        public PromotedPurchaseResponse SubscriptionsPromotedPurchaseGetToOneRelated(string id, List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsPromotedPurchaseImages = default(List<string>?), int? limitPromotionImages = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Client.ApiResponse<PromotedPurchaseResponse> localVarResponse = SubscriptionsPromotedPurchaseGetToOneRelatedWithHttpInfo(id, fieldsPromotedPurchases, fieldsSubscriptions, fieldsInAppPurchases, fieldsPromotedPurchaseImages, limitPromotionImages, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsPromotedPurchaseImages">the fields to include for returned resources of type promotedPurchaseImages (optional)</param>
        /// <param name="limitPromotionImages">maximum number of related promotionImages returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of PromotedPurchaseResponse</returns>
        public AppStoreConnect.Client.ApiResponse<PromotedPurchaseResponse> SubscriptionsPromotedPurchaseGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsPromotedPurchaseImages = default(List<string>?), int? limitPromotionImages = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsPromotedPurchaseGetToOneRelated");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsPromotedPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[promotedPurchases]", fieldsPromotedPurchases));
            }
            if (fieldsSubscriptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptions]", fieldsSubscriptions));
            }
            if (fieldsInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchases]", fieldsInAppPurchases));
            }
            if (fieldsPromotedPurchaseImages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[promotedPurchaseImages]", fieldsPromotedPurchaseImages));
            }
            if (limitPromotionImages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[promotionImages]", limitPromotionImages));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PromotedPurchaseResponse>("/v1/subscriptions/{id}/promotedPurchase", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsPromotedPurchaseGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsPromotedPurchaseImages">the fields to include for returned resources of type promotedPurchaseImages (optional)</param>
        /// <param name="limitPromotionImages">maximum number of related promotionImages returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotedPurchaseResponse</returns>
        public async System.Threading.Tasks.Task<PromotedPurchaseResponse> SubscriptionsPromotedPurchaseGetToOneRelatedAsync(string id, List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsPromotedPurchaseImages = default(List<string>?), int? limitPromotionImages = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<PromotedPurchaseResponse> localVarResponse = await SubscriptionsPromotedPurchaseGetToOneRelatedWithHttpInfoAsync(id, fieldsPromotedPurchases, fieldsSubscriptions, fieldsInAppPurchases, fieldsPromotedPurchaseImages, limitPromotionImages, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsPromotedPurchaseImages">the fields to include for returned resources of type promotedPurchaseImages (optional)</param>
        /// <param name="limitPromotionImages">maximum number of related promotionImages returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotedPurchaseResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<PromotedPurchaseResponse>> SubscriptionsPromotedPurchaseGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsPromotedPurchaseImages = default(List<string>?), int? limitPromotionImages = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsPromotedPurchaseGetToOneRelated");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsPromotedPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[promotedPurchases]", fieldsPromotedPurchases));
            }
            if (fieldsSubscriptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptions]", fieldsSubscriptions));
            }
            if (fieldsInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchases]", fieldsInAppPurchases));
            }
            if (fieldsPromotedPurchaseImages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[promotedPurchaseImages]", fieldsPromotedPurchaseImages));
            }
            if (limitPromotionImages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[promotionImages]", limitPromotionImages));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PromotedPurchaseResponse>("/v1/subscriptions/{id}/promotedPurchase", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsPromotedPurchaseGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by territory (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOffers">the fields to include for returned resources of type subscriptionPromotionalOffers (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOfferPrices">the fields to include for returned resources of type subscriptionPromotionalOfferPrices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>SubscriptionPromotionalOffersResponse</returns>
        public SubscriptionPromotionalOffersResponse SubscriptionsPromotionalOffersGetToManyRelated(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOffers = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOfferPrices = default(List<string>?), int? limit = default(int?), int? limitPrices = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionPromotionalOffersResponse> localVarResponse = SubscriptionsPromotionalOffersGetToManyRelatedWithHttpInfo(id, filterTerritory, fieldsSubscriptionPromotionalOffers, fieldsSubscriptions, fieldsSubscriptionPromotionalOfferPrices, limit, limitPrices, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by territory (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOffers">the fields to include for returned resources of type subscriptionPromotionalOffers (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOfferPrices">the fields to include for returned resources of type subscriptionPromotionalOfferPrices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of SubscriptionPromotionalOffersResponse</returns>
        public AppStoreConnect.Client.ApiResponse<SubscriptionPromotionalOffersResponse> SubscriptionsPromotionalOffersGetToManyRelatedWithHttpInfo(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOffers = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOfferPrices = default(List<string>?), int? limit = default(int?), int? limitPrices = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsPromotionalOffersGetToManyRelated");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterTerritory != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[territory]", filterTerritory));
            }
            if (fieldsSubscriptionPromotionalOffers != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionPromotionalOffers]", fieldsSubscriptionPromotionalOffers));
            }
            if (fieldsSubscriptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptions]", fieldsSubscriptions));
            }
            if (fieldsSubscriptionPromotionalOfferPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionPromotionalOfferPrices]", fieldsSubscriptionPromotionalOfferPrices));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (limitPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[prices]", limitPrices));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionPromotionalOffersResponse>("/v1/subscriptions/{id}/promotionalOffers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsPromotionalOffersGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by territory (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOffers">the fields to include for returned resources of type subscriptionPromotionalOffers (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOfferPrices">the fields to include for returned resources of type subscriptionPromotionalOfferPrices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionPromotionalOffersResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionPromotionalOffersResponse> SubscriptionsPromotionalOffersGetToManyRelatedAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOffers = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOfferPrices = default(List<string>?), int? limit = default(int?), int? limitPrices = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionPromotionalOffersResponse> localVarResponse = await SubscriptionsPromotionalOffersGetToManyRelatedWithHttpInfoAsync(id, filterTerritory, fieldsSubscriptionPromotionalOffers, fieldsSubscriptions, fieldsSubscriptionPromotionalOfferPrices, limit, limitPrices, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by territory (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOffers">the fields to include for returned resources of type subscriptionPromotionalOffers (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOfferPrices">the fields to include for returned resources of type subscriptionPromotionalOfferPrices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionPromotionalOffersResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<SubscriptionPromotionalOffersResponse>> SubscriptionsPromotionalOffersGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOffers = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOfferPrices = default(List<string>?), int? limit = default(int?), int? limitPrices = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsPromotionalOffersGetToManyRelated");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterTerritory != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[territory]", filterTerritory));
            }
            if (fieldsSubscriptionPromotionalOffers != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionPromotionalOffers]", fieldsSubscriptionPromotionalOffers));
            }
            if (fieldsSubscriptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptions]", fieldsSubscriptions));
            }
            if (fieldsSubscriptionPromotionalOfferPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionPromotionalOfferPrices]", fieldsSubscriptionPromotionalOfferPrices));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (limitPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[prices]", limitPrices));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SubscriptionPromotionalOffersResponse>("/v1/subscriptions/{id}/promotionalOffers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsPromotionalOffersGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionLocalizations">the fields to include for returned resources of type subscriptionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>SubscriptionLocalizationsResponse</returns>
        public SubscriptionLocalizationsResponse SubscriptionsSubscriptionLocalizationsGetToManyRelated(string id, List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionLocalizationsResponse> localVarResponse = SubscriptionsSubscriptionLocalizationsGetToManyRelatedWithHttpInfo(id, fieldsSubscriptions, fieldsSubscriptionLocalizations, limit, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionLocalizations">the fields to include for returned resources of type subscriptionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of SubscriptionLocalizationsResponse</returns>
        public AppStoreConnect.Client.ApiResponse<SubscriptionLocalizationsResponse> SubscriptionsSubscriptionLocalizationsGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsSubscriptionLocalizationsGetToManyRelated");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsSubscriptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptions]", fieldsSubscriptions));
            }
            if (fieldsSubscriptionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionLocalizations]", fieldsSubscriptionLocalizations));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionLocalizationsResponse>("/v1/subscriptions/{id}/subscriptionLocalizations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsSubscriptionLocalizationsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionLocalizations">the fields to include for returned resources of type subscriptionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionLocalizationsResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionLocalizationsResponse> SubscriptionsSubscriptionLocalizationsGetToManyRelatedAsync(string id, List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionLocalizationsResponse> localVarResponse = await SubscriptionsSubscriptionLocalizationsGetToManyRelatedWithHttpInfoAsync(id, fieldsSubscriptions, fieldsSubscriptionLocalizations, limit, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionLocalizations">the fields to include for returned resources of type subscriptionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionLocalizationsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<SubscriptionLocalizationsResponse>> SubscriptionsSubscriptionLocalizationsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsSubscriptionLocalizationsGetToManyRelated");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsSubscriptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptions]", fieldsSubscriptions));
            }
            if (fieldsSubscriptionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionLocalizations]", fieldsSubscriptionLocalizations));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SubscriptionLocalizationsResponse>("/v1/subscriptions/{id}/subscriptionLocalizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsSubscriptionLocalizationsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionUpdateRequest">Subscription representation</param>
        /// <returns>SubscriptionResponse</returns>
        public SubscriptionResponse SubscriptionsUpdateInstance(string id, SubscriptionUpdateRequest subscriptionUpdateRequest)
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionResponse> localVarResponse = SubscriptionsUpdateInstanceWithHttpInfo(id, subscriptionUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionUpdateRequest">Subscription representation</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        public AppStoreConnect.Client.ApiResponse<SubscriptionResponse> SubscriptionsUpdateInstanceWithHttpInfo(string id, SubscriptionUpdateRequest subscriptionUpdateRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsUpdateInstance");

            // verify the required parameter 'subscriptionUpdateRequest' is set
            if (subscriptionUpdateRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'subscriptionUpdateRequest' when calling SubscriptionsApi->SubscriptionsUpdateInstance");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = subscriptionUpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<SubscriptionResponse>("/v1/subscriptions/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionUpdateRequest">Subscription representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionResponse> SubscriptionsUpdateInstanceAsync(string id, SubscriptionUpdateRequest subscriptionUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionResponse> localVarResponse = await SubscriptionsUpdateInstanceWithHttpInfoAsync(id, subscriptionUpdateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionUpdateRequest">Subscription representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<SubscriptionResponse>> SubscriptionsUpdateInstanceWithHttpInfoAsync(string id, SubscriptionUpdateRequest subscriptionUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->SubscriptionsUpdateInstance");

            // verify the required parameter 'subscriptionUpdateRequest' is set
            if (subscriptionUpdateRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'subscriptionUpdateRequest' when calling SubscriptionsApi->SubscriptionsUpdateInstance");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = subscriptionUpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<SubscriptionResponse>("/v1/subscriptions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionsUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
