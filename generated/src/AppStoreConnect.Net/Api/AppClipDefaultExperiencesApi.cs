/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AppStoreConnect.Client;
using AppStoreConnect.Model;

namespace AppStoreConnect.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppClipDefaultExperiencesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppClipAppStoreReviewDetails">the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>AppClipAppStoreReviewDetailResponse</returns>
        AppClipAppStoreReviewDetailResponse AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelated(string id, List<string>? fieldsAppClipAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppClipAppStoreReviewDetails">the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of AppClipAppStoreReviewDetailResponse</returns>
        ApiResponse<AppClipAppStoreReviewDetailResponse> AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAppClipAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLocale">filter by attribute &#39;locale&#39; (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppClipDefaultExperienceLocalizations">the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)</param>
        /// <param name="fieldsAppClipHeaderImages">the fields to include for returned resources of type appClipHeaderImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>AppClipDefaultExperienceLocalizationsResponse</returns>
        AppClipDefaultExperienceLocalizationsResponse AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated(string id, List<string>? filterLocale = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppClipDefaultExperienceLocalizations = default(List<string>?), List<string>? fieldsAppClipHeaderImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLocale">filter by attribute &#39;locale&#39; (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppClipDefaultExperienceLocalizations">the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)</param>
        /// <param name="fieldsAppClipHeaderImages">the fields to include for returned resources of type appClipHeaderImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of AppClipDefaultExperienceLocalizationsResponse</returns>
        ApiResponse<AppClipDefaultExperienceLocalizationsResponse> AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedWithHttpInfo(string id, List<string>? filterLocale = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppClipDefaultExperienceLocalizations = default(List<string>?), List<string>? fieldsAppClipHeaderImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appClipDefaultExperienceCreateRequest">AppClipDefaultExperience representation</param>
        /// <returns>AppClipDefaultExperienceResponse</returns>
        AppClipDefaultExperienceResponse AppClipDefaultExperiencesCreateInstance(AppClipDefaultExperienceCreateRequest appClipDefaultExperienceCreateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appClipDefaultExperienceCreateRequest">AppClipDefaultExperience representation</param>
        /// <returns>ApiResponse of AppClipDefaultExperienceResponse</returns>
        ApiResponse<AppClipDefaultExperienceResponse> AppClipDefaultExperiencesCreateInstanceWithHttpInfo(AppClipDefaultExperienceCreateRequest appClipDefaultExperienceCreateRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns></returns>
        void AppClipDefaultExperiencesDeleteInstance(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AppClipDefaultExperiencesDeleteInstanceWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsAppClipAppStoreReviewDetails">the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperienceLocalizations">the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)</param>
        /// <param name="limitAppClipDefaultExperienceLocalizations">maximum number of related appClipDefaultExperienceLocalizations returned (when they are included) (optional)</param>
        /// <returns>AppClipDefaultExperienceResponse</returns>
        AppClipDefaultExperienceResponse AppClipDefaultExperiencesGetInstance(string id, List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsAppClipAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppClipDefaultExperienceLocalizations = default(List<string>?), int? limitAppClipDefaultExperienceLocalizations = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsAppClipAppStoreReviewDetails">the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperienceLocalizations">the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)</param>
        /// <param name="limitAppClipDefaultExperienceLocalizations">maximum number of related appClipDefaultExperienceLocalizations returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppClipDefaultExperienceResponse</returns>
        ApiResponse<AppClipDefaultExperienceResponse> AppClipDefaultExperiencesGetInstanceWithHttpInfo(string id, List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsAppClipAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppClipDefaultExperienceLocalizations = default(List<string>?), int? limitAppClipDefaultExperienceLocalizations = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>AppStoreVersionResponse</returns>
        AppStoreVersionResponse AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated(string id, List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of AppStoreVersionResponse</returns>
        ApiResponse<AppStoreVersionResponse> AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse</returns>
        AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationship(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse</returns>
        ApiResponse<AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse> AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest">Related linkage</param>
        /// <returns></returns>
        void AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationship(string id, AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest">Related linkage</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipWithHttpInfo(string id, AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appClipDefaultExperienceUpdateRequest">AppClipDefaultExperience representation</param>
        /// <returns>AppClipDefaultExperienceResponse</returns>
        AppClipDefaultExperienceResponse AppClipDefaultExperiencesUpdateInstance(string id, AppClipDefaultExperienceUpdateRequest appClipDefaultExperienceUpdateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appClipDefaultExperienceUpdateRequest">AppClipDefaultExperience representation</param>
        /// <returns>ApiResponse of AppClipDefaultExperienceResponse</returns>
        ApiResponse<AppClipDefaultExperienceResponse> AppClipDefaultExperiencesUpdateInstanceWithHttpInfo(string id, AppClipDefaultExperienceUpdateRequest appClipDefaultExperienceUpdateRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppClipDefaultExperiencesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppClipAppStoreReviewDetails">the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppClipAppStoreReviewDetailResponse</returns>
        System.Threading.Tasks.Task<AppClipAppStoreReviewDetailResponse> AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedAsync(string id, List<string>? fieldsAppClipAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppClipAppStoreReviewDetails">the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppClipAppStoreReviewDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppClipAppStoreReviewDetailResponse>> AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppClipAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLocale">filter by attribute &#39;locale&#39; (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppClipDefaultExperienceLocalizations">the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)</param>
        /// <param name="fieldsAppClipHeaderImages">the fields to include for returned resources of type appClipHeaderImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppClipDefaultExperienceLocalizationsResponse</returns>
        System.Threading.Tasks.Task<AppClipDefaultExperienceLocalizationsResponse> AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedAsync(string id, List<string>? filterLocale = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppClipDefaultExperienceLocalizations = default(List<string>?), List<string>? fieldsAppClipHeaderImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLocale">filter by attribute &#39;locale&#39; (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppClipDefaultExperienceLocalizations">the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)</param>
        /// <param name="fieldsAppClipHeaderImages">the fields to include for returned resources of type appClipHeaderImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppClipDefaultExperienceLocalizationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppClipDefaultExperienceLocalizationsResponse>> AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterLocale = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppClipDefaultExperienceLocalizations = default(List<string>?), List<string>? fieldsAppClipHeaderImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appClipDefaultExperienceCreateRequest">AppClipDefaultExperience representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppClipDefaultExperienceResponse</returns>
        System.Threading.Tasks.Task<AppClipDefaultExperienceResponse> AppClipDefaultExperiencesCreateInstanceAsync(AppClipDefaultExperienceCreateRequest appClipDefaultExperienceCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appClipDefaultExperienceCreateRequest">AppClipDefaultExperience representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppClipDefaultExperienceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppClipDefaultExperienceResponse>> AppClipDefaultExperiencesCreateInstanceWithHttpInfoAsync(AppClipDefaultExperienceCreateRequest appClipDefaultExperienceCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AppClipDefaultExperiencesDeleteInstanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppClipDefaultExperiencesDeleteInstanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsAppClipAppStoreReviewDetails">the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperienceLocalizations">the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)</param>
        /// <param name="limitAppClipDefaultExperienceLocalizations">maximum number of related appClipDefaultExperienceLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppClipDefaultExperienceResponse</returns>
        System.Threading.Tasks.Task<AppClipDefaultExperienceResponse> AppClipDefaultExperiencesGetInstanceAsync(string id, List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsAppClipAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppClipDefaultExperienceLocalizations = default(List<string>?), int? limitAppClipDefaultExperienceLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsAppClipAppStoreReviewDetails">the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperienceLocalizations">the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)</param>
        /// <param name="limitAppClipDefaultExperienceLocalizations">maximum number of related appClipDefaultExperienceLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppClipDefaultExperienceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppClipDefaultExperienceResponse>> AppClipDefaultExperiencesGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsAppClipAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppClipDefaultExperienceLocalizations = default(List<string>?), int? limitAppClipDefaultExperienceLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionResponse</returns>
        System.Threading.Tasks.Task<AppStoreVersionResponse> AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedAsync(string id, List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppStoreVersionResponse>> AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse</returns>
        System.Threading.Tasks.Task<AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse> AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse>> AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest">Related linkage</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipAsync(string id, AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest">Related linkage</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipWithHttpInfoAsync(string id, AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appClipDefaultExperienceUpdateRequest">AppClipDefaultExperience representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppClipDefaultExperienceResponse</returns>
        System.Threading.Tasks.Task<AppClipDefaultExperienceResponse> AppClipDefaultExperiencesUpdateInstanceAsync(string id, AppClipDefaultExperienceUpdateRequest appClipDefaultExperienceUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appClipDefaultExperienceUpdateRequest">AppClipDefaultExperience representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppClipDefaultExperienceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppClipDefaultExperienceResponse>> AppClipDefaultExperiencesUpdateInstanceWithHttpInfoAsync(string id, AppClipDefaultExperienceUpdateRequest appClipDefaultExperienceUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppClipDefaultExperiencesApi : IAppClipDefaultExperiencesApiSync, IAppClipDefaultExperiencesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AppClipDefaultExperiencesApi : IDisposable, IAppClipDefaultExperiencesApi
    {
        private AppStoreConnect.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AppClipDefaultExperiencesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public AppClipDefaultExperiencesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppClipDefaultExperiencesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public AppClipDefaultExperiencesApi(string basePath)
        {
            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppClipDefaultExperiencesApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public AppClipDefaultExperiencesApi(AppStoreConnect.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppClipDefaultExperiencesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AppClipDefaultExperiencesApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppClipDefaultExperiencesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AppClipDefaultExperiencesApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppClipDefaultExperiencesApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AppClipDefaultExperiencesApi(HttpClient client, AppStoreConnect.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppClipDefaultExperiencesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public AppClipDefaultExperiencesApi(AppStoreConnect.Client.ISynchronousClient client, AppStoreConnect.Client.IAsynchronousClient asyncClient, AppStoreConnect.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AppStoreConnect.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AppStoreConnect.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AppStoreConnect.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AppStoreConnect.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AppStoreConnect.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppClipAppStoreReviewDetails">the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>AppClipAppStoreReviewDetailResponse</returns>
        public AppClipAppStoreReviewDetailResponse AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelated(string id, List<string>? fieldsAppClipAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Client.ApiResponse<AppClipAppStoreReviewDetailResponse> localVarResponse = AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedWithHttpInfo(id, fieldsAppClipAppStoreReviewDetails, fieldsAppClipDefaultExperiences, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppClipAppStoreReviewDetails">the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of AppClipAppStoreReviewDetailResponse</returns>
        public AppStoreConnect.Client.ApiResponse<AppClipAppStoreReviewDetailResponse> AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAppClipAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppClipDefaultExperiencesApi->AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelated");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppClipAppStoreReviewDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipAppStoreReviewDetails]", fieldsAppClipAppStoreReviewDetails));
            }
            if (fieldsAppClipDefaultExperiences != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipDefaultExperiences]", fieldsAppClipDefaultExperiences));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppClipAppStoreReviewDetailResponse>("/v1/appClipDefaultExperiences/{id}/appClipAppStoreReviewDetail", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppClipAppStoreReviewDetails">the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppClipAppStoreReviewDetailResponse</returns>
        public async System.Threading.Tasks.Task<AppClipAppStoreReviewDetailResponse> AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedAsync(string id, List<string>? fieldsAppClipAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<AppClipAppStoreReviewDetailResponse> localVarResponse = await AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedWithHttpInfoAsync(id, fieldsAppClipAppStoreReviewDetails, fieldsAppClipDefaultExperiences, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppClipAppStoreReviewDetails">the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppClipAppStoreReviewDetailResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<AppClipAppStoreReviewDetailResponse>> AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppClipAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppClipDefaultExperiencesApi->AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelated");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppClipAppStoreReviewDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipAppStoreReviewDetails]", fieldsAppClipAppStoreReviewDetails));
            }
            if (fieldsAppClipDefaultExperiences != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipDefaultExperiences]", fieldsAppClipDefaultExperiences));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppClipAppStoreReviewDetailResponse>("/v1/appClipDefaultExperiences/{id}/appClipAppStoreReviewDetail", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLocale">filter by attribute &#39;locale&#39; (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppClipDefaultExperienceLocalizations">the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)</param>
        /// <param name="fieldsAppClipHeaderImages">the fields to include for returned resources of type appClipHeaderImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>AppClipDefaultExperienceLocalizationsResponse</returns>
        public AppClipDefaultExperienceLocalizationsResponse AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated(string id, List<string>? filterLocale = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppClipDefaultExperienceLocalizations = default(List<string>?), List<string>? fieldsAppClipHeaderImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Client.ApiResponse<AppClipDefaultExperienceLocalizationsResponse> localVarResponse = AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedWithHttpInfo(id, filterLocale, fieldsAppClipDefaultExperiences, fieldsAppClipDefaultExperienceLocalizations, fieldsAppClipHeaderImages, limit, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLocale">filter by attribute &#39;locale&#39; (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppClipDefaultExperienceLocalizations">the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)</param>
        /// <param name="fieldsAppClipHeaderImages">the fields to include for returned resources of type appClipHeaderImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of AppClipDefaultExperienceLocalizationsResponse</returns>
        public AppStoreConnect.Client.ApiResponse<AppClipDefaultExperienceLocalizationsResponse> AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedWithHttpInfo(string id, List<string>? filterLocale = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppClipDefaultExperienceLocalizations = default(List<string>?), List<string>? fieldsAppClipHeaderImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppClipDefaultExperiencesApi->AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterLocale != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[locale]", filterLocale));
            }
            if (fieldsAppClipDefaultExperiences != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipDefaultExperiences]", fieldsAppClipDefaultExperiences));
            }
            if (fieldsAppClipDefaultExperienceLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipDefaultExperienceLocalizations]", fieldsAppClipDefaultExperienceLocalizations));
            }
            if (fieldsAppClipHeaderImages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipHeaderImages]", fieldsAppClipHeaderImages));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppClipDefaultExperienceLocalizationsResponse>("/v1/appClipDefaultExperiences/{id}/appClipDefaultExperienceLocalizations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLocale">filter by attribute &#39;locale&#39; (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppClipDefaultExperienceLocalizations">the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)</param>
        /// <param name="fieldsAppClipHeaderImages">the fields to include for returned resources of type appClipHeaderImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppClipDefaultExperienceLocalizationsResponse</returns>
        public async System.Threading.Tasks.Task<AppClipDefaultExperienceLocalizationsResponse> AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedAsync(string id, List<string>? filterLocale = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppClipDefaultExperienceLocalizations = default(List<string>?), List<string>? fieldsAppClipHeaderImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<AppClipDefaultExperienceLocalizationsResponse> localVarResponse = await AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedWithHttpInfoAsync(id, filterLocale, fieldsAppClipDefaultExperiences, fieldsAppClipDefaultExperienceLocalizations, fieldsAppClipHeaderImages, limit, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLocale">filter by attribute &#39;locale&#39; (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppClipDefaultExperienceLocalizations">the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)</param>
        /// <param name="fieldsAppClipHeaderImages">the fields to include for returned resources of type appClipHeaderImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppClipDefaultExperienceLocalizationsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<AppClipDefaultExperienceLocalizationsResponse>> AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterLocale = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppClipDefaultExperienceLocalizations = default(List<string>?), List<string>? fieldsAppClipHeaderImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppClipDefaultExperiencesApi->AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterLocale != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[locale]", filterLocale));
            }
            if (fieldsAppClipDefaultExperiences != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipDefaultExperiences]", fieldsAppClipDefaultExperiences));
            }
            if (fieldsAppClipDefaultExperienceLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipDefaultExperienceLocalizations]", fieldsAppClipDefaultExperienceLocalizations));
            }
            if (fieldsAppClipHeaderImages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipHeaderImages]", fieldsAppClipHeaderImages));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppClipDefaultExperienceLocalizationsResponse>("/v1/appClipDefaultExperiences/{id}/appClipDefaultExperienceLocalizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appClipDefaultExperienceCreateRequest">AppClipDefaultExperience representation</param>
        /// <returns>AppClipDefaultExperienceResponse</returns>
        public AppClipDefaultExperienceResponse AppClipDefaultExperiencesCreateInstance(AppClipDefaultExperienceCreateRequest appClipDefaultExperienceCreateRequest)
        {
            AppStoreConnect.Client.ApiResponse<AppClipDefaultExperienceResponse> localVarResponse = AppClipDefaultExperiencesCreateInstanceWithHttpInfo(appClipDefaultExperienceCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appClipDefaultExperienceCreateRequest">AppClipDefaultExperience representation</param>
        /// <returns>ApiResponse of AppClipDefaultExperienceResponse</returns>
        public AppStoreConnect.Client.ApiResponse<AppClipDefaultExperienceResponse> AppClipDefaultExperiencesCreateInstanceWithHttpInfo(AppClipDefaultExperienceCreateRequest appClipDefaultExperienceCreateRequest)
        {
            // verify the required parameter 'appClipDefaultExperienceCreateRequest' is set
            if (appClipDefaultExperienceCreateRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'appClipDefaultExperienceCreateRequest' when calling AppClipDefaultExperiencesApi->AppClipDefaultExperiencesCreateInstance");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = appClipDefaultExperienceCreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AppClipDefaultExperienceResponse>("/v1/appClipDefaultExperiences", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppClipDefaultExperiencesCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appClipDefaultExperienceCreateRequest">AppClipDefaultExperience representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppClipDefaultExperienceResponse</returns>
        public async System.Threading.Tasks.Task<AppClipDefaultExperienceResponse> AppClipDefaultExperiencesCreateInstanceAsync(AppClipDefaultExperienceCreateRequest appClipDefaultExperienceCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<AppClipDefaultExperienceResponse> localVarResponse = await AppClipDefaultExperiencesCreateInstanceWithHttpInfoAsync(appClipDefaultExperienceCreateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appClipDefaultExperienceCreateRequest">AppClipDefaultExperience representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppClipDefaultExperienceResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<AppClipDefaultExperienceResponse>> AppClipDefaultExperiencesCreateInstanceWithHttpInfoAsync(AppClipDefaultExperienceCreateRequest appClipDefaultExperienceCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appClipDefaultExperienceCreateRequest' is set
            if (appClipDefaultExperienceCreateRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'appClipDefaultExperienceCreateRequest' when calling AppClipDefaultExperiencesApi->AppClipDefaultExperiencesCreateInstance");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = appClipDefaultExperienceCreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AppClipDefaultExperienceResponse>("/v1/appClipDefaultExperiences", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppClipDefaultExperiencesCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns></returns>
        public void AppClipDefaultExperiencesDeleteInstance(string id)
        {
            AppClipDefaultExperiencesDeleteInstanceWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Client.ApiResponse<Object> AppClipDefaultExperiencesDeleteInstanceWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppClipDefaultExperiencesApi->AppClipDefaultExperiencesDeleteInstance");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/appClipDefaultExperiences/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppClipDefaultExperiencesDeleteInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AppClipDefaultExperiencesDeleteInstanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AppClipDefaultExperiencesDeleteInstanceWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<Object>> AppClipDefaultExperiencesDeleteInstanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppClipDefaultExperiencesApi->AppClipDefaultExperiencesDeleteInstance");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/appClipDefaultExperiences/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppClipDefaultExperiencesDeleteInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsAppClipAppStoreReviewDetails">the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperienceLocalizations">the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)</param>
        /// <param name="limitAppClipDefaultExperienceLocalizations">maximum number of related appClipDefaultExperienceLocalizations returned (when they are included) (optional)</param>
        /// <returns>AppClipDefaultExperienceResponse</returns>
        public AppClipDefaultExperienceResponse AppClipDefaultExperiencesGetInstance(string id, List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsAppClipAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppClipDefaultExperienceLocalizations = default(List<string>?), int? limitAppClipDefaultExperienceLocalizations = default(int?))
        {
            AppStoreConnect.Client.ApiResponse<AppClipDefaultExperienceResponse> localVarResponse = AppClipDefaultExperiencesGetInstanceWithHttpInfo(id, fieldsAppClipDefaultExperiences, include, fieldsAppClipAppStoreReviewDetails, fieldsAppStoreVersions, fieldsAppClipDefaultExperienceLocalizations, limitAppClipDefaultExperienceLocalizations);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsAppClipAppStoreReviewDetails">the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperienceLocalizations">the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)</param>
        /// <param name="limitAppClipDefaultExperienceLocalizations">maximum number of related appClipDefaultExperienceLocalizations returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppClipDefaultExperienceResponse</returns>
        public AppStoreConnect.Client.ApiResponse<AppClipDefaultExperienceResponse> AppClipDefaultExperiencesGetInstanceWithHttpInfo(string id, List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsAppClipAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppClipDefaultExperienceLocalizations = default(List<string>?), int? limitAppClipDefaultExperienceLocalizations = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppClipDefaultExperiencesApi->AppClipDefaultExperiencesGetInstance");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppClipDefaultExperiences != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipDefaultExperiences]", fieldsAppClipDefaultExperiences));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (fieldsAppClipAppStoreReviewDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipAppStoreReviewDetails]", fieldsAppClipAppStoreReviewDetails));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsAppClipDefaultExperienceLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipDefaultExperienceLocalizations]", fieldsAppClipDefaultExperienceLocalizations));
            }
            if (limitAppClipDefaultExperienceLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[appClipDefaultExperienceLocalizations]", limitAppClipDefaultExperienceLocalizations));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppClipDefaultExperienceResponse>("/v1/appClipDefaultExperiences/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppClipDefaultExperiencesGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsAppClipAppStoreReviewDetails">the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperienceLocalizations">the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)</param>
        /// <param name="limitAppClipDefaultExperienceLocalizations">maximum number of related appClipDefaultExperienceLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppClipDefaultExperienceResponse</returns>
        public async System.Threading.Tasks.Task<AppClipDefaultExperienceResponse> AppClipDefaultExperiencesGetInstanceAsync(string id, List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsAppClipAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppClipDefaultExperienceLocalizations = default(List<string>?), int? limitAppClipDefaultExperienceLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<AppClipDefaultExperienceResponse> localVarResponse = await AppClipDefaultExperiencesGetInstanceWithHttpInfoAsync(id, fieldsAppClipDefaultExperiences, include, fieldsAppClipAppStoreReviewDetails, fieldsAppStoreVersions, fieldsAppClipDefaultExperienceLocalizations, limitAppClipDefaultExperienceLocalizations, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsAppClipAppStoreReviewDetails">the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperienceLocalizations">the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)</param>
        /// <param name="limitAppClipDefaultExperienceLocalizations">maximum number of related appClipDefaultExperienceLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppClipDefaultExperienceResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<AppClipDefaultExperienceResponse>> AppClipDefaultExperiencesGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsAppClipAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppClipDefaultExperienceLocalizations = default(List<string>?), int? limitAppClipDefaultExperienceLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppClipDefaultExperiencesApi->AppClipDefaultExperiencesGetInstance");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppClipDefaultExperiences != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipDefaultExperiences]", fieldsAppClipDefaultExperiences));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (fieldsAppClipAppStoreReviewDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipAppStoreReviewDetails]", fieldsAppClipAppStoreReviewDetails));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsAppClipDefaultExperienceLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipDefaultExperienceLocalizations]", fieldsAppClipDefaultExperienceLocalizations));
            }
            if (limitAppClipDefaultExperienceLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[appClipDefaultExperienceLocalizations]", limitAppClipDefaultExperienceLocalizations));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppClipDefaultExperienceResponse>("/v1/appClipDefaultExperiences/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppClipDefaultExperiencesGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>AppStoreVersionResponse</returns>
        public AppStoreVersionResponse AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated(string id, List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Client.ApiResponse<AppStoreVersionResponse> localVarResponse = AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedWithHttpInfo(id, fieldsAppStoreVersionExperiments, fieldsAgeRatingDeclarations, fieldsAppStoreVersionSubmissions, fieldsAppStoreReviewDetails, fieldsAppStoreVersions, fieldsApps, fieldsRoutingAppCoverages, fieldsAppClipDefaultExperiences, fieldsAppStoreVersionPhasedReleases, fieldsBuilds, fieldsAppStoreVersionLocalizations, limitAppStoreVersionLocalizations, limitAppStoreVersionExperiments, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of AppStoreVersionResponse</returns>
        public AppStoreConnect.Client.ApiResponse<AppStoreVersionResponse> AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppClipDefaultExperiencesApi->AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperiments]", fieldsAppStoreVersionExperiments));
            }
            if (fieldsAgeRatingDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ageRatingDeclarations]", fieldsAgeRatingDeclarations));
            }
            if (fieldsAppStoreVersionSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionSubmissions]", fieldsAppStoreVersionSubmissions));
            }
            if (fieldsAppStoreReviewDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreReviewDetails]", fieldsAppStoreReviewDetails));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsRoutingAppCoverages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[routingAppCoverages]", fieldsRoutingAppCoverages));
            }
            if (fieldsAppClipDefaultExperiences != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipDefaultExperiences]", fieldsAppClipDefaultExperiences));
            }
            if (fieldsAppStoreVersionPhasedReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionPhasedReleases]", fieldsAppStoreVersionPhasedReleases));
            }
            if (fieldsBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[builds]", fieldsBuilds));
            }
            if (fieldsAppStoreVersionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionLocalizations]", fieldsAppStoreVersionLocalizations));
            }
            if (limitAppStoreVersionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionLocalizations]", limitAppStoreVersionLocalizations));
            }
            if (limitAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperiments]", limitAppStoreVersionExperiments));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppStoreVersionResponse>("/v1/appClipDefaultExperiences/{id}/releaseWithAppStoreVersion", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreVersionResponse> AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedAsync(string id, List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<AppStoreVersionResponse> localVarResponse = await AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedWithHttpInfoAsync(id, fieldsAppStoreVersionExperiments, fieldsAgeRatingDeclarations, fieldsAppStoreVersionSubmissions, fieldsAppStoreReviewDetails, fieldsAppStoreVersions, fieldsApps, fieldsRoutingAppCoverages, fieldsAppClipDefaultExperiences, fieldsAppStoreVersionPhasedReleases, fieldsBuilds, fieldsAppStoreVersionLocalizations, limitAppStoreVersionLocalizations, limitAppStoreVersionExperiments, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<AppStoreVersionResponse>> AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppClipDefaultExperiencesApi->AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperiments]", fieldsAppStoreVersionExperiments));
            }
            if (fieldsAgeRatingDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ageRatingDeclarations]", fieldsAgeRatingDeclarations));
            }
            if (fieldsAppStoreVersionSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionSubmissions]", fieldsAppStoreVersionSubmissions));
            }
            if (fieldsAppStoreReviewDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreReviewDetails]", fieldsAppStoreReviewDetails));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsRoutingAppCoverages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[routingAppCoverages]", fieldsRoutingAppCoverages));
            }
            if (fieldsAppClipDefaultExperiences != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipDefaultExperiences]", fieldsAppClipDefaultExperiences));
            }
            if (fieldsAppStoreVersionPhasedReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionPhasedReleases]", fieldsAppStoreVersionPhasedReleases));
            }
            if (fieldsBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[builds]", fieldsBuilds));
            }
            if (fieldsAppStoreVersionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionLocalizations]", fieldsAppStoreVersionLocalizations));
            }
            if (limitAppStoreVersionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionLocalizations]", limitAppStoreVersionLocalizations));
            }
            if (limitAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperiments]", limitAppStoreVersionExperiments));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppStoreVersionResponse>("/v1/appClipDefaultExperiences/{id}/releaseWithAppStoreVersion", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse</returns>
        public AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationship(string id)
        {
            AppStoreConnect.Client.ApiResponse<AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse> localVarResponse = AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse</returns>
        public AppStoreConnect.Client.ApiResponse<AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse> AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppClipDefaultExperiencesApi->AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationship");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse>("/v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse</returns>
        public async System.Threading.Tasks.Task<AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse> AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse> localVarResponse = await AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse>> AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppClipDefaultExperiencesApi->AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationship");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse>("/v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest">Related linkage</param>
        /// <returns></returns>
        public void AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationship(string id, AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest)
        {
            AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipWithHttpInfo(id, appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest">Related linkage</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Client.ApiResponse<Object> AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipWithHttpInfo(string id, AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppClipDefaultExperiencesApi->AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationship");

            // verify the required parameter 'appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest' is set
            if (appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest' when calling AppClipDefaultExperiencesApi->AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationship");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest">Related linkage</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipAsync(string id, AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipWithHttpInfoAsync(id, appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest">Related linkage</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<Object>> AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipWithHttpInfoAsync(string id, AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppClipDefaultExperiencesApi->AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationship");

            // verify the required parameter 'appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest' is set
            if (appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest' when calling AppClipDefaultExperiencesApi->AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationship");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appClipDefaultExperienceUpdateRequest">AppClipDefaultExperience representation</param>
        /// <returns>AppClipDefaultExperienceResponse</returns>
        public AppClipDefaultExperienceResponse AppClipDefaultExperiencesUpdateInstance(string id, AppClipDefaultExperienceUpdateRequest appClipDefaultExperienceUpdateRequest)
        {
            AppStoreConnect.Client.ApiResponse<AppClipDefaultExperienceResponse> localVarResponse = AppClipDefaultExperiencesUpdateInstanceWithHttpInfo(id, appClipDefaultExperienceUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appClipDefaultExperienceUpdateRequest">AppClipDefaultExperience representation</param>
        /// <returns>ApiResponse of AppClipDefaultExperienceResponse</returns>
        public AppStoreConnect.Client.ApiResponse<AppClipDefaultExperienceResponse> AppClipDefaultExperiencesUpdateInstanceWithHttpInfo(string id, AppClipDefaultExperienceUpdateRequest appClipDefaultExperienceUpdateRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppClipDefaultExperiencesApi->AppClipDefaultExperiencesUpdateInstance");

            // verify the required parameter 'appClipDefaultExperienceUpdateRequest' is set
            if (appClipDefaultExperienceUpdateRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'appClipDefaultExperienceUpdateRequest' when calling AppClipDefaultExperiencesApi->AppClipDefaultExperiencesUpdateInstance");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = appClipDefaultExperienceUpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<AppClipDefaultExperienceResponse>("/v1/appClipDefaultExperiences/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppClipDefaultExperiencesUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appClipDefaultExperienceUpdateRequest">AppClipDefaultExperience representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppClipDefaultExperienceResponse</returns>
        public async System.Threading.Tasks.Task<AppClipDefaultExperienceResponse> AppClipDefaultExperiencesUpdateInstanceAsync(string id, AppClipDefaultExperienceUpdateRequest appClipDefaultExperienceUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<AppClipDefaultExperienceResponse> localVarResponse = await AppClipDefaultExperiencesUpdateInstanceWithHttpInfoAsync(id, appClipDefaultExperienceUpdateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appClipDefaultExperienceUpdateRequest">AppClipDefaultExperience representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppClipDefaultExperienceResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<AppClipDefaultExperienceResponse>> AppClipDefaultExperiencesUpdateInstanceWithHttpInfoAsync(string id, AppClipDefaultExperienceUpdateRequest appClipDefaultExperienceUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppClipDefaultExperiencesApi->AppClipDefaultExperiencesUpdateInstance");

            // verify the required parameter 'appClipDefaultExperienceUpdateRequest' is set
            if (appClipDefaultExperienceUpdateRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'appClipDefaultExperienceUpdateRequest' when calling AppClipDefaultExperiencesApi->AppClipDefaultExperiencesUpdateInstance");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = appClipDefaultExperienceUpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<AppClipDefaultExperienceResponse>("/v1/appClipDefaultExperiences/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppClipDefaultExperiencesUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
