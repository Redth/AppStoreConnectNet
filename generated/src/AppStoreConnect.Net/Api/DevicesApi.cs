/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AppStoreConnect.Client;
using AppStoreConnect.Model;

namespace AppStoreConnect.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDevicesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceCreateRequest">Device representation</param>
        /// <returns>DeviceResponse</returns>
        DeviceResponse DevicesCreateInstance(DeviceCreateRequest deviceCreateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceCreateRequest">Device representation</param>
        /// <returns>ApiResponse of DeviceResponse</returns>
        ApiResponse<DeviceResponse> DevicesCreateInstanceWithHttpInfo(DeviceCreateRequest deviceCreateRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterStatus">filter by attribute &#39;status&#39; (optional)</param>
        /// <param name="filterUdid">filter by attribute &#39;udid&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsDevices">the fields to include for returned resources of type devices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>DevicesResponse</returns>
        DevicesResponse DevicesGetCollection(List<string>? filterName = default(List<string>?), List<string>? filterPlatform = default(List<string>?), List<string>? filterStatus = default(List<string>?), List<string>? filterUdid = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsDevices = default(List<string>?), int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterStatus">filter by attribute &#39;status&#39; (optional)</param>
        /// <param name="filterUdid">filter by attribute &#39;udid&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsDevices">the fields to include for returned resources of type devices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of DevicesResponse</returns>
        ApiResponse<DevicesResponse> DevicesGetCollectionWithHttpInfo(List<string>? filterName = default(List<string>?), List<string>? filterPlatform = default(List<string>?), List<string>? filterStatus = default(List<string>?), List<string>? filterUdid = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsDevices = default(List<string>?), int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsDevices">the fields to include for returned resources of type devices (optional)</param>
        /// <returns>DeviceResponse</returns>
        DeviceResponse DevicesGetInstance(string id, List<string>? fieldsDevices = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsDevices">the fields to include for returned resources of type devices (optional)</param>
        /// <returns>ApiResponse of DeviceResponse</returns>
        ApiResponse<DeviceResponse> DevicesGetInstanceWithHttpInfo(string id, List<string>? fieldsDevices = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="deviceUpdateRequest">Device representation</param>
        /// <returns>DeviceResponse</returns>
        DeviceResponse DevicesUpdateInstance(string id, DeviceUpdateRequest deviceUpdateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="deviceUpdateRequest">Device representation</param>
        /// <returns>ApiResponse of DeviceResponse</returns>
        ApiResponse<DeviceResponse> DevicesUpdateInstanceWithHttpInfo(string id, DeviceUpdateRequest deviceUpdateRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDevicesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceCreateRequest">Device representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeviceResponse</returns>
        System.Threading.Tasks.Task<DeviceResponse> DevicesCreateInstanceAsync(DeviceCreateRequest deviceCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceCreateRequest">Device representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeviceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceResponse>> DevicesCreateInstanceWithHttpInfoAsync(DeviceCreateRequest deviceCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterStatus">filter by attribute &#39;status&#39; (optional)</param>
        /// <param name="filterUdid">filter by attribute &#39;udid&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsDevices">the fields to include for returned resources of type devices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DevicesResponse</returns>
        System.Threading.Tasks.Task<DevicesResponse> DevicesGetCollectionAsync(List<string>? filterName = default(List<string>?), List<string>? filterPlatform = default(List<string>?), List<string>? filterStatus = default(List<string>?), List<string>? filterUdid = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsDevices = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterStatus">filter by attribute &#39;status&#39; (optional)</param>
        /// <param name="filterUdid">filter by attribute &#39;udid&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsDevices">the fields to include for returned resources of type devices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DevicesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DevicesResponse>> DevicesGetCollectionWithHttpInfoAsync(List<string>? filterName = default(List<string>?), List<string>? filterPlatform = default(List<string>?), List<string>? filterStatus = default(List<string>?), List<string>? filterUdid = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsDevices = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsDevices">the fields to include for returned resources of type devices (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeviceResponse</returns>
        System.Threading.Tasks.Task<DeviceResponse> DevicesGetInstanceAsync(string id, List<string>? fieldsDevices = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsDevices">the fields to include for returned resources of type devices (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeviceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceResponse>> DevicesGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsDevices = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="deviceUpdateRequest">Device representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeviceResponse</returns>
        System.Threading.Tasks.Task<DeviceResponse> DevicesUpdateInstanceAsync(string id, DeviceUpdateRequest deviceUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="deviceUpdateRequest">Device representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeviceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceResponse>> DevicesUpdateInstanceWithHttpInfoAsync(string id, DeviceUpdateRequest deviceUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDevicesApi : IDevicesApiSync, IDevicesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DevicesApi : IDisposable, IDevicesApi
    {
        private AppStoreConnect.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public DevicesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public DevicesApi(string basePath)
        {
            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public DevicesApi(AppStoreConnect.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public DevicesApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public DevicesApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public DevicesApi(HttpClient client, AppStoreConnect.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public DevicesApi(AppStoreConnect.Client.ISynchronousClient client, AppStoreConnect.Client.IAsynchronousClient asyncClient, AppStoreConnect.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AppStoreConnect.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AppStoreConnect.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AppStoreConnect.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AppStoreConnect.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AppStoreConnect.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceCreateRequest">Device representation</param>
        /// <returns>DeviceResponse</returns>
        public DeviceResponse DevicesCreateInstance(DeviceCreateRequest deviceCreateRequest)
        {
            AppStoreConnect.Client.ApiResponse<DeviceResponse> localVarResponse = DevicesCreateInstanceWithHttpInfo(deviceCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceCreateRequest">Device representation</param>
        /// <returns>ApiResponse of DeviceResponse</returns>
        public AppStoreConnect.Client.ApiResponse<DeviceResponse> DevicesCreateInstanceWithHttpInfo(DeviceCreateRequest deviceCreateRequest)
        {
            // verify the required parameter 'deviceCreateRequest' is set
            if (deviceCreateRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'deviceCreateRequest' when calling DevicesApi->DevicesCreateInstance");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = deviceCreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DeviceResponse>("/v1/devices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DevicesCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceCreateRequest">Device representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeviceResponse</returns>
        public async System.Threading.Tasks.Task<DeviceResponse> DevicesCreateInstanceAsync(DeviceCreateRequest deviceCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<DeviceResponse> localVarResponse = await DevicesCreateInstanceWithHttpInfoAsync(deviceCreateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceCreateRequest">Device representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeviceResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<DeviceResponse>> DevicesCreateInstanceWithHttpInfoAsync(DeviceCreateRequest deviceCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'deviceCreateRequest' is set
            if (deviceCreateRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'deviceCreateRequest' when calling DevicesApi->DevicesCreateInstance");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = deviceCreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DeviceResponse>("/v1/devices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DevicesCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterStatus">filter by attribute &#39;status&#39; (optional)</param>
        /// <param name="filterUdid">filter by attribute &#39;udid&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsDevices">the fields to include for returned resources of type devices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>DevicesResponse</returns>
        public DevicesResponse DevicesGetCollection(List<string>? filterName = default(List<string>?), List<string>? filterPlatform = default(List<string>?), List<string>? filterStatus = default(List<string>?), List<string>? filterUdid = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsDevices = default(List<string>?), int? limit = default(int?))
        {
            AppStoreConnect.Client.ApiResponse<DevicesResponse> localVarResponse = DevicesGetCollectionWithHttpInfo(filterName, filterPlatform, filterStatus, filterUdid, filterId, sort, fieldsDevices, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterStatus">filter by attribute &#39;status&#39; (optional)</param>
        /// <param name="filterUdid">filter by attribute &#39;udid&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsDevices">the fields to include for returned resources of type devices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of DevicesResponse</returns>
        public AppStoreConnect.Client.ApiResponse<DevicesResponse> DevicesGetCollectionWithHttpInfo(List<string>? filterName = default(List<string>?), List<string>? filterPlatform = default(List<string>?), List<string>? filterStatus = default(List<string>?), List<string>? filterUdid = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsDevices = default(List<string>?), int? limit = default(int?))
        {
            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (filterName != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[name]", filterName));
            }
            if (filterPlatform != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[platform]", filterPlatform));
            }
            if (filterStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[status]", filterStatus));
            }
            if (filterUdid != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[udid]", filterUdid));
            }
            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[id]", filterId));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (fieldsDevices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[devices]", fieldsDevices));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DevicesResponse>("/v1/devices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DevicesGetCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterStatus">filter by attribute &#39;status&#39; (optional)</param>
        /// <param name="filterUdid">filter by attribute &#39;udid&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsDevices">the fields to include for returned resources of type devices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DevicesResponse</returns>
        public async System.Threading.Tasks.Task<DevicesResponse> DevicesGetCollectionAsync(List<string>? filterName = default(List<string>?), List<string>? filterPlatform = default(List<string>?), List<string>? filterStatus = default(List<string>?), List<string>? filterUdid = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsDevices = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<DevicesResponse> localVarResponse = await DevicesGetCollectionWithHttpInfoAsync(filterName, filterPlatform, filterStatus, filterUdid, filterId, sort, fieldsDevices, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterStatus">filter by attribute &#39;status&#39; (optional)</param>
        /// <param name="filterUdid">filter by attribute &#39;udid&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsDevices">the fields to include for returned resources of type devices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DevicesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<DevicesResponse>> DevicesGetCollectionWithHttpInfoAsync(List<string>? filterName = default(List<string>?), List<string>? filterPlatform = default(List<string>?), List<string>? filterStatus = default(List<string>?), List<string>? filterUdid = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsDevices = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (filterName != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[name]", filterName));
            }
            if (filterPlatform != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[platform]", filterPlatform));
            }
            if (filterStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[status]", filterStatus));
            }
            if (filterUdid != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[udid]", filterUdid));
            }
            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[id]", filterId));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (fieldsDevices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[devices]", fieldsDevices));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DevicesResponse>("/v1/devices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DevicesGetCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsDevices">the fields to include for returned resources of type devices (optional)</param>
        /// <returns>DeviceResponse</returns>
        public DeviceResponse DevicesGetInstance(string id, List<string>? fieldsDevices = default(List<string>?))
        {
            AppStoreConnect.Client.ApiResponse<DeviceResponse> localVarResponse = DevicesGetInstanceWithHttpInfo(id, fieldsDevices);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsDevices">the fields to include for returned resources of type devices (optional)</param>
        /// <returns>ApiResponse of DeviceResponse</returns>
        public AppStoreConnect.Client.ApiResponse<DeviceResponse> DevicesGetInstanceWithHttpInfo(string id, List<string>? fieldsDevices = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling DevicesApi->DevicesGetInstance");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsDevices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[devices]", fieldsDevices));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DeviceResponse>("/v1/devices/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DevicesGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsDevices">the fields to include for returned resources of type devices (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeviceResponse</returns>
        public async System.Threading.Tasks.Task<DeviceResponse> DevicesGetInstanceAsync(string id, List<string>? fieldsDevices = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<DeviceResponse> localVarResponse = await DevicesGetInstanceWithHttpInfoAsync(id, fieldsDevices, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsDevices">the fields to include for returned resources of type devices (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeviceResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<DeviceResponse>> DevicesGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsDevices = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling DevicesApi->DevicesGetInstance");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsDevices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[devices]", fieldsDevices));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DeviceResponse>("/v1/devices/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DevicesGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="deviceUpdateRequest">Device representation</param>
        /// <returns>DeviceResponse</returns>
        public DeviceResponse DevicesUpdateInstance(string id, DeviceUpdateRequest deviceUpdateRequest)
        {
            AppStoreConnect.Client.ApiResponse<DeviceResponse> localVarResponse = DevicesUpdateInstanceWithHttpInfo(id, deviceUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="deviceUpdateRequest">Device representation</param>
        /// <returns>ApiResponse of DeviceResponse</returns>
        public AppStoreConnect.Client.ApiResponse<DeviceResponse> DevicesUpdateInstanceWithHttpInfo(string id, DeviceUpdateRequest deviceUpdateRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling DevicesApi->DevicesUpdateInstance");

            // verify the required parameter 'deviceUpdateRequest' is set
            if (deviceUpdateRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'deviceUpdateRequest' when calling DevicesApi->DevicesUpdateInstance");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = deviceUpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<DeviceResponse>("/v1/devices/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DevicesUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="deviceUpdateRequest">Device representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeviceResponse</returns>
        public async System.Threading.Tasks.Task<DeviceResponse> DevicesUpdateInstanceAsync(string id, DeviceUpdateRequest deviceUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<DeviceResponse> localVarResponse = await DevicesUpdateInstanceWithHttpInfoAsync(id, deviceUpdateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="deviceUpdateRequest">Device representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeviceResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<DeviceResponse>> DevicesUpdateInstanceWithHttpInfoAsync(string id, DeviceUpdateRequest deviceUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling DevicesApi->DevicesUpdateInstance");

            // verify the required parameter 'deviceUpdateRequest' is set
            if (deviceUpdateRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'deviceUpdateRequest' when calling DevicesApi->DevicesUpdateInstance");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = deviceUpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<DeviceResponse>("/v1/devices/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DevicesUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
