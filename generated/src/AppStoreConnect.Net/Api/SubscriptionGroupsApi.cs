/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AppStoreConnect.Client;
using AppStoreConnect.Model;

namespace AppStoreConnect.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionGroupsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionGroupCreateRequest">SubscriptionGroup representation</param>
        /// <returns>SubscriptionGroupResponse</returns>
        SubscriptionGroupResponse SubscriptionGroupsCreateInstance(SubscriptionGroupCreateRequest subscriptionGroupCreateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionGroupCreateRequest">SubscriptionGroup representation</param>
        /// <returns>ApiResponse of SubscriptionGroupResponse</returns>
        ApiResponse<SubscriptionGroupResponse> SubscriptionGroupsCreateInstanceWithHttpInfo(SubscriptionGroupCreateRequest subscriptionGroupCreateRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns></returns>
        void SubscriptionGroupsDeleteInstance(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SubscriptionGroupsDeleteInstanceWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionGroupLocalizations">the fields to include for returned resources of type subscriptionGroupLocalizations (optional)</param>
        /// <param name="limitSubscriptionGroupLocalizations">maximum number of related subscriptionGroupLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptions">maximum number of related subscriptions returned (when they are included) (optional)</param>
        /// <returns>SubscriptionGroupResponse</returns>
        SubscriptionGroupResponse SubscriptionGroupsGetInstance(string id, List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionGroupLocalizations = default(List<string>?), int? limitSubscriptionGroupLocalizations = default(int?), int? limitSubscriptions = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionGroupLocalizations">the fields to include for returned resources of type subscriptionGroupLocalizations (optional)</param>
        /// <param name="limitSubscriptionGroupLocalizations">maximum number of related subscriptionGroupLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptions">maximum number of related subscriptions returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of SubscriptionGroupResponse</returns>
        ApiResponse<SubscriptionGroupResponse> SubscriptionGroupsGetInstanceWithHttpInfo(string id, List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionGroupLocalizations = default(List<string>?), int? limitSubscriptionGroupLocalizations = default(int?), int? limitSubscriptions = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsSubscriptionGroupLocalizations">the fields to include for returned resources of type subscriptionGroupLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>SubscriptionGroupLocalizationsResponse</returns>
        SubscriptionGroupLocalizationsResponse SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelated(string id, List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsSubscriptionGroupLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsSubscriptionGroupLocalizations">the fields to include for returned resources of type subscriptionGroupLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of SubscriptionGroupLocalizationsResponse</returns>
        ApiResponse<SubscriptionGroupLocalizationsResponse> SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsSubscriptionGroupLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterProductId">filter by attribute &#39;productId&#39; (optional)</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOffers">the fields to include for returned resources of type subscriptionPromotionalOffers (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionAppStoreReviewScreenshots">the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsSubscriptionIntroductoryOffers">the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)</param>
        /// <param name="fieldsSubscriptionPrices">the fields to include for returned resources of type subscriptionPrices (optional)</param>
        /// <param name="fieldsSubscriptionLocalizations">the fields to include for returned resources of type subscriptionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitSubscriptionLocalizations">maximum number of related subscriptionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitIntroductoryOffers">maximum number of related introductoryOffers returned (when they are included) (optional)</param>
        /// <param name="limitPromotionalOffers">maximum number of related promotionalOffers returned (when they are included) (optional)</param>
        /// <param name="limitOfferCodes">maximum number of related offerCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>SubscriptionsResponse</returns>
        SubscriptionsResponse SubscriptionGroupsSubscriptionsGetToManyRelated(string id, List<string>? filterName = default(List<string>?), List<string>? filterProductId = default(List<string>?), List<string>? filterState = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOffers = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsSubscriptionIntroductoryOffers = default(List<string>?), List<string>? fieldsSubscriptionPrices = default(List<string>?), List<string>? fieldsSubscriptionLocalizations = default(List<string>?), int? limit = default(int?), int? limitSubscriptionLocalizations = default(int?), int? limitIntroductoryOffers = default(int?), int? limitPromotionalOffers = default(int?), int? limitOfferCodes = default(int?), int? limitPrices = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterProductId">filter by attribute &#39;productId&#39; (optional)</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOffers">the fields to include for returned resources of type subscriptionPromotionalOffers (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionAppStoreReviewScreenshots">the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsSubscriptionIntroductoryOffers">the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)</param>
        /// <param name="fieldsSubscriptionPrices">the fields to include for returned resources of type subscriptionPrices (optional)</param>
        /// <param name="fieldsSubscriptionLocalizations">the fields to include for returned resources of type subscriptionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitSubscriptionLocalizations">maximum number of related subscriptionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitIntroductoryOffers">maximum number of related introductoryOffers returned (when they are included) (optional)</param>
        /// <param name="limitPromotionalOffers">maximum number of related promotionalOffers returned (when they are included) (optional)</param>
        /// <param name="limitOfferCodes">maximum number of related offerCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of SubscriptionsResponse</returns>
        ApiResponse<SubscriptionsResponse> SubscriptionGroupsSubscriptionsGetToManyRelatedWithHttpInfo(string id, List<string>? filterName = default(List<string>?), List<string>? filterProductId = default(List<string>?), List<string>? filterState = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOffers = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsSubscriptionIntroductoryOffers = default(List<string>?), List<string>? fieldsSubscriptionPrices = default(List<string>?), List<string>? fieldsSubscriptionLocalizations = default(List<string>?), int? limit = default(int?), int? limitSubscriptionLocalizations = default(int?), int? limitIntroductoryOffers = default(int?), int? limitPromotionalOffers = default(int?), int? limitOfferCodes = default(int?), int? limitPrices = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionGroupUpdateRequest">SubscriptionGroup representation</param>
        /// <returns>SubscriptionGroupResponse</returns>
        SubscriptionGroupResponse SubscriptionGroupsUpdateInstance(string id, SubscriptionGroupUpdateRequest subscriptionGroupUpdateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionGroupUpdateRequest">SubscriptionGroup representation</param>
        /// <returns>ApiResponse of SubscriptionGroupResponse</returns>
        ApiResponse<SubscriptionGroupResponse> SubscriptionGroupsUpdateInstanceWithHttpInfo(string id, SubscriptionGroupUpdateRequest subscriptionGroupUpdateRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionGroupsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionGroupCreateRequest">SubscriptionGroup representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionGroupResponse</returns>
        System.Threading.Tasks.Task<SubscriptionGroupResponse> SubscriptionGroupsCreateInstanceAsync(SubscriptionGroupCreateRequest subscriptionGroupCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionGroupCreateRequest">SubscriptionGroup representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionGroupResponse>> SubscriptionGroupsCreateInstanceWithHttpInfoAsync(SubscriptionGroupCreateRequest subscriptionGroupCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SubscriptionGroupsDeleteInstanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubscriptionGroupsDeleteInstanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionGroupLocalizations">the fields to include for returned resources of type subscriptionGroupLocalizations (optional)</param>
        /// <param name="limitSubscriptionGroupLocalizations">maximum number of related subscriptionGroupLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptions">maximum number of related subscriptions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionGroupResponse</returns>
        System.Threading.Tasks.Task<SubscriptionGroupResponse> SubscriptionGroupsGetInstanceAsync(string id, List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionGroupLocalizations = default(List<string>?), int? limitSubscriptionGroupLocalizations = default(int?), int? limitSubscriptions = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionGroupLocalizations">the fields to include for returned resources of type subscriptionGroupLocalizations (optional)</param>
        /// <param name="limitSubscriptionGroupLocalizations">maximum number of related subscriptionGroupLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptions">maximum number of related subscriptions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionGroupResponse>> SubscriptionGroupsGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionGroupLocalizations = default(List<string>?), int? limitSubscriptionGroupLocalizations = default(int?), int? limitSubscriptions = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsSubscriptionGroupLocalizations">the fields to include for returned resources of type subscriptionGroupLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionGroupLocalizationsResponse</returns>
        System.Threading.Tasks.Task<SubscriptionGroupLocalizationsResponse> SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedAsync(string id, List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsSubscriptionGroupLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsSubscriptionGroupLocalizations">the fields to include for returned resources of type subscriptionGroupLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionGroupLocalizationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionGroupLocalizationsResponse>> SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsSubscriptionGroupLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterProductId">filter by attribute &#39;productId&#39; (optional)</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOffers">the fields to include for returned resources of type subscriptionPromotionalOffers (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionAppStoreReviewScreenshots">the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsSubscriptionIntroductoryOffers">the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)</param>
        /// <param name="fieldsSubscriptionPrices">the fields to include for returned resources of type subscriptionPrices (optional)</param>
        /// <param name="fieldsSubscriptionLocalizations">the fields to include for returned resources of type subscriptionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitSubscriptionLocalizations">maximum number of related subscriptionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitIntroductoryOffers">maximum number of related introductoryOffers returned (when they are included) (optional)</param>
        /// <param name="limitPromotionalOffers">maximum number of related promotionalOffers returned (when they are included) (optional)</param>
        /// <param name="limitOfferCodes">maximum number of related offerCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionsResponse</returns>
        System.Threading.Tasks.Task<SubscriptionsResponse> SubscriptionGroupsSubscriptionsGetToManyRelatedAsync(string id, List<string>? filterName = default(List<string>?), List<string>? filterProductId = default(List<string>?), List<string>? filterState = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOffers = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsSubscriptionIntroductoryOffers = default(List<string>?), List<string>? fieldsSubscriptionPrices = default(List<string>?), List<string>? fieldsSubscriptionLocalizations = default(List<string>?), int? limit = default(int?), int? limitSubscriptionLocalizations = default(int?), int? limitIntroductoryOffers = default(int?), int? limitPromotionalOffers = default(int?), int? limitOfferCodes = default(int?), int? limitPrices = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterProductId">filter by attribute &#39;productId&#39; (optional)</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOffers">the fields to include for returned resources of type subscriptionPromotionalOffers (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionAppStoreReviewScreenshots">the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsSubscriptionIntroductoryOffers">the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)</param>
        /// <param name="fieldsSubscriptionPrices">the fields to include for returned resources of type subscriptionPrices (optional)</param>
        /// <param name="fieldsSubscriptionLocalizations">the fields to include for returned resources of type subscriptionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitSubscriptionLocalizations">maximum number of related subscriptionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitIntroductoryOffers">maximum number of related introductoryOffers returned (when they are included) (optional)</param>
        /// <param name="limitPromotionalOffers">maximum number of related promotionalOffers returned (when they are included) (optional)</param>
        /// <param name="limitOfferCodes">maximum number of related offerCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionsResponse>> SubscriptionGroupsSubscriptionsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterName = default(List<string>?), List<string>? filterProductId = default(List<string>?), List<string>? filterState = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOffers = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsSubscriptionIntroductoryOffers = default(List<string>?), List<string>? fieldsSubscriptionPrices = default(List<string>?), List<string>? fieldsSubscriptionLocalizations = default(List<string>?), int? limit = default(int?), int? limitSubscriptionLocalizations = default(int?), int? limitIntroductoryOffers = default(int?), int? limitPromotionalOffers = default(int?), int? limitOfferCodes = default(int?), int? limitPrices = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionGroupUpdateRequest">SubscriptionGroup representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionGroupResponse</returns>
        System.Threading.Tasks.Task<SubscriptionGroupResponse> SubscriptionGroupsUpdateInstanceAsync(string id, SubscriptionGroupUpdateRequest subscriptionGroupUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionGroupUpdateRequest">SubscriptionGroup representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionGroupResponse>> SubscriptionGroupsUpdateInstanceWithHttpInfoAsync(string id, SubscriptionGroupUpdateRequest subscriptionGroupUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionGroupsApi : ISubscriptionGroupsApiSync, ISubscriptionGroupsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubscriptionGroupsApi : IDisposable, ISubscriptionGroupsApi
    {
        private AppStoreConnect.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionGroupsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public SubscriptionGroupsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionGroupsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public SubscriptionGroupsApi(string basePath)
        {
            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionGroupsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public SubscriptionGroupsApi(AppStoreConnect.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionGroupsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SubscriptionGroupsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionGroupsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SubscriptionGroupsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionGroupsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SubscriptionGroupsApi(HttpClient client, AppStoreConnect.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionGroupsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public SubscriptionGroupsApi(AppStoreConnect.Client.ISynchronousClient client, AppStoreConnect.Client.IAsynchronousClient asyncClient, AppStoreConnect.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AppStoreConnect.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AppStoreConnect.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AppStoreConnect.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AppStoreConnect.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AppStoreConnect.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionGroupCreateRequest">SubscriptionGroup representation</param>
        /// <returns>SubscriptionGroupResponse</returns>
        public SubscriptionGroupResponse SubscriptionGroupsCreateInstance(SubscriptionGroupCreateRequest subscriptionGroupCreateRequest)
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionGroupResponse> localVarResponse = SubscriptionGroupsCreateInstanceWithHttpInfo(subscriptionGroupCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionGroupCreateRequest">SubscriptionGroup representation</param>
        /// <returns>ApiResponse of SubscriptionGroupResponse</returns>
        public AppStoreConnect.Client.ApiResponse<SubscriptionGroupResponse> SubscriptionGroupsCreateInstanceWithHttpInfo(SubscriptionGroupCreateRequest subscriptionGroupCreateRequest)
        {
            // verify the required parameter 'subscriptionGroupCreateRequest' is set
            if (subscriptionGroupCreateRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'subscriptionGroupCreateRequest' when calling SubscriptionGroupsApi->SubscriptionGroupsCreateInstance");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = subscriptionGroupCreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SubscriptionGroupResponse>("/v1/subscriptionGroups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionGroupsCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionGroupCreateRequest">SubscriptionGroup representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionGroupResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionGroupResponse> SubscriptionGroupsCreateInstanceAsync(SubscriptionGroupCreateRequest subscriptionGroupCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionGroupResponse> localVarResponse = await SubscriptionGroupsCreateInstanceWithHttpInfoAsync(subscriptionGroupCreateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionGroupCreateRequest">SubscriptionGroup representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionGroupResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<SubscriptionGroupResponse>> SubscriptionGroupsCreateInstanceWithHttpInfoAsync(SubscriptionGroupCreateRequest subscriptionGroupCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionGroupCreateRequest' is set
            if (subscriptionGroupCreateRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'subscriptionGroupCreateRequest' when calling SubscriptionGroupsApi->SubscriptionGroupsCreateInstance");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = subscriptionGroupCreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SubscriptionGroupResponse>("/v1/subscriptionGroups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionGroupsCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns></returns>
        public void SubscriptionGroupsDeleteInstance(string id)
        {
            SubscriptionGroupsDeleteInstanceWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Client.ApiResponse<Object> SubscriptionGroupsDeleteInstanceWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionGroupsApi->SubscriptionGroupsDeleteInstance");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/subscriptionGroups/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionGroupsDeleteInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SubscriptionGroupsDeleteInstanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SubscriptionGroupsDeleteInstanceWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<Object>> SubscriptionGroupsDeleteInstanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionGroupsApi->SubscriptionGroupsDeleteInstance");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/subscriptionGroups/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionGroupsDeleteInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionGroupLocalizations">the fields to include for returned resources of type subscriptionGroupLocalizations (optional)</param>
        /// <param name="limitSubscriptionGroupLocalizations">maximum number of related subscriptionGroupLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptions">maximum number of related subscriptions returned (when they are included) (optional)</param>
        /// <returns>SubscriptionGroupResponse</returns>
        public SubscriptionGroupResponse SubscriptionGroupsGetInstance(string id, List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionGroupLocalizations = default(List<string>?), int? limitSubscriptionGroupLocalizations = default(int?), int? limitSubscriptions = default(int?))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionGroupResponse> localVarResponse = SubscriptionGroupsGetInstanceWithHttpInfo(id, fieldsSubscriptionGroups, include, fieldsSubscriptions, fieldsSubscriptionGroupLocalizations, limitSubscriptionGroupLocalizations, limitSubscriptions);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionGroupLocalizations">the fields to include for returned resources of type subscriptionGroupLocalizations (optional)</param>
        /// <param name="limitSubscriptionGroupLocalizations">maximum number of related subscriptionGroupLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptions">maximum number of related subscriptions returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of SubscriptionGroupResponse</returns>
        public AppStoreConnect.Client.ApiResponse<SubscriptionGroupResponse> SubscriptionGroupsGetInstanceWithHttpInfo(string id, List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionGroupLocalizations = default(List<string>?), int? limitSubscriptionGroupLocalizations = default(int?), int? limitSubscriptions = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionGroupsApi->SubscriptionGroupsGetInstance");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsSubscriptionGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionGroups]", fieldsSubscriptionGroups));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (fieldsSubscriptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptions]", fieldsSubscriptions));
            }
            if (fieldsSubscriptionGroupLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionGroupLocalizations]", fieldsSubscriptionGroupLocalizations));
            }
            if (limitSubscriptionGroupLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[subscriptionGroupLocalizations]", limitSubscriptionGroupLocalizations));
            }
            if (limitSubscriptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[subscriptions]", limitSubscriptions));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionGroupResponse>("/v1/subscriptionGroups/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionGroupsGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionGroupLocalizations">the fields to include for returned resources of type subscriptionGroupLocalizations (optional)</param>
        /// <param name="limitSubscriptionGroupLocalizations">maximum number of related subscriptionGroupLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptions">maximum number of related subscriptions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionGroupResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionGroupResponse> SubscriptionGroupsGetInstanceAsync(string id, List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionGroupLocalizations = default(List<string>?), int? limitSubscriptionGroupLocalizations = default(int?), int? limitSubscriptions = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionGroupResponse> localVarResponse = await SubscriptionGroupsGetInstanceWithHttpInfoAsync(id, fieldsSubscriptionGroups, include, fieldsSubscriptions, fieldsSubscriptionGroupLocalizations, limitSubscriptionGroupLocalizations, limitSubscriptions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionGroupLocalizations">the fields to include for returned resources of type subscriptionGroupLocalizations (optional)</param>
        /// <param name="limitSubscriptionGroupLocalizations">maximum number of related subscriptionGroupLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptions">maximum number of related subscriptions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionGroupResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<SubscriptionGroupResponse>> SubscriptionGroupsGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionGroupLocalizations = default(List<string>?), int? limitSubscriptionGroupLocalizations = default(int?), int? limitSubscriptions = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionGroupsApi->SubscriptionGroupsGetInstance");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsSubscriptionGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionGroups]", fieldsSubscriptionGroups));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (fieldsSubscriptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptions]", fieldsSubscriptions));
            }
            if (fieldsSubscriptionGroupLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionGroupLocalizations]", fieldsSubscriptionGroupLocalizations));
            }
            if (limitSubscriptionGroupLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[subscriptionGroupLocalizations]", limitSubscriptionGroupLocalizations));
            }
            if (limitSubscriptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[subscriptions]", limitSubscriptions));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SubscriptionGroupResponse>("/v1/subscriptionGroups/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionGroupsGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsSubscriptionGroupLocalizations">the fields to include for returned resources of type subscriptionGroupLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>SubscriptionGroupLocalizationsResponse</returns>
        public SubscriptionGroupLocalizationsResponse SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelated(string id, List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsSubscriptionGroupLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionGroupLocalizationsResponse> localVarResponse = SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedWithHttpInfo(id, fieldsSubscriptionGroups, fieldsSubscriptionGroupLocalizations, limit, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsSubscriptionGroupLocalizations">the fields to include for returned resources of type subscriptionGroupLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of SubscriptionGroupLocalizationsResponse</returns>
        public AppStoreConnect.Client.ApiResponse<SubscriptionGroupLocalizationsResponse> SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsSubscriptionGroupLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionGroupsApi->SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelated");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsSubscriptionGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionGroups]", fieldsSubscriptionGroups));
            }
            if (fieldsSubscriptionGroupLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionGroupLocalizations]", fieldsSubscriptionGroupLocalizations));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionGroupLocalizationsResponse>("/v1/subscriptionGroups/{id}/subscriptionGroupLocalizations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsSubscriptionGroupLocalizations">the fields to include for returned resources of type subscriptionGroupLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionGroupLocalizationsResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionGroupLocalizationsResponse> SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedAsync(string id, List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsSubscriptionGroupLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionGroupLocalizationsResponse> localVarResponse = await SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedWithHttpInfoAsync(id, fieldsSubscriptionGroups, fieldsSubscriptionGroupLocalizations, limit, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsSubscriptionGroupLocalizations">the fields to include for returned resources of type subscriptionGroupLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionGroupLocalizationsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<SubscriptionGroupLocalizationsResponse>> SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsSubscriptionGroupLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionGroupsApi->SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelated");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsSubscriptionGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionGroups]", fieldsSubscriptionGroups));
            }
            if (fieldsSubscriptionGroupLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionGroupLocalizations]", fieldsSubscriptionGroupLocalizations));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SubscriptionGroupLocalizationsResponse>("/v1/subscriptionGroups/{id}/subscriptionGroupLocalizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterProductId">filter by attribute &#39;productId&#39; (optional)</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOffers">the fields to include for returned resources of type subscriptionPromotionalOffers (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionAppStoreReviewScreenshots">the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsSubscriptionIntroductoryOffers">the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)</param>
        /// <param name="fieldsSubscriptionPrices">the fields to include for returned resources of type subscriptionPrices (optional)</param>
        /// <param name="fieldsSubscriptionLocalizations">the fields to include for returned resources of type subscriptionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitSubscriptionLocalizations">maximum number of related subscriptionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitIntroductoryOffers">maximum number of related introductoryOffers returned (when they are included) (optional)</param>
        /// <param name="limitPromotionalOffers">maximum number of related promotionalOffers returned (when they are included) (optional)</param>
        /// <param name="limitOfferCodes">maximum number of related offerCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>SubscriptionsResponse</returns>
        public SubscriptionsResponse SubscriptionGroupsSubscriptionsGetToManyRelated(string id, List<string>? filterName = default(List<string>?), List<string>? filterProductId = default(List<string>?), List<string>? filterState = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOffers = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsSubscriptionIntroductoryOffers = default(List<string>?), List<string>? fieldsSubscriptionPrices = default(List<string>?), List<string>? fieldsSubscriptionLocalizations = default(List<string>?), int? limit = default(int?), int? limitSubscriptionLocalizations = default(int?), int? limitIntroductoryOffers = default(int?), int? limitPromotionalOffers = default(int?), int? limitOfferCodes = default(int?), int? limitPrices = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionsResponse> localVarResponse = SubscriptionGroupsSubscriptionsGetToManyRelatedWithHttpInfo(id, filterName, filterProductId, filterState, sort, fieldsPromotedPurchases, fieldsSubscriptionPromotionalOffers, fieldsSubscriptionOfferCodes, fieldsSubscriptionAppStoreReviewScreenshots, fieldsSubscriptions, fieldsSubscriptionGroups, fieldsSubscriptionIntroductoryOffers, fieldsSubscriptionPrices, fieldsSubscriptionLocalizations, limit, limitSubscriptionLocalizations, limitIntroductoryOffers, limitPromotionalOffers, limitOfferCodes, limitPrices, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterProductId">filter by attribute &#39;productId&#39; (optional)</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOffers">the fields to include for returned resources of type subscriptionPromotionalOffers (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionAppStoreReviewScreenshots">the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsSubscriptionIntroductoryOffers">the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)</param>
        /// <param name="fieldsSubscriptionPrices">the fields to include for returned resources of type subscriptionPrices (optional)</param>
        /// <param name="fieldsSubscriptionLocalizations">the fields to include for returned resources of type subscriptionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitSubscriptionLocalizations">maximum number of related subscriptionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitIntroductoryOffers">maximum number of related introductoryOffers returned (when they are included) (optional)</param>
        /// <param name="limitPromotionalOffers">maximum number of related promotionalOffers returned (when they are included) (optional)</param>
        /// <param name="limitOfferCodes">maximum number of related offerCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of SubscriptionsResponse</returns>
        public AppStoreConnect.Client.ApiResponse<SubscriptionsResponse> SubscriptionGroupsSubscriptionsGetToManyRelatedWithHttpInfo(string id, List<string>? filterName = default(List<string>?), List<string>? filterProductId = default(List<string>?), List<string>? filterState = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOffers = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsSubscriptionIntroductoryOffers = default(List<string>?), List<string>? fieldsSubscriptionPrices = default(List<string>?), List<string>? fieldsSubscriptionLocalizations = default(List<string>?), int? limit = default(int?), int? limitSubscriptionLocalizations = default(int?), int? limitIntroductoryOffers = default(int?), int? limitPromotionalOffers = default(int?), int? limitOfferCodes = default(int?), int? limitPrices = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionGroupsApi->SubscriptionGroupsSubscriptionsGetToManyRelated");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterName != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[name]", filterName));
            }
            if (filterProductId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[productId]", filterProductId));
            }
            if (filterState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[state]", filterState));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (fieldsPromotedPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[promotedPurchases]", fieldsPromotedPurchases));
            }
            if (fieldsSubscriptionPromotionalOffers != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionPromotionalOffers]", fieldsSubscriptionPromotionalOffers));
            }
            if (fieldsSubscriptionOfferCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionOfferCodes]", fieldsSubscriptionOfferCodes));
            }
            if (fieldsSubscriptionAppStoreReviewScreenshots != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionAppStoreReviewScreenshots]", fieldsSubscriptionAppStoreReviewScreenshots));
            }
            if (fieldsSubscriptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptions]", fieldsSubscriptions));
            }
            if (fieldsSubscriptionGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionGroups]", fieldsSubscriptionGroups));
            }
            if (fieldsSubscriptionIntroductoryOffers != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionIntroductoryOffers]", fieldsSubscriptionIntroductoryOffers));
            }
            if (fieldsSubscriptionPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionPrices]", fieldsSubscriptionPrices));
            }
            if (fieldsSubscriptionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionLocalizations]", fieldsSubscriptionLocalizations));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (limitSubscriptionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[subscriptionLocalizations]", limitSubscriptionLocalizations));
            }
            if (limitIntroductoryOffers != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[introductoryOffers]", limitIntroductoryOffers));
            }
            if (limitPromotionalOffers != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[promotionalOffers]", limitPromotionalOffers));
            }
            if (limitOfferCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[offerCodes]", limitOfferCodes));
            }
            if (limitPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[prices]", limitPrices));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionsResponse>("/v1/subscriptionGroups/{id}/subscriptions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionGroupsSubscriptionsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterProductId">filter by attribute &#39;productId&#39; (optional)</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOffers">the fields to include for returned resources of type subscriptionPromotionalOffers (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionAppStoreReviewScreenshots">the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsSubscriptionIntroductoryOffers">the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)</param>
        /// <param name="fieldsSubscriptionPrices">the fields to include for returned resources of type subscriptionPrices (optional)</param>
        /// <param name="fieldsSubscriptionLocalizations">the fields to include for returned resources of type subscriptionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitSubscriptionLocalizations">maximum number of related subscriptionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitIntroductoryOffers">maximum number of related introductoryOffers returned (when they are included) (optional)</param>
        /// <param name="limitPromotionalOffers">maximum number of related promotionalOffers returned (when they are included) (optional)</param>
        /// <param name="limitOfferCodes">maximum number of related offerCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionsResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionsResponse> SubscriptionGroupsSubscriptionsGetToManyRelatedAsync(string id, List<string>? filterName = default(List<string>?), List<string>? filterProductId = default(List<string>?), List<string>? filterState = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOffers = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsSubscriptionIntroductoryOffers = default(List<string>?), List<string>? fieldsSubscriptionPrices = default(List<string>?), List<string>? fieldsSubscriptionLocalizations = default(List<string>?), int? limit = default(int?), int? limitSubscriptionLocalizations = default(int?), int? limitIntroductoryOffers = default(int?), int? limitPromotionalOffers = default(int?), int? limitOfferCodes = default(int?), int? limitPrices = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionsResponse> localVarResponse = await SubscriptionGroupsSubscriptionsGetToManyRelatedWithHttpInfoAsync(id, filterName, filterProductId, filterState, sort, fieldsPromotedPurchases, fieldsSubscriptionPromotionalOffers, fieldsSubscriptionOfferCodes, fieldsSubscriptionAppStoreReviewScreenshots, fieldsSubscriptions, fieldsSubscriptionGroups, fieldsSubscriptionIntroductoryOffers, fieldsSubscriptionPrices, fieldsSubscriptionLocalizations, limit, limitSubscriptionLocalizations, limitIntroductoryOffers, limitPromotionalOffers, limitOfferCodes, limitPrices, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterProductId">filter by attribute &#39;productId&#39; (optional)</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptionPromotionalOffers">the fields to include for returned resources of type subscriptionPromotionalOffers (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionAppStoreReviewScreenshots">the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsSubscriptionIntroductoryOffers">the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)</param>
        /// <param name="fieldsSubscriptionPrices">the fields to include for returned resources of type subscriptionPrices (optional)</param>
        /// <param name="fieldsSubscriptionLocalizations">the fields to include for returned resources of type subscriptionLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="limitSubscriptionLocalizations">maximum number of related subscriptionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitIntroductoryOffers">maximum number of related introductoryOffers returned (when they are included) (optional)</param>
        /// <param name="limitPromotionalOffers">maximum number of related promotionalOffers returned (when they are included) (optional)</param>
        /// <param name="limitOfferCodes">maximum number of related offerCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<SubscriptionsResponse>> SubscriptionGroupsSubscriptionsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterName = default(List<string>?), List<string>? filterProductId = default(List<string>?), List<string>? filterState = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptionPromotionalOffers = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsSubscriptionIntroductoryOffers = default(List<string>?), List<string>? fieldsSubscriptionPrices = default(List<string>?), List<string>? fieldsSubscriptionLocalizations = default(List<string>?), int? limit = default(int?), int? limitSubscriptionLocalizations = default(int?), int? limitIntroductoryOffers = default(int?), int? limitPromotionalOffers = default(int?), int? limitOfferCodes = default(int?), int? limitPrices = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionGroupsApi->SubscriptionGroupsSubscriptionsGetToManyRelated");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterName != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[name]", filterName));
            }
            if (filterProductId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[productId]", filterProductId));
            }
            if (filterState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[state]", filterState));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (fieldsPromotedPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[promotedPurchases]", fieldsPromotedPurchases));
            }
            if (fieldsSubscriptionPromotionalOffers != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionPromotionalOffers]", fieldsSubscriptionPromotionalOffers));
            }
            if (fieldsSubscriptionOfferCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionOfferCodes]", fieldsSubscriptionOfferCodes));
            }
            if (fieldsSubscriptionAppStoreReviewScreenshots != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionAppStoreReviewScreenshots]", fieldsSubscriptionAppStoreReviewScreenshots));
            }
            if (fieldsSubscriptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptions]", fieldsSubscriptions));
            }
            if (fieldsSubscriptionGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionGroups]", fieldsSubscriptionGroups));
            }
            if (fieldsSubscriptionIntroductoryOffers != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionIntroductoryOffers]", fieldsSubscriptionIntroductoryOffers));
            }
            if (fieldsSubscriptionPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionPrices]", fieldsSubscriptionPrices));
            }
            if (fieldsSubscriptionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionLocalizations]", fieldsSubscriptionLocalizations));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (limitSubscriptionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[subscriptionLocalizations]", limitSubscriptionLocalizations));
            }
            if (limitIntroductoryOffers != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[introductoryOffers]", limitIntroductoryOffers));
            }
            if (limitPromotionalOffers != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[promotionalOffers]", limitPromotionalOffers));
            }
            if (limitOfferCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[offerCodes]", limitOfferCodes));
            }
            if (limitPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[prices]", limitPrices));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SubscriptionsResponse>("/v1/subscriptionGroups/{id}/subscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionGroupsSubscriptionsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionGroupUpdateRequest">SubscriptionGroup representation</param>
        /// <returns>SubscriptionGroupResponse</returns>
        public SubscriptionGroupResponse SubscriptionGroupsUpdateInstance(string id, SubscriptionGroupUpdateRequest subscriptionGroupUpdateRequest)
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionGroupResponse> localVarResponse = SubscriptionGroupsUpdateInstanceWithHttpInfo(id, subscriptionGroupUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionGroupUpdateRequest">SubscriptionGroup representation</param>
        /// <returns>ApiResponse of SubscriptionGroupResponse</returns>
        public AppStoreConnect.Client.ApiResponse<SubscriptionGroupResponse> SubscriptionGroupsUpdateInstanceWithHttpInfo(string id, SubscriptionGroupUpdateRequest subscriptionGroupUpdateRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionGroupsApi->SubscriptionGroupsUpdateInstance");

            // verify the required parameter 'subscriptionGroupUpdateRequest' is set
            if (subscriptionGroupUpdateRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'subscriptionGroupUpdateRequest' when calling SubscriptionGroupsApi->SubscriptionGroupsUpdateInstance");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = subscriptionGroupUpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<SubscriptionGroupResponse>("/v1/subscriptionGroups/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionGroupsUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionGroupUpdateRequest">SubscriptionGroup representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionGroupResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionGroupResponse> SubscriptionGroupsUpdateInstanceAsync(string id, SubscriptionGroupUpdateRequest subscriptionGroupUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionGroupResponse> localVarResponse = await SubscriptionGroupsUpdateInstanceWithHttpInfoAsync(id, subscriptionGroupUpdateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionGroupUpdateRequest">SubscriptionGroup representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionGroupResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<SubscriptionGroupResponse>> SubscriptionGroupsUpdateInstanceWithHttpInfoAsync(string id, SubscriptionGroupUpdateRequest subscriptionGroupUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionGroupsApi->SubscriptionGroupsUpdateInstance");

            // verify the required parameter 'subscriptionGroupUpdateRequest' is set
            if (subscriptionGroupUpdateRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'subscriptionGroupUpdateRequest' when calling SubscriptionGroupsApi->SubscriptionGroupsUpdateInstance");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = subscriptionGroupUpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<SubscriptionGroupResponse>("/v1/subscriptionGroups/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionGroupsUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
