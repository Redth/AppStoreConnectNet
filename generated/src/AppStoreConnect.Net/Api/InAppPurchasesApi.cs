/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AppStoreConnect.Client;
using AppStoreConnect.Model;

namespace AppStoreConnect.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInAppPurchasesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchaseAppStoreReviewScreenshots">the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>InAppPurchaseAppStoreReviewScreenshotResponse</returns>
        InAppPurchaseAppStoreReviewScreenshotResponse InAppPurchasesAppStoreReviewScreenshotGetToOneRelated(string id, List<string>? fieldsInAppPurchaseAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchaseAppStoreReviewScreenshots">the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of InAppPurchaseAppStoreReviewScreenshotResponse</returns>
        ApiResponse<InAppPurchaseAppStoreReviewScreenshotResponse> InAppPurchasesAppStoreReviewScreenshotGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsInAppPurchaseAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsInAppPurchaseContents">the fields to include for returned resources of type inAppPurchaseContents (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>InAppPurchaseContentResponse</returns>
        InAppPurchaseContentResponse InAppPurchasesContentGetToOneRelated(string id, List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsInAppPurchaseContents = default(List<string>?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsInAppPurchaseContents">the fields to include for returned resources of type inAppPurchaseContents (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of InAppPurchaseContentResponse</returns>
        ApiResponse<InAppPurchaseContentResponse> InAppPurchasesContentGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsInAppPurchaseContents = default(List<string>?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inAppPurchaseV2CreateRequest">InAppPurchase representation</param>
        /// <returns>InAppPurchaseV2Response</returns>
        InAppPurchaseV2Response InAppPurchasesCreateInstance(InAppPurchaseV2CreateRequest inAppPurchaseV2CreateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inAppPurchaseV2CreateRequest">InAppPurchase representation</param>
        /// <returns>ApiResponse of InAppPurchaseV2Response</returns>
        ApiResponse<InAppPurchaseV2Response> InAppPurchasesCreateInstanceWithHttpInfo(InAppPurchaseV2CreateRequest inAppPurchaseV2CreateRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns></returns>
        void InAppPurchasesDeleteInstance(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InAppPurchasesDeleteInstanceWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitApps">maximum number of related apps returned (when they are included) (optional)</param>
        /// <returns>InAppPurchaseResponse</returns>
        InAppPurchaseResponse InAppPurchasesGetInstance(string id, List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? include = default(List<string>?), int? limitApps = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitApps">maximum number of related apps returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of InAppPurchaseResponse</returns>
        ApiResponse<InAppPurchaseResponse> InAppPurchasesGetInstanceWithHttpInfo(string id, List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? include = default(List<string>?), int? limitApps = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsInAppPurchaseAppStoreReviewScreenshots">the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsInAppPurchasePricePoints">the fields to include for returned resources of type inAppPurchasePricePoints (optional)</param>
        /// <param name="fieldsInAppPurchaseLocalizations">the fields to include for returned resources of type inAppPurchaseLocalizations (optional)</param>
        /// <param name="fieldsInAppPurchasePriceSchedules">the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)</param>
        /// <param name="fieldsInAppPurchaseContents">the fields to include for returned resources of type inAppPurchaseContents (optional)</param>
        /// <param name="limitInAppPurchaseLocalizations">maximum number of related inAppPurchaseLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitPricePoints">maximum number of related pricePoints returned (when they are included) (optional)</param>
        /// <returns>InAppPurchaseV2Response</returns>
        InAppPurchaseV2Response InAppPurchasesGetInstance_0(string id, List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsInAppPurchaseAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsInAppPurchasePricePoints = default(List<string>?), List<string>? fieldsInAppPurchaseLocalizations = default(List<string>?), List<string>? fieldsInAppPurchasePriceSchedules = default(List<string>?), List<string>? fieldsInAppPurchaseContents = default(List<string>?), int? limitInAppPurchaseLocalizations = default(int?), int? limitPricePoints = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsInAppPurchaseAppStoreReviewScreenshots">the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsInAppPurchasePricePoints">the fields to include for returned resources of type inAppPurchasePricePoints (optional)</param>
        /// <param name="fieldsInAppPurchaseLocalizations">the fields to include for returned resources of type inAppPurchaseLocalizations (optional)</param>
        /// <param name="fieldsInAppPurchasePriceSchedules">the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)</param>
        /// <param name="fieldsInAppPurchaseContents">the fields to include for returned resources of type inAppPurchaseContents (optional)</param>
        /// <param name="limitInAppPurchaseLocalizations">maximum number of related inAppPurchaseLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitPricePoints">maximum number of related pricePoints returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of InAppPurchaseV2Response</returns>
        ApiResponse<InAppPurchaseV2Response> InAppPurchasesGetInstance_0WithHttpInfo(string id, List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsInAppPurchaseAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsInAppPurchasePricePoints = default(List<string>?), List<string>? fieldsInAppPurchaseLocalizations = default(List<string>?), List<string>? fieldsInAppPurchasePriceSchedules = default(List<string>?), List<string>? fieldsInAppPurchaseContents = default(List<string>?), int? limitInAppPurchaseLocalizations = default(int?), int? limitPricePoints = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchasePrices">the fields to include for returned resources of type inAppPurchasePrices (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsInAppPurchasePriceSchedules">the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limitManualPrices">maximum number of related manualPrices returned (when they are included) (optional)</param>
        /// <param name="limitAutomaticPrices">maximum number of related automaticPrices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>InAppPurchasePriceScheduleResponse</returns>
        InAppPurchasePriceScheduleResponse InAppPurchasesIapPriceScheduleGetToOneRelated(string id, List<string>? fieldsInAppPurchasePrices = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsInAppPurchasePriceSchedules = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limitManualPrices = default(int?), int? limitAutomaticPrices = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchasePrices">the fields to include for returned resources of type inAppPurchasePrices (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsInAppPurchasePriceSchedules">the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limitManualPrices">maximum number of related manualPrices returned (when they are included) (optional)</param>
        /// <param name="limitAutomaticPrices">maximum number of related automaticPrices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of InAppPurchasePriceScheduleResponse</returns>
        ApiResponse<InAppPurchasePriceScheduleResponse> InAppPurchasesIapPriceScheduleGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsInAppPurchasePrices = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsInAppPurchasePriceSchedules = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limitManualPrices = default(int?), int? limitAutomaticPrices = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchaseLocalizations">the fields to include for returned resources of type inAppPurchaseLocalizations (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>InAppPurchaseLocalizationsResponse</returns>
        InAppPurchaseLocalizationsResponse InAppPurchasesInAppPurchaseLocalizationsGetToManyRelated(string id, List<string>? fieldsInAppPurchaseLocalizations = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchaseLocalizations">the fields to include for returned resources of type inAppPurchaseLocalizations (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of InAppPurchaseLocalizationsResponse</returns>
        ApiResponse<InAppPurchaseLocalizationsResponse> InAppPurchasesInAppPurchaseLocalizationsGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsInAppPurchaseLocalizations = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPriceTier">filter by attribute &#39;priceTier&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsInAppPurchasePricePoints">the fields to include for returned resources of type inAppPurchasePricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>InAppPurchasePricePointsResponse</returns>
        InAppPurchasePricePointsResponse InAppPurchasesPricePointsGetToManyRelated(string id, List<string>? filterPriceTier = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsInAppPurchasePricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPriceTier">filter by attribute &#39;priceTier&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsInAppPurchasePricePoints">the fields to include for returned resources of type inAppPurchasePricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of InAppPurchasePricePointsResponse</returns>
        ApiResponse<InAppPurchasePricePointsResponse> InAppPurchasesPricePointsGetToManyRelatedWithHttpInfo(string id, List<string>? filterPriceTier = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsInAppPurchasePricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsPromotedPurchaseImages">the fields to include for returned resources of type promotedPurchaseImages (optional)</param>
        /// <param name="limitPromotionImages">maximum number of related promotionImages returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>PromotedPurchaseResponse</returns>
        PromotedPurchaseResponse InAppPurchasesPromotedPurchaseGetToOneRelated(string id, List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsPromotedPurchaseImages = default(List<string>?), int? limitPromotionImages = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsPromotedPurchaseImages">the fields to include for returned resources of type promotedPurchaseImages (optional)</param>
        /// <param name="limitPromotionImages">maximum number of related promotionImages returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of PromotedPurchaseResponse</returns>
        ApiResponse<PromotedPurchaseResponse> InAppPurchasesPromotedPurchaseGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsPromotedPurchaseImages = default(List<string>?), int? limitPromotionImages = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="inAppPurchaseV2UpdateRequest">InAppPurchase representation</param>
        /// <returns>InAppPurchaseV2Response</returns>
        InAppPurchaseV2Response InAppPurchasesUpdateInstance(string id, InAppPurchaseV2UpdateRequest inAppPurchaseV2UpdateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="inAppPurchaseV2UpdateRequest">InAppPurchase representation</param>
        /// <returns>ApiResponse of InAppPurchaseV2Response</returns>
        ApiResponse<InAppPurchaseV2Response> InAppPurchasesUpdateInstanceWithHttpInfo(string id, InAppPurchaseV2UpdateRequest inAppPurchaseV2UpdateRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInAppPurchasesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchaseAppStoreReviewScreenshots">the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InAppPurchaseAppStoreReviewScreenshotResponse</returns>
        System.Threading.Tasks.Task<InAppPurchaseAppStoreReviewScreenshotResponse> InAppPurchasesAppStoreReviewScreenshotGetToOneRelatedAsync(string id, List<string>? fieldsInAppPurchaseAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchaseAppStoreReviewScreenshots">the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InAppPurchaseAppStoreReviewScreenshotResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InAppPurchaseAppStoreReviewScreenshotResponse>> InAppPurchasesAppStoreReviewScreenshotGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsInAppPurchaseAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsInAppPurchaseContents">the fields to include for returned resources of type inAppPurchaseContents (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InAppPurchaseContentResponse</returns>
        System.Threading.Tasks.Task<InAppPurchaseContentResponse> InAppPurchasesContentGetToOneRelatedAsync(string id, List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsInAppPurchaseContents = default(List<string>?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsInAppPurchaseContents">the fields to include for returned resources of type inAppPurchaseContents (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InAppPurchaseContentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InAppPurchaseContentResponse>> InAppPurchasesContentGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsInAppPurchaseContents = default(List<string>?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inAppPurchaseV2CreateRequest">InAppPurchase representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InAppPurchaseV2Response</returns>
        System.Threading.Tasks.Task<InAppPurchaseV2Response> InAppPurchasesCreateInstanceAsync(InAppPurchaseV2CreateRequest inAppPurchaseV2CreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inAppPurchaseV2CreateRequest">InAppPurchase representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InAppPurchaseV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InAppPurchaseV2Response>> InAppPurchasesCreateInstanceWithHttpInfoAsync(InAppPurchaseV2CreateRequest inAppPurchaseV2CreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task InAppPurchasesDeleteInstanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InAppPurchasesDeleteInstanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitApps">maximum number of related apps returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InAppPurchaseResponse</returns>
        System.Threading.Tasks.Task<InAppPurchaseResponse> InAppPurchasesGetInstanceAsync(string id, List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? include = default(List<string>?), int? limitApps = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitApps">maximum number of related apps returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InAppPurchaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InAppPurchaseResponse>> InAppPurchasesGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? include = default(List<string>?), int? limitApps = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsInAppPurchaseAppStoreReviewScreenshots">the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsInAppPurchasePricePoints">the fields to include for returned resources of type inAppPurchasePricePoints (optional)</param>
        /// <param name="fieldsInAppPurchaseLocalizations">the fields to include for returned resources of type inAppPurchaseLocalizations (optional)</param>
        /// <param name="fieldsInAppPurchasePriceSchedules">the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)</param>
        /// <param name="fieldsInAppPurchaseContents">the fields to include for returned resources of type inAppPurchaseContents (optional)</param>
        /// <param name="limitInAppPurchaseLocalizations">maximum number of related inAppPurchaseLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitPricePoints">maximum number of related pricePoints returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InAppPurchaseV2Response</returns>
        System.Threading.Tasks.Task<InAppPurchaseV2Response> InAppPurchasesGetInstance_0Async(string id, List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsInAppPurchaseAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsInAppPurchasePricePoints = default(List<string>?), List<string>? fieldsInAppPurchaseLocalizations = default(List<string>?), List<string>? fieldsInAppPurchasePriceSchedules = default(List<string>?), List<string>? fieldsInAppPurchaseContents = default(List<string>?), int? limitInAppPurchaseLocalizations = default(int?), int? limitPricePoints = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsInAppPurchaseAppStoreReviewScreenshots">the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsInAppPurchasePricePoints">the fields to include for returned resources of type inAppPurchasePricePoints (optional)</param>
        /// <param name="fieldsInAppPurchaseLocalizations">the fields to include for returned resources of type inAppPurchaseLocalizations (optional)</param>
        /// <param name="fieldsInAppPurchasePriceSchedules">the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)</param>
        /// <param name="fieldsInAppPurchaseContents">the fields to include for returned resources of type inAppPurchaseContents (optional)</param>
        /// <param name="limitInAppPurchaseLocalizations">maximum number of related inAppPurchaseLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitPricePoints">maximum number of related pricePoints returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InAppPurchaseV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InAppPurchaseV2Response>> InAppPurchasesGetInstance_0WithHttpInfoAsync(string id, List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsInAppPurchaseAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsInAppPurchasePricePoints = default(List<string>?), List<string>? fieldsInAppPurchaseLocalizations = default(List<string>?), List<string>? fieldsInAppPurchasePriceSchedules = default(List<string>?), List<string>? fieldsInAppPurchaseContents = default(List<string>?), int? limitInAppPurchaseLocalizations = default(int?), int? limitPricePoints = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchasePrices">the fields to include for returned resources of type inAppPurchasePrices (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsInAppPurchasePriceSchedules">the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limitManualPrices">maximum number of related manualPrices returned (when they are included) (optional)</param>
        /// <param name="limitAutomaticPrices">maximum number of related automaticPrices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InAppPurchasePriceScheduleResponse</returns>
        System.Threading.Tasks.Task<InAppPurchasePriceScheduleResponse> InAppPurchasesIapPriceScheduleGetToOneRelatedAsync(string id, List<string>? fieldsInAppPurchasePrices = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsInAppPurchasePriceSchedules = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limitManualPrices = default(int?), int? limitAutomaticPrices = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchasePrices">the fields to include for returned resources of type inAppPurchasePrices (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsInAppPurchasePriceSchedules">the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limitManualPrices">maximum number of related manualPrices returned (when they are included) (optional)</param>
        /// <param name="limitAutomaticPrices">maximum number of related automaticPrices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InAppPurchasePriceScheduleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InAppPurchasePriceScheduleResponse>> InAppPurchasesIapPriceScheduleGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsInAppPurchasePrices = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsInAppPurchasePriceSchedules = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limitManualPrices = default(int?), int? limitAutomaticPrices = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchaseLocalizations">the fields to include for returned resources of type inAppPurchaseLocalizations (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InAppPurchaseLocalizationsResponse</returns>
        System.Threading.Tasks.Task<InAppPurchaseLocalizationsResponse> InAppPurchasesInAppPurchaseLocalizationsGetToManyRelatedAsync(string id, List<string>? fieldsInAppPurchaseLocalizations = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchaseLocalizations">the fields to include for returned resources of type inAppPurchaseLocalizations (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InAppPurchaseLocalizationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InAppPurchaseLocalizationsResponse>> InAppPurchasesInAppPurchaseLocalizationsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsInAppPurchaseLocalizations = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPriceTier">filter by attribute &#39;priceTier&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsInAppPurchasePricePoints">the fields to include for returned resources of type inAppPurchasePricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InAppPurchasePricePointsResponse</returns>
        System.Threading.Tasks.Task<InAppPurchasePricePointsResponse> InAppPurchasesPricePointsGetToManyRelatedAsync(string id, List<string>? filterPriceTier = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsInAppPurchasePricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPriceTier">filter by attribute &#39;priceTier&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsInAppPurchasePricePoints">the fields to include for returned resources of type inAppPurchasePricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InAppPurchasePricePointsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InAppPurchasePricePointsResponse>> InAppPurchasesPricePointsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterPriceTier = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsInAppPurchasePricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsPromotedPurchaseImages">the fields to include for returned resources of type promotedPurchaseImages (optional)</param>
        /// <param name="limitPromotionImages">maximum number of related promotionImages returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotedPurchaseResponse</returns>
        System.Threading.Tasks.Task<PromotedPurchaseResponse> InAppPurchasesPromotedPurchaseGetToOneRelatedAsync(string id, List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsPromotedPurchaseImages = default(List<string>?), int? limitPromotionImages = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsPromotedPurchaseImages">the fields to include for returned resources of type promotedPurchaseImages (optional)</param>
        /// <param name="limitPromotionImages">maximum number of related promotionImages returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotedPurchaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PromotedPurchaseResponse>> InAppPurchasesPromotedPurchaseGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsPromotedPurchaseImages = default(List<string>?), int? limitPromotionImages = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="inAppPurchaseV2UpdateRequest">InAppPurchase representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InAppPurchaseV2Response</returns>
        System.Threading.Tasks.Task<InAppPurchaseV2Response> InAppPurchasesUpdateInstanceAsync(string id, InAppPurchaseV2UpdateRequest inAppPurchaseV2UpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="inAppPurchaseV2UpdateRequest">InAppPurchase representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InAppPurchaseV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InAppPurchaseV2Response>> InAppPurchasesUpdateInstanceWithHttpInfoAsync(string id, InAppPurchaseV2UpdateRequest inAppPurchaseV2UpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInAppPurchasesApi : IInAppPurchasesApiSync, IInAppPurchasesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InAppPurchasesApi : IDisposable, IInAppPurchasesApi
    {
        private AppStoreConnect.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InAppPurchasesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public InAppPurchasesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InAppPurchasesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public InAppPurchasesApi(string basePath)
        {
            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InAppPurchasesApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public InAppPurchasesApi(AppStoreConnect.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InAppPurchasesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public InAppPurchasesApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InAppPurchasesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public InAppPurchasesApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InAppPurchasesApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public InAppPurchasesApi(HttpClient client, AppStoreConnect.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InAppPurchasesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public InAppPurchasesApi(AppStoreConnect.Client.ISynchronousClient client, AppStoreConnect.Client.IAsynchronousClient asyncClient, AppStoreConnect.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AppStoreConnect.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AppStoreConnect.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AppStoreConnect.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AppStoreConnect.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AppStoreConnect.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchaseAppStoreReviewScreenshots">the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>InAppPurchaseAppStoreReviewScreenshotResponse</returns>
        public InAppPurchaseAppStoreReviewScreenshotResponse InAppPurchasesAppStoreReviewScreenshotGetToOneRelated(string id, List<string>? fieldsInAppPurchaseAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Client.ApiResponse<InAppPurchaseAppStoreReviewScreenshotResponse> localVarResponse = InAppPurchasesAppStoreReviewScreenshotGetToOneRelatedWithHttpInfo(id, fieldsInAppPurchaseAppStoreReviewScreenshots, fieldsInAppPurchases, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchaseAppStoreReviewScreenshots">the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of InAppPurchaseAppStoreReviewScreenshotResponse</returns>
        public AppStoreConnect.Client.ApiResponse<InAppPurchaseAppStoreReviewScreenshotResponse> InAppPurchasesAppStoreReviewScreenshotGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsInAppPurchaseAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling InAppPurchasesApi->InAppPurchasesAppStoreReviewScreenshotGetToOneRelated");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsInAppPurchaseAppStoreReviewScreenshots != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchaseAppStoreReviewScreenshots]", fieldsInAppPurchaseAppStoreReviewScreenshots));
            }
            if (fieldsInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchases]", fieldsInAppPurchases));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InAppPurchaseAppStoreReviewScreenshotResponse>("/v2/inAppPurchases/{id}/appStoreReviewScreenshot", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InAppPurchasesAppStoreReviewScreenshotGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchaseAppStoreReviewScreenshots">the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InAppPurchaseAppStoreReviewScreenshotResponse</returns>
        public async System.Threading.Tasks.Task<InAppPurchaseAppStoreReviewScreenshotResponse> InAppPurchasesAppStoreReviewScreenshotGetToOneRelatedAsync(string id, List<string>? fieldsInAppPurchaseAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<InAppPurchaseAppStoreReviewScreenshotResponse> localVarResponse = await InAppPurchasesAppStoreReviewScreenshotGetToOneRelatedWithHttpInfoAsync(id, fieldsInAppPurchaseAppStoreReviewScreenshots, fieldsInAppPurchases, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchaseAppStoreReviewScreenshots">the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InAppPurchaseAppStoreReviewScreenshotResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<InAppPurchaseAppStoreReviewScreenshotResponse>> InAppPurchasesAppStoreReviewScreenshotGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsInAppPurchaseAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling InAppPurchasesApi->InAppPurchasesAppStoreReviewScreenshotGetToOneRelated");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsInAppPurchaseAppStoreReviewScreenshots != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchaseAppStoreReviewScreenshots]", fieldsInAppPurchaseAppStoreReviewScreenshots));
            }
            if (fieldsInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchases]", fieldsInAppPurchases));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InAppPurchaseAppStoreReviewScreenshotResponse>("/v2/inAppPurchases/{id}/appStoreReviewScreenshot", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InAppPurchasesAppStoreReviewScreenshotGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsInAppPurchaseContents">the fields to include for returned resources of type inAppPurchaseContents (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>InAppPurchaseContentResponse</returns>
        public InAppPurchaseContentResponse InAppPurchasesContentGetToOneRelated(string id, List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsInAppPurchaseContents = default(List<string>?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Client.ApiResponse<InAppPurchaseContentResponse> localVarResponse = InAppPurchasesContentGetToOneRelatedWithHttpInfo(id, fieldsInAppPurchases, fieldsInAppPurchaseContents, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsInAppPurchaseContents">the fields to include for returned resources of type inAppPurchaseContents (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of InAppPurchaseContentResponse</returns>
        public AppStoreConnect.Client.ApiResponse<InAppPurchaseContentResponse> InAppPurchasesContentGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsInAppPurchaseContents = default(List<string>?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling InAppPurchasesApi->InAppPurchasesContentGetToOneRelated");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchases]", fieldsInAppPurchases));
            }
            if (fieldsInAppPurchaseContents != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchaseContents]", fieldsInAppPurchaseContents));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InAppPurchaseContentResponse>("/v2/inAppPurchases/{id}/content", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InAppPurchasesContentGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsInAppPurchaseContents">the fields to include for returned resources of type inAppPurchaseContents (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InAppPurchaseContentResponse</returns>
        public async System.Threading.Tasks.Task<InAppPurchaseContentResponse> InAppPurchasesContentGetToOneRelatedAsync(string id, List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsInAppPurchaseContents = default(List<string>?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<InAppPurchaseContentResponse> localVarResponse = await InAppPurchasesContentGetToOneRelatedWithHttpInfoAsync(id, fieldsInAppPurchases, fieldsInAppPurchaseContents, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsInAppPurchaseContents">the fields to include for returned resources of type inAppPurchaseContents (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InAppPurchaseContentResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<InAppPurchaseContentResponse>> InAppPurchasesContentGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsInAppPurchaseContents = default(List<string>?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling InAppPurchasesApi->InAppPurchasesContentGetToOneRelated");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchases]", fieldsInAppPurchases));
            }
            if (fieldsInAppPurchaseContents != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchaseContents]", fieldsInAppPurchaseContents));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InAppPurchaseContentResponse>("/v2/inAppPurchases/{id}/content", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InAppPurchasesContentGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inAppPurchaseV2CreateRequest">InAppPurchase representation</param>
        /// <returns>InAppPurchaseV2Response</returns>
        public InAppPurchaseV2Response InAppPurchasesCreateInstance(InAppPurchaseV2CreateRequest inAppPurchaseV2CreateRequest)
        {
            AppStoreConnect.Client.ApiResponse<InAppPurchaseV2Response> localVarResponse = InAppPurchasesCreateInstanceWithHttpInfo(inAppPurchaseV2CreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inAppPurchaseV2CreateRequest">InAppPurchase representation</param>
        /// <returns>ApiResponse of InAppPurchaseV2Response</returns>
        public AppStoreConnect.Client.ApiResponse<InAppPurchaseV2Response> InAppPurchasesCreateInstanceWithHttpInfo(InAppPurchaseV2CreateRequest inAppPurchaseV2CreateRequest)
        {
            // verify the required parameter 'inAppPurchaseV2CreateRequest' is set
            if (inAppPurchaseV2CreateRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'inAppPurchaseV2CreateRequest' when calling InAppPurchasesApi->InAppPurchasesCreateInstance");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = inAppPurchaseV2CreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InAppPurchaseV2Response>("/v2/inAppPurchases", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InAppPurchasesCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inAppPurchaseV2CreateRequest">InAppPurchase representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InAppPurchaseV2Response</returns>
        public async System.Threading.Tasks.Task<InAppPurchaseV2Response> InAppPurchasesCreateInstanceAsync(InAppPurchaseV2CreateRequest inAppPurchaseV2CreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<InAppPurchaseV2Response> localVarResponse = await InAppPurchasesCreateInstanceWithHttpInfoAsync(inAppPurchaseV2CreateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inAppPurchaseV2CreateRequest">InAppPurchase representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InAppPurchaseV2Response)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<InAppPurchaseV2Response>> InAppPurchasesCreateInstanceWithHttpInfoAsync(InAppPurchaseV2CreateRequest inAppPurchaseV2CreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inAppPurchaseV2CreateRequest' is set
            if (inAppPurchaseV2CreateRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'inAppPurchaseV2CreateRequest' when calling InAppPurchasesApi->InAppPurchasesCreateInstance");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = inAppPurchaseV2CreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InAppPurchaseV2Response>("/v2/inAppPurchases", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InAppPurchasesCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns></returns>
        public void InAppPurchasesDeleteInstance(string id)
        {
            InAppPurchasesDeleteInstanceWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Client.ApiResponse<Object> InAppPurchasesDeleteInstanceWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling InAppPurchasesApi->InAppPurchasesDeleteInstance");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/inAppPurchases/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InAppPurchasesDeleteInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task InAppPurchasesDeleteInstanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await InAppPurchasesDeleteInstanceWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<Object>> InAppPurchasesDeleteInstanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling InAppPurchasesApi->InAppPurchasesDeleteInstance");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/inAppPurchases/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InAppPurchasesDeleteInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitApps">maximum number of related apps returned (when they are included) (optional)</param>
        /// <returns>InAppPurchaseResponse</returns>
        public InAppPurchaseResponse InAppPurchasesGetInstance(string id, List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? include = default(List<string>?), int? limitApps = default(int?))
        {
            AppStoreConnect.Client.ApiResponse<InAppPurchaseResponse> localVarResponse = InAppPurchasesGetInstanceWithHttpInfo(id, fieldsInAppPurchases, include, limitApps);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitApps">maximum number of related apps returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of InAppPurchaseResponse</returns>
        public AppStoreConnect.Client.ApiResponse<InAppPurchaseResponse> InAppPurchasesGetInstanceWithHttpInfo(string id, List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? include = default(List<string>?), int? limitApps = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling InAppPurchasesApi->InAppPurchasesGetInstance");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchases]", fieldsInAppPurchases));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[apps]", limitApps));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InAppPurchaseResponse>("/v1/inAppPurchases/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InAppPurchasesGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitApps">maximum number of related apps returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InAppPurchaseResponse</returns>
        public async System.Threading.Tasks.Task<InAppPurchaseResponse> InAppPurchasesGetInstanceAsync(string id, List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? include = default(List<string>?), int? limitApps = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<InAppPurchaseResponse> localVarResponse = await InAppPurchasesGetInstanceWithHttpInfoAsync(id, fieldsInAppPurchases, include, limitApps, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitApps">maximum number of related apps returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InAppPurchaseResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<InAppPurchaseResponse>> InAppPurchasesGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? include = default(List<string>?), int? limitApps = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling InAppPurchasesApi->InAppPurchasesGetInstance");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchases]", fieldsInAppPurchases));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[apps]", limitApps));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InAppPurchaseResponse>("/v1/inAppPurchases/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InAppPurchasesGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsInAppPurchaseAppStoreReviewScreenshots">the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsInAppPurchasePricePoints">the fields to include for returned resources of type inAppPurchasePricePoints (optional)</param>
        /// <param name="fieldsInAppPurchaseLocalizations">the fields to include for returned resources of type inAppPurchaseLocalizations (optional)</param>
        /// <param name="fieldsInAppPurchasePriceSchedules">the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)</param>
        /// <param name="fieldsInAppPurchaseContents">the fields to include for returned resources of type inAppPurchaseContents (optional)</param>
        /// <param name="limitInAppPurchaseLocalizations">maximum number of related inAppPurchaseLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitPricePoints">maximum number of related pricePoints returned (when they are included) (optional)</param>
        /// <returns>InAppPurchaseV2Response</returns>
        public InAppPurchaseV2Response InAppPurchasesGetInstance_0(string id, List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsInAppPurchaseAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsInAppPurchasePricePoints = default(List<string>?), List<string>? fieldsInAppPurchaseLocalizations = default(List<string>?), List<string>? fieldsInAppPurchasePriceSchedules = default(List<string>?), List<string>? fieldsInAppPurchaseContents = default(List<string>?), int? limitInAppPurchaseLocalizations = default(int?), int? limitPricePoints = default(int?))
        {
            AppStoreConnect.Client.ApiResponse<InAppPurchaseV2Response> localVarResponse = InAppPurchasesGetInstance_0WithHttpInfo(id, fieldsInAppPurchases, include, fieldsInAppPurchaseAppStoreReviewScreenshots, fieldsPromotedPurchases, fieldsInAppPurchasePricePoints, fieldsInAppPurchaseLocalizations, fieldsInAppPurchasePriceSchedules, fieldsInAppPurchaseContents, limitInAppPurchaseLocalizations, limitPricePoints);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsInAppPurchaseAppStoreReviewScreenshots">the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsInAppPurchasePricePoints">the fields to include for returned resources of type inAppPurchasePricePoints (optional)</param>
        /// <param name="fieldsInAppPurchaseLocalizations">the fields to include for returned resources of type inAppPurchaseLocalizations (optional)</param>
        /// <param name="fieldsInAppPurchasePriceSchedules">the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)</param>
        /// <param name="fieldsInAppPurchaseContents">the fields to include for returned resources of type inAppPurchaseContents (optional)</param>
        /// <param name="limitInAppPurchaseLocalizations">maximum number of related inAppPurchaseLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitPricePoints">maximum number of related pricePoints returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of InAppPurchaseV2Response</returns>
        public AppStoreConnect.Client.ApiResponse<InAppPurchaseV2Response> InAppPurchasesGetInstance_0WithHttpInfo(string id, List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsInAppPurchaseAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsInAppPurchasePricePoints = default(List<string>?), List<string>? fieldsInAppPurchaseLocalizations = default(List<string>?), List<string>? fieldsInAppPurchasePriceSchedules = default(List<string>?), List<string>? fieldsInAppPurchaseContents = default(List<string>?), int? limitInAppPurchaseLocalizations = default(int?), int? limitPricePoints = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling InAppPurchasesApi->InAppPurchasesGetInstance_0");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchases]", fieldsInAppPurchases));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (fieldsInAppPurchaseAppStoreReviewScreenshots != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchaseAppStoreReviewScreenshots]", fieldsInAppPurchaseAppStoreReviewScreenshots));
            }
            if (fieldsPromotedPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[promotedPurchases]", fieldsPromotedPurchases));
            }
            if (fieldsInAppPurchasePricePoints != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchasePricePoints]", fieldsInAppPurchasePricePoints));
            }
            if (fieldsInAppPurchaseLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchaseLocalizations]", fieldsInAppPurchaseLocalizations));
            }
            if (fieldsInAppPurchasePriceSchedules != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchasePriceSchedules]", fieldsInAppPurchasePriceSchedules));
            }
            if (fieldsInAppPurchaseContents != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchaseContents]", fieldsInAppPurchaseContents));
            }
            if (limitInAppPurchaseLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[inAppPurchaseLocalizations]", limitInAppPurchaseLocalizations));
            }
            if (limitPricePoints != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[pricePoints]", limitPricePoints));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InAppPurchaseV2Response>("/v2/inAppPurchases/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InAppPurchasesGetInstance_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsInAppPurchaseAppStoreReviewScreenshots">the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsInAppPurchasePricePoints">the fields to include for returned resources of type inAppPurchasePricePoints (optional)</param>
        /// <param name="fieldsInAppPurchaseLocalizations">the fields to include for returned resources of type inAppPurchaseLocalizations (optional)</param>
        /// <param name="fieldsInAppPurchasePriceSchedules">the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)</param>
        /// <param name="fieldsInAppPurchaseContents">the fields to include for returned resources of type inAppPurchaseContents (optional)</param>
        /// <param name="limitInAppPurchaseLocalizations">maximum number of related inAppPurchaseLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitPricePoints">maximum number of related pricePoints returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InAppPurchaseV2Response</returns>
        public async System.Threading.Tasks.Task<InAppPurchaseV2Response> InAppPurchasesGetInstance_0Async(string id, List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsInAppPurchaseAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsInAppPurchasePricePoints = default(List<string>?), List<string>? fieldsInAppPurchaseLocalizations = default(List<string>?), List<string>? fieldsInAppPurchasePriceSchedules = default(List<string>?), List<string>? fieldsInAppPurchaseContents = default(List<string>?), int? limitInAppPurchaseLocalizations = default(int?), int? limitPricePoints = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<InAppPurchaseV2Response> localVarResponse = await InAppPurchasesGetInstance_0WithHttpInfoAsync(id, fieldsInAppPurchases, include, fieldsInAppPurchaseAppStoreReviewScreenshots, fieldsPromotedPurchases, fieldsInAppPurchasePricePoints, fieldsInAppPurchaseLocalizations, fieldsInAppPurchasePriceSchedules, fieldsInAppPurchaseContents, limitInAppPurchaseLocalizations, limitPricePoints, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsInAppPurchaseAppStoreReviewScreenshots">the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsInAppPurchasePricePoints">the fields to include for returned resources of type inAppPurchasePricePoints (optional)</param>
        /// <param name="fieldsInAppPurchaseLocalizations">the fields to include for returned resources of type inAppPurchaseLocalizations (optional)</param>
        /// <param name="fieldsInAppPurchasePriceSchedules">the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)</param>
        /// <param name="fieldsInAppPurchaseContents">the fields to include for returned resources of type inAppPurchaseContents (optional)</param>
        /// <param name="limitInAppPurchaseLocalizations">maximum number of related inAppPurchaseLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitPricePoints">maximum number of related pricePoints returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InAppPurchaseV2Response)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<InAppPurchaseV2Response>> InAppPurchasesGetInstance_0WithHttpInfoAsync(string id, List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsInAppPurchaseAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsInAppPurchasePricePoints = default(List<string>?), List<string>? fieldsInAppPurchaseLocalizations = default(List<string>?), List<string>? fieldsInAppPurchasePriceSchedules = default(List<string>?), List<string>? fieldsInAppPurchaseContents = default(List<string>?), int? limitInAppPurchaseLocalizations = default(int?), int? limitPricePoints = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling InAppPurchasesApi->InAppPurchasesGetInstance_0");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchases]", fieldsInAppPurchases));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (fieldsInAppPurchaseAppStoreReviewScreenshots != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchaseAppStoreReviewScreenshots]", fieldsInAppPurchaseAppStoreReviewScreenshots));
            }
            if (fieldsPromotedPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[promotedPurchases]", fieldsPromotedPurchases));
            }
            if (fieldsInAppPurchasePricePoints != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchasePricePoints]", fieldsInAppPurchasePricePoints));
            }
            if (fieldsInAppPurchaseLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchaseLocalizations]", fieldsInAppPurchaseLocalizations));
            }
            if (fieldsInAppPurchasePriceSchedules != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchasePriceSchedules]", fieldsInAppPurchasePriceSchedules));
            }
            if (fieldsInAppPurchaseContents != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchaseContents]", fieldsInAppPurchaseContents));
            }
            if (limitInAppPurchaseLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[inAppPurchaseLocalizations]", limitInAppPurchaseLocalizations));
            }
            if (limitPricePoints != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[pricePoints]", limitPricePoints));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InAppPurchaseV2Response>("/v2/inAppPurchases/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InAppPurchasesGetInstance_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchasePrices">the fields to include for returned resources of type inAppPurchasePrices (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsInAppPurchasePriceSchedules">the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limitManualPrices">maximum number of related manualPrices returned (when they are included) (optional)</param>
        /// <param name="limitAutomaticPrices">maximum number of related automaticPrices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>InAppPurchasePriceScheduleResponse</returns>
        public InAppPurchasePriceScheduleResponse InAppPurchasesIapPriceScheduleGetToOneRelated(string id, List<string>? fieldsInAppPurchasePrices = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsInAppPurchasePriceSchedules = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limitManualPrices = default(int?), int? limitAutomaticPrices = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Client.ApiResponse<InAppPurchasePriceScheduleResponse> localVarResponse = InAppPurchasesIapPriceScheduleGetToOneRelatedWithHttpInfo(id, fieldsInAppPurchasePrices, fieldsInAppPurchases, fieldsInAppPurchasePriceSchedules, fieldsTerritories, limitManualPrices, limitAutomaticPrices, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchasePrices">the fields to include for returned resources of type inAppPurchasePrices (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsInAppPurchasePriceSchedules">the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limitManualPrices">maximum number of related manualPrices returned (when they are included) (optional)</param>
        /// <param name="limitAutomaticPrices">maximum number of related automaticPrices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of InAppPurchasePriceScheduleResponse</returns>
        public AppStoreConnect.Client.ApiResponse<InAppPurchasePriceScheduleResponse> InAppPurchasesIapPriceScheduleGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsInAppPurchasePrices = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsInAppPurchasePriceSchedules = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limitManualPrices = default(int?), int? limitAutomaticPrices = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling InAppPurchasesApi->InAppPurchasesIapPriceScheduleGetToOneRelated");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsInAppPurchasePrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchasePrices]", fieldsInAppPurchasePrices));
            }
            if (fieldsInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchases]", fieldsInAppPurchases));
            }
            if (fieldsInAppPurchasePriceSchedules != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchasePriceSchedules]", fieldsInAppPurchasePriceSchedules));
            }
            if (fieldsTerritories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[territories]", fieldsTerritories));
            }
            if (limitManualPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[manualPrices]", limitManualPrices));
            }
            if (limitAutomaticPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[automaticPrices]", limitAutomaticPrices));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InAppPurchasePriceScheduleResponse>("/v2/inAppPurchases/{id}/iapPriceSchedule", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InAppPurchasesIapPriceScheduleGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchasePrices">the fields to include for returned resources of type inAppPurchasePrices (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsInAppPurchasePriceSchedules">the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limitManualPrices">maximum number of related manualPrices returned (when they are included) (optional)</param>
        /// <param name="limitAutomaticPrices">maximum number of related automaticPrices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InAppPurchasePriceScheduleResponse</returns>
        public async System.Threading.Tasks.Task<InAppPurchasePriceScheduleResponse> InAppPurchasesIapPriceScheduleGetToOneRelatedAsync(string id, List<string>? fieldsInAppPurchasePrices = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsInAppPurchasePriceSchedules = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limitManualPrices = default(int?), int? limitAutomaticPrices = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<InAppPurchasePriceScheduleResponse> localVarResponse = await InAppPurchasesIapPriceScheduleGetToOneRelatedWithHttpInfoAsync(id, fieldsInAppPurchasePrices, fieldsInAppPurchases, fieldsInAppPurchasePriceSchedules, fieldsTerritories, limitManualPrices, limitAutomaticPrices, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchasePrices">the fields to include for returned resources of type inAppPurchasePrices (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsInAppPurchasePriceSchedules">the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limitManualPrices">maximum number of related manualPrices returned (when they are included) (optional)</param>
        /// <param name="limitAutomaticPrices">maximum number of related automaticPrices returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InAppPurchasePriceScheduleResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<InAppPurchasePriceScheduleResponse>> InAppPurchasesIapPriceScheduleGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsInAppPurchasePrices = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsInAppPurchasePriceSchedules = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limitManualPrices = default(int?), int? limitAutomaticPrices = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling InAppPurchasesApi->InAppPurchasesIapPriceScheduleGetToOneRelated");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsInAppPurchasePrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchasePrices]", fieldsInAppPurchasePrices));
            }
            if (fieldsInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchases]", fieldsInAppPurchases));
            }
            if (fieldsInAppPurchasePriceSchedules != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchasePriceSchedules]", fieldsInAppPurchasePriceSchedules));
            }
            if (fieldsTerritories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[territories]", fieldsTerritories));
            }
            if (limitManualPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[manualPrices]", limitManualPrices));
            }
            if (limitAutomaticPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[automaticPrices]", limitAutomaticPrices));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InAppPurchasePriceScheduleResponse>("/v2/inAppPurchases/{id}/iapPriceSchedule", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InAppPurchasesIapPriceScheduleGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchaseLocalizations">the fields to include for returned resources of type inAppPurchaseLocalizations (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>InAppPurchaseLocalizationsResponse</returns>
        public InAppPurchaseLocalizationsResponse InAppPurchasesInAppPurchaseLocalizationsGetToManyRelated(string id, List<string>? fieldsInAppPurchaseLocalizations = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Client.ApiResponse<InAppPurchaseLocalizationsResponse> localVarResponse = InAppPurchasesInAppPurchaseLocalizationsGetToManyRelatedWithHttpInfo(id, fieldsInAppPurchaseLocalizations, fieldsInAppPurchases, limit, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchaseLocalizations">the fields to include for returned resources of type inAppPurchaseLocalizations (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of InAppPurchaseLocalizationsResponse</returns>
        public AppStoreConnect.Client.ApiResponse<InAppPurchaseLocalizationsResponse> InAppPurchasesInAppPurchaseLocalizationsGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsInAppPurchaseLocalizations = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling InAppPurchasesApi->InAppPurchasesInAppPurchaseLocalizationsGetToManyRelated");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsInAppPurchaseLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchaseLocalizations]", fieldsInAppPurchaseLocalizations));
            }
            if (fieldsInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchases]", fieldsInAppPurchases));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InAppPurchaseLocalizationsResponse>("/v2/inAppPurchases/{id}/inAppPurchaseLocalizations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InAppPurchasesInAppPurchaseLocalizationsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchaseLocalizations">the fields to include for returned resources of type inAppPurchaseLocalizations (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InAppPurchaseLocalizationsResponse</returns>
        public async System.Threading.Tasks.Task<InAppPurchaseLocalizationsResponse> InAppPurchasesInAppPurchaseLocalizationsGetToManyRelatedAsync(string id, List<string>? fieldsInAppPurchaseLocalizations = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<InAppPurchaseLocalizationsResponse> localVarResponse = await InAppPurchasesInAppPurchaseLocalizationsGetToManyRelatedWithHttpInfoAsync(id, fieldsInAppPurchaseLocalizations, fieldsInAppPurchases, limit, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsInAppPurchaseLocalizations">the fields to include for returned resources of type inAppPurchaseLocalizations (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InAppPurchaseLocalizationsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<InAppPurchaseLocalizationsResponse>> InAppPurchasesInAppPurchaseLocalizationsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsInAppPurchaseLocalizations = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling InAppPurchasesApi->InAppPurchasesInAppPurchaseLocalizationsGetToManyRelated");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsInAppPurchaseLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchaseLocalizations]", fieldsInAppPurchaseLocalizations));
            }
            if (fieldsInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchases]", fieldsInAppPurchases));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InAppPurchaseLocalizationsResponse>("/v2/inAppPurchases/{id}/inAppPurchaseLocalizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InAppPurchasesInAppPurchaseLocalizationsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPriceTier">filter by attribute &#39;priceTier&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsInAppPurchasePricePoints">the fields to include for returned resources of type inAppPurchasePricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>InAppPurchasePricePointsResponse</returns>
        public InAppPurchasePricePointsResponse InAppPurchasesPricePointsGetToManyRelated(string id, List<string>? filterPriceTier = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsInAppPurchasePricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Client.ApiResponse<InAppPurchasePricePointsResponse> localVarResponse = InAppPurchasesPricePointsGetToManyRelatedWithHttpInfo(id, filterPriceTier, filterTerritory, fieldsInAppPurchasePricePoints, fieldsTerritories, limit, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPriceTier">filter by attribute &#39;priceTier&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsInAppPurchasePricePoints">the fields to include for returned resources of type inAppPurchasePricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of InAppPurchasePricePointsResponse</returns>
        public AppStoreConnect.Client.ApiResponse<InAppPurchasePricePointsResponse> InAppPurchasesPricePointsGetToManyRelatedWithHttpInfo(string id, List<string>? filterPriceTier = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsInAppPurchasePricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling InAppPurchasesApi->InAppPurchasesPricePointsGetToManyRelated");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterPriceTier != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[priceTier]", filterPriceTier));
            }
            if (filterTerritory != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[territory]", filterTerritory));
            }
            if (fieldsInAppPurchasePricePoints != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchasePricePoints]", fieldsInAppPurchasePricePoints));
            }
            if (fieldsTerritories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[territories]", fieldsTerritories));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InAppPurchasePricePointsResponse>("/v2/inAppPurchases/{id}/pricePoints", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InAppPurchasesPricePointsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPriceTier">filter by attribute &#39;priceTier&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsInAppPurchasePricePoints">the fields to include for returned resources of type inAppPurchasePricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InAppPurchasePricePointsResponse</returns>
        public async System.Threading.Tasks.Task<InAppPurchasePricePointsResponse> InAppPurchasesPricePointsGetToManyRelatedAsync(string id, List<string>? filterPriceTier = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsInAppPurchasePricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<InAppPurchasePricePointsResponse> localVarResponse = await InAppPurchasesPricePointsGetToManyRelatedWithHttpInfoAsync(id, filterPriceTier, filterTerritory, fieldsInAppPurchasePricePoints, fieldsTerritories, limit, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPriceTier">filter by attribute &#39;priceTier&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsInAppPurchasePricePoints">the fields to include for returned resources of type inAppPurchasePricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InAppPurchasePricePointsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<InAppPurchasePricePointsResponse>> InAppPurchasesPricePointsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterPriceTier = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsInAppPurchasePricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling InAppPurchasesApi->InAppPurchasesPricePointsGetToManyRelated");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterPriceTier != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[priceTier]", filterPriceTier));
            }
            if (filterTerritory != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[territory]", filterTerritory));
            }
            if (fieldsInAppPurchasePricePoints != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchasePricePoints]", fieldsInAppPurchasePricePoints));
            }
            if (fieldsTerritories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[territories]", fieldsTerritories));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InAppPurchasePricePointsResponse>("/v2/inAppPurchases/{id}/pricePoints", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InAppPurchasesPricePointsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsPromotedPurchaseImages">the fields to include for returned resources of type promotedPurchaseImages (optional)</param>
        /// <param name="limitPromotionImages">maximum number of related promotionImages returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>PromotedPurchaseResponse</returns>
        public PromotedPurchaseResponse InAppPurchasesPromotedPurchaseGetToOneRelated(string id, List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsPromotedPurchaseImages = default(List<string>?), int? limitPromotionImages = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Client.ApiResponse<PromotedPurchaseResponse> localVarResponse = InAppPurchasesPromotedPurchaseGetToOneRelatedWithHttpInfo(id, fieldsPromotedPurchases, fieldsSubscriptions, fieldsInAppPurchases, fieldsPromotedPurchaseImages, limitPromotionImages, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsPromotedPurchaseImages">the fields to include for returned resources of type promotedPurchaseImages (optional)</param>
        /// <param name="limitPromotionImages">maximum number of related promotionImages returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of PromotedPurchaseResponse</returns>
        public AppStoreConnect.Client.ApiResponse<PromotedPurchaseResponse> InAppPurchasesPromotedPurchaseGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsPromotedPurchaseImages = default(List<string>?), int? limitPromotionImages = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling InAppPurchasesApi->InAppPurchasesPromotedPurchaseGetToOneRelated");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsPromotedPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[promotedPurchases]", fieldsPromotedPurchases));
            }
            if (fieldsSubscriptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptions]", fieldsSubscriptions));
            }
            if (fieldsInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchases]", fieldsInAppPurchases));
            }
            if (fieldsPromotedPurchaseImages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[promotedPurchaseImages]", fieldsPromotedPurchaseImages));
            }
            if (limitPromotionImages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[promotionImages]", limitPromotionImages));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PromotedPurchaseResponse>("/v2/inAppPurchases/{id}/promotedPurchase", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InAppPurchasesPromotedPurchaseGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsPromotedPurchaseImages">the fields to include for returned resources of type promotedPurchaseImages (optional)</param>
        /// <param name="limitPromotionImages">maximum number of related promotionImages returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotedPurchaseResponse</returns>
        public async System.Threading.Tasks.Task<PromotedPurchaseResponse> InAppPurchasesPromotedPurchaseGetToOneRelatedAsync(string id, List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsPromotedPurchaseImages = default(List<string>?), int? limitPromotionImages = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<PromotedPurchaseResponse> localVarResponse = await InAppPurchasesPromotedPurchaseGetToOneRelatedWithHttpInfoAsync(id, fieldsPromotedPurchases, fieldsSubscriptions, fieldsInAppPurchases, fieldsPromotedPurchaseImages, limitPromotionImages, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsPromotedPurchaseImages">the fields to include for returned resources of type promotedPurchaseImages (optional)</param>
        /// <param name="limitPromotionImages">maximum number of related promotionImages returned (when they are included) (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotedPurchaseResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<PromotedPurchaseResponse>> InAppPurchasesPromotedPurchaseGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsPromotedPurchaseImages = default(List<string>?), int? limitPromotionImages = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling InAppPurchasesApi->InAppPurchasesPromotedPurchaseGetToOneRelated");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsPromotedPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[promotedPurchases]", fieldsPromotedPurchases));
            }
            if (fieldsSubscriptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptions]", fieldsSubscriptions));
            }
            if (fieldsInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchases]", fieldsInAppPurchases));
            }
            if (fieldsPromotedPurchaseImages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[promotedPurchaseImages]", fieldsPromotedPurchaseImages));
            }
            if (limitPromotionImages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[promotionImages]", limitPromotionImages));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PromotedPurchaseResponse>("/v2/inAppPurchases/{id}/promotedPurchase", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InAppPurchasesPromotedPurchaseGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="inAppPurchaseV2UpdateRequest">InAppPurchase representation</param>
        /// <returns>InAppPurchaseV2Response</returns>
        public InAppPurchaseV2Response InAppPurchasesUpdateInstance(string id, InAppPurchaseV2UpdateRequest inAppPurchaseV2UpdateRequest)
        {
            AppStoreConnect.Client.ApiResponse<InAppPurchaseV2Response> localVarResponse = InAppPurchasesUpdateInstanceWithHttpInfo(id, inAppPurchaseV2UpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="inAppPurchaseV2UpdateRequest">InAppPurchase representation</param>
        /// <returns>ApiResponse of InAppPurchaseV2Response</returns>
        public AppStoreConnect.Client.ApiResponse<InAppPurchaseV2Response> InAppPurchasesUpdateInstanceWithHttpInfo(string id, InAppPurchaseV2UpdateRequest inAppPurchaseV2UpdateRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling InAppPurchasesApi->InAppPurchasesUpdateInstance");

            // verify the required parameter 'inAppPurchaseV2UpdateRequest' is set
            if (inAppPurchaseV2UpdateRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'inAppPurchaseV2UpdateRequest' when calling InAppPurchasesApi->InAppPurchasesUpdateInstance");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = inAppPurchaseV2UpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<InAppPurchaseV2Response>("/v2/inAppPurchases/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InAppPurchasesUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="inAppPurchaseV2UpdateRequest">InAppPurchase representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InAppPurchaseV2Response</returns>
        public async System.Threading.Tasks.Task<InAppPurchaseV2Response> InAppPurchasesUpdateInstanceAsync(string id, InAppPurchaseV2UpdateRequest inAppPurchaseV2UpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<InAppPurchaseV2Response> localVarResponse = await InAppPurchasesUpdateInstanceWithHttpInfoAsync(id, inAppPurchaseV2UpdateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="inAppPurchaseV2UpdateRequest">InAppPurchase representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InAppPurchaseV2Response)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<InAppPurchaseV2Response>> InAppPurchasesUpdateInstanceWithHttpInfoAsync(string id, InAppPurchaseV2UpdateRequest inAppPurchaseV2UpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling InAppPurchasesApi->InAppPurchasesUpdateInstance");

            // verify the required parameter 'inAppPurchaseV2UpdateRequest' is set
            if (inAppPurchaseV2UpdateRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'inAppPurchaseV2UpdateRequest' when calling InAppPurchasesApi->InAppPurchasesUpdateInstance");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = inAppPurchaseV2UpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<InAppPurchaseV2Response>("/v2/inAppPurchases/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InAppPurchasesUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
