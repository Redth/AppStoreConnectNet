/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AppStoreConnect.Client;
using AppStoreConnect.Model;

namespace AppStoreConnect.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionOfferCodesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionOfferCodeCreateRequest">SubscriptionOfferCode representation</param>
        /// <returns>SubscriptionOfferCodeResponse</returns>
        SubscriptionOfferCodeResponse SubscriptionOfferCodesCreateInstance(SubscriptionOfferCodeCreateRequest subscriptionOfferCodeCreateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionOfferCodeCreateRequest">SubscriptionOfferCode representation</param>
        /// <returns>ApiResponse of SubscriptionOfferCodeResponse</returns>
        ApiResponse<SubscriptionOfferCodeResponse> SubscriptionOfferCodesCreateInstanceWithHttpInfo(SubscriptionOfferCodeCreateRequest subscriptionOfferCodeCreateRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionOfferCodeCustomCodes">the fields to include for returned resources of type subscriptionOfferCodeCustomCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>SubscriptionOfferCodeCustomCodesResponse</returns>
        SubscriptionOfferCodeCustomCodesResponse SubscriptionOfferCodesCustomCodesGetToManyRelated(string id, List<string>? fieldsSubscriptionOfferCodeCustomCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionOfferCodeCustomCodes">the fields to include for returned resources of type subscriptionOfferCodeCustomCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of SubscriptionOfferCodeCustomCodesResponse</returns>
        ApiResponse<SubscriptionOfferCodeCustomCodesResponse> SubscriptionOfferCodesCustomCodesGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsSubscriptionOfferCodeCustomCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeCustomCodes">the fields to include for returned resources of type subscriptionOfferCodeCustomCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeOneTimeUseCodes">the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodePrices">the fields to include for returned resources of type subscriptionOfferCodePrices (optional)</param>
        /// <param name="limitCustomCodes">maximum number of related customCodes returned (when they are included) (optional)</param>
        /// <param name="limitOneTimeUseCodes">maximum number of related oneTimeUseCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <returns>SubscriptionOfferCodeResponse</returns>
        SubscriptionOfferCodeResponse SubscriptionOfferCodesGetInstance(string id, List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeCustomCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeOneTimeUseCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodePrices = default(List<string>?), int? limitCustomCodes = default(int?), int? limitOneTimeUseCodes = default(int?), int? limitPrices = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeCustomCodes">the fields to include for returned resources of type subscriptionOfferCodeCustomCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeOneTimeUseCodes">the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodePrices">the fields to include for returned resources of type subscriptionOfferCodePrices (optional)</param>
        /// <param name="limitCustomCodes">maximum number of related customCodes returned (when they are included) (optional)</param>
        /// <param name="limitOneTimeUseCodes">maximum number of related oneTimeUseCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of SubscriptionOfferCodeResponse</returns>
        ApiResponse<SubscriptionOfferCodeResponse> SubscriptionOfferCodesGetInstanceWithHttpInfo(string id, List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeCustomCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeOneTimeUseCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodePrices = default(List<string>?), int? limitCustomCodes = default(int?), int? limitOneTimeUseCodes = default(int?), int? limitPrices = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeOneTimeUseCodes">the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>SubscriptionOfferCodeOneTimeUseCodesResponse</returns>
        SubscriptionOfferCodeOneTimeUseCodesResponse SubscriptionOfferCodesOneTimeUseCodesGetToManyRelated(string id, List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeOneTimeUseCodes = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeOneTimeUseCodes">the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of SubscriptionOfferCodeOneTimeUseCodesResponse</returns>
        ApiResponse<SubscriptionOfferCodeOneTimeUseCodesResponse> SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeOneTimeUseCodes = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodePrices">the fields to include for returned resources of type subscriptionOfferCodePrices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>SubscriptionOfferCodePricesResponse</returns>
        SubscriptionOfferCodePricesResponse SubscriptionOfferCodesPricesGetToManyRelated(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), List<string>? fieldsSubscriptionOfferCodePrices = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodePrices">the fields to include for returned resources of type subscriptionOfferCodePrices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of SubscriptionOfferCodePricesResponse</returns>
        ApiResponse<SubscriptionOfferCodePricesResponse> SubscriptionOfferCodesPricesGetToManyRelatedWithHttpInfo(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), List<string>? fieldsSubscriptionOfferCodePrices = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionOfferCodeUpdateRequest">SubscriptionOfferCode representation</param>
        /// <returns>SubscriptionOfferCodeResponse</returns>
        SubscriptionOfferCodeResponse SubscriptionOfferCodesUpdateInstance(string id, SubscriptionOfferCodeUpdateRequest subscriptionOfferCodeUpdateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionOfferCodeUpdateRequest">SubscriptionOfferCode representation</param>
        /// <returns>ApiResponse of SubscriptionOfferCodeResponse</returns>
        ApiResponse<SubscriptionOfferCodeResponse> SubscriptionOfferCodesUpdateInstanceWithHttpInfo(string id, SubscriptionOfferCodeUpdateRequest subscriptionOfferCodeUpdateRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionOfferCodesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionOfferCodeCreateRequest">SubscriptionOfferCode representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionOfferCodeResponse</returns>
        System.Threading.Tasks.Task<SubscriptionOfferCodeResponse> SubscriptionOfferCodesCreateInstanceAsync(SubscriptionOfferCodeCreateRequest subscriptionOfferCodeCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionOfferCodeCreateRequest">SubscriptionOfferCode representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionOfferCodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionOfferCodeResponse>> SubscriptionOfferCodesCreateInstanceWithHttpInfoAsync(SubscriptionOfferCodeCreateRequest subscriptionOfferCodeCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionOfferCodeCustomCodes">the fields to include for returned resources of type subscriptionOfferCodeCustomCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionOfferCodeCustomCodesResponse</returns>
        System.Threading.Tasks.Task<SubscriptionOfferCodeCustomCodesResponse> SubscriptionOfferCodesCustomCodesGetToManyRelatedAsync(string id, List<string>? fieldsSubscriptionOfferCodeCustomCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionOfferCodeCustomCodes">the fields to include for returned resources of type subscriptionOfferCodeCustomCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionOfferCodeCustomCodesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionOfferCodeCustomCodesResponse>> SubscriptionOfferCodesCustomCodesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsSubscriptionOfferCodeCustomCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeCustomCodes">the fields to include for returned resources of type subscriptionOfferCodeCustomCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeOneTimeUseCodes">the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodePrices">the fields to include for returned resources of type subscriptionOfferCodePrices (optional)</param>
        /// <param name="limitCustomCodes">maximum number of related customCodes returned (when they are included) (optional)</param>
        /// <param name="limitOneTimeUseCodes">maximum number of related oneTimeUseCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionOfferCodeResponse</returns>
        System.Threading.Tasks.Task<SubscriptionOfferCodeResponse> SubscriptionOfferCodesGetInstanceAsync(string id, List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeCustomCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeOneTimeUseCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodePrices = default(List<string>?), int? limitCustomCodes = default(int?), int? limitOneTimeUseCodes = default(int?), int? limitPrices = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeCustomCodes">the fields to include for returned resources of type subscriptionOfferCodeCustomCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeOneTimeUseCodes">the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodePrices">the fields to include for returned resources of type subscriptionOfferCodePrices (optional)</param>
        /// <param name="limitCustomCodes">maximum number of related customCodes returned (when they are included) (optional)</param>
        /// <param name="limitOneTimeUseCodes">maximum number of related oneTimeUseCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionOfferCodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionOfferCodeResponse>> SubscriptionOfferCodesGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeCustomCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeOneTimeUseCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodePrices = default(List<string>?), int? limitCustomCodes = default(int?), int? limitOneTimeUseCodes = default(int?), int? limitPrices = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeOneTimeUseCodes">the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionOfferCodeOneTimeUseCodesResponse</returns>
        System.Threading.Tasks.Task<SubscriptionOfferCodeOneTimeUseCodesResponse> SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedAsync(string id, List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeOneTimeUseCodes = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeOneTimeUseCodes">the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionOfferCodeOneTimeUseCodesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionOfferCodeOneTimeUseCodesResponse>> SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeOneTimeUseCodes = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodePrices">the fields to include for returned resources of type subscriptionOfferCodePrices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionOfferCodePricesResponse</returns>
        System.Threading.Tasks.Task<SubscriptionOfferCodePricesResponse> SubscriptionOfferCodesPricesGetToManyRelatedAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), List<string>? fieldsSubscriptionOfferCodePrices = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodePrices">the fields to include for returned resources of type subscriptionOfferCodePrices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionOfferCodePricesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionOfferCodePricesResponse>> SubscriptionOfferCodesPricesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), List<string>? fieldsSubscriptionOfferCodePrices = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionOfferCodeUpdateRequest">SubscriptionOfferCode representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionOfferCodeResponse</returns>
        System.Threading.Tasks.Task<SubscriptionOfferCodeResponse> SubscriptionOfferCodesUpdateInstanceAsync(string id, SubscriptionOfferCodeUpdateRequest subscriptionOfferCodeUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionOfferCodeUpdateRequest">SubscriptionOfferCode representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionOfferCodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionOfferCodeResponse>> SubscriptionOfferCodesUpdateInstanceWithHttpInfoAsync(string id, SubscriptionOfferCodeUpdateRequest subscriptionOfferCodeUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionOfferCodesApi : ISubscriptionOfferCodesApiSync, ISubscriptionOfferCodesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubscriptionOfferCodesApi : IDisposable, ISubscriptionOfferCodesApi
    {
        private AppStoreConnect.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionOfferCodesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public SubscriptionOfferCodesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionOfferCodesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public SubscriptionOfferCodesApi(string basePath)
        {
            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionOfferCodesApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public SubscriptionOfferCodesApi(AppStoreConnect.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionOfferCodesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SubscriptionOfferCodesApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionOfferCodesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SubscriptionOfferCodesApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionOfferCodesApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SubscriptionOfferCodesApi(HttpClient client, AppStoreConnect.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionOfferCodesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public SubscriptionOfferCodesApi(AppStoreConnect.Client.ISynchronousClient client, AppStoreConnect.Client.IAsynchronousClient asyncClient, AppStoreConnect.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AppStoreConnect.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AppStoreConnect.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AppStoreConnect.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AppStoreConnect.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AppStoreConnect.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionOfferCodeCreateRequest">SubscriptionOfferCode representation</param>
        /// <returns>SubscriptionOfferCodeResponse</returns>
        public SubscriptionOfferCodeResponse SubscriptionOfferCodesCreateInstance(SubscriptionOfferCodeCreateRequest subscriptionOfferCodeCreateRequest)
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionOfferCodeResponse> localVarResponse = SubscriptionOfferCodesCreateInstanceWithHttpInfo(subscriptionOfferCodeCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionOfferCodeCreateRequest">SubscriptionOfferCode representation</param>
        /// <returns>ApiResponse of SubscriptionOfferCodeResponse</returns>
        public AppStoreConnect.Client.ApiResponse<SubscriptionOfferCodeResponse> SubscriptionOfferCodesCreateInstanceWithHttpInfo(SubscriptionOfferCodeCreateRequest subscriptionOfferCodeCreateRequest)
        {
            // verify the required parameter 'subscriptionOfferCodeCreateRequest' is set
            if (subscriptionOfferCodeCreateRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'subscriptionOfferCodeCreateRequest' when calling SubscriptionOfferCodesApi->SubscriptionOfferCodesCreateInstance");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = subscriptionOfferCodeCreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SubscriptionOfferCodeResponse>("/v1/subscriptionOfferCodes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionOfferCodesCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionOfferCodeCreateRequest">SubscriptionOfferCode representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionOfferCodeResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionOfferCodeResponse> SubscriptionOfferCodesCreateInstanceAsync(SubscriptionOfferCodeCreateRequest subscriptionOfferCodeCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionOfferCodeResponse> localVarResponse = await SubscriptionOfferCodesCreateInstanceWithHttpInfoAsync(subscriptionOfferCodeCreateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionOfferCodeCreateRequest">SubscriptionOfferCode representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionOfferCodeResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<SubscriptionOfferCodeResponse>> SubscriptionOfferCodesCreateInstanceWithHttpInfoAsync(SubscriptionOfferCodeCreateRequest subscriptionOfferCodeCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionOfferCodeCreateRequest' is set
            if (subscriptionOfferCodeCreateRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'subscriptionOfferCodeCreateRequest' when calling SubscriptionOfferCodesApi->SubscriptionOfferCodesCreateInstance");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = subscriptionOfferCodeCreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SubscriptionOfferCodeResponse>("/v1/subscriptionOfferCodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionOfferCodesCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionOfferCodeCustomCodes">the fields to include for returned resources of type subscriptionOfferCodeCustomCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>SubscriptionOfferCodeCustomCodesResponse</returns>
        public SubscriptionOfferCodeCustomCodesResponse SubscriptionOfferCodesCustomCodesGetToManyRelated(string id, List<string>? fieldsSubscriptionOfferCodeCustomCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionOfferCodeCustomCodesResponse> localVarResponse = SubscriptionOfferCodesCustomCodesGetToManyRelatedWithHttpInfo(id, fieldsSubscriptionOfferCodeCustomCodes, fieldsSubscriptionOfferCodes, limit, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionOfferCodeCustomCodes">the fields to include for returned resources of type subscriptionOfferCodeCustomCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of SubscriptionOfferCodeCustomCodesResponse</returns>
        public AppStoreConnect.Client.ApiResponse<SubscriptionOfferCodeCustomCodesResponse> SubscriptionOfferCodesCustomCodesGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsSubscriptionOfferCodeCustomCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionOfferCodesApi->SubscriptionOfferCodesCustomCodesGetToManyRelated");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsSubscriptionOfferCodeCustomCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionOfferCodeCustomCodes]", fieldsSubscriptionOfferCodeCustomCodes));
            }
            if (fieldsSubscriptionOfferCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionOfferCodes]", fieldsSubscriptionOfferCodes));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionOfferCodeCustomCodesResponse>("/v1/subscriptionOfferCodes/{id}/customCodes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionOfferCodesCustomCodesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionOfferCodeCustomCodes">the fields to include for returned resources of type subscriptionOfferCodeCustomCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionOfferCodeCustomCodesResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionOfferCodeCustomCodesResponse> SubscriptionOfferCodesCustomCodesGetToManyRelatedAsync(string id, List<string>? fieldsSubscriptionOfferCodeCustomCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionOfferCodeCustomCodesResponse> localVarResponse = await SubscriptionOfferCodesCustomCodesGetToManyRelatedWithHttpInfoAsync(id, fieldsSubscriptionOfferCodeCustomCodes, fieldsSubscriptionOfferCodes, limit, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionOfferCodeCustomCodes">the fields to include for returned resources of type subscriptionOfferCodeCustomCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionOfferCodeCustomCodesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<SubscriptionOfferCodeCustomCodesResponse>> SubscriptionOfferCodesCustomCodesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsSubscriptionOfferCodeCustomCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionOfferCodesApi->SubscriptionOfferCodesCustomCodesGetToManyRelated");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsSubscriptionOfferCodeCustomCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionOfferCodeCustomCodes]", fieldsSubscriptionOfferCodeCustomCodes));
            }
            if (fieldsSubscriptionOfferCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionOfferCodes]", fieldsSubscriptionOfferCodes));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SubscriptionOfferCodeCustomCodesResponse>("/v1/subscriptionOfferCodes/{id}/customCodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionOfferCodesCustomCodesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeCustomCodes">the fields to include for returned resources of type subscriptionOfferCodeCustomCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeOneTimeUseCodes">the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodePrices">the fields to include for returned resources of type subscriptionOfferCodePrices (optional)</param>
        /// <param name="limitCustomCodes">maximum number of related customCodes returned (when they are included) (optional)</param>
        /// <param name="limitOneTimeUseCodes">maximum number of related oneTimeUseCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <returns>SubscriptionOfferCodeResponse</returns>
        public SubscriptionOfferCodeResponse SubscriptionOfferCodesGetInstance(string id, List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeCustomCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeOneTimeUseCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodePrices = default(List<string>?), int? limitCustomCodes = default(int?), int? limitOneTimeUseCodes = default(int?), int? limitPrices = default(int?))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionOfferCodeResponse> localVarResponse = SubscriptionOfferCodesGetInstanceWithHttpInfo(id, fieldsSubscriptionOfferCodes, include, fieldsSubscriptionOfferCodeCustomCodes, fieldsSubscriptionOfferCodeOneTimeUseCodes, fieldsSubscriptionOfferCodePrices, limitCustomCodes, limitOneTimeUseCodes, limitPrices);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeCustomCodes">the fields to include for returned resources of type subscriptionOfferCodeCustomCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeOneTimeUseCodes">the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodePrices">the fields to include for returned resources of type subscriptionOfferCodePrices (optional)</param>
        /// <param name="limitCustomCodes">maximum number of related customCodes returned (when they are included) (optional)</param>
        /// <param name="limitOneTimeUseCodes">maximum number of related oneTimeUseCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of SubscriptionOfferCodeResponse</returns>
        public AppStoreConnect.Client.ApiResponse<SubscriptionOfferCodeResponse> SubscriptionOfferCodesGetInstanceWithHttpInfo(string id, List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeCustomCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeOneTimeUseCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodePrices = default(List<string>?), int? limitCustomCodes = default(int?), int? limitOneTimeUseCodes = default(int?), int? limitPrices = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionOfferCodesApi->SubscriptionOfferCodesGetInstance");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsSubscriptionOfferCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionOfferCodes]", fieldsSubscriptionOfferCodes));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (fieldsSubscriptionOfferCodeCustomCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionOfferCodeCustomCodes]", fieldsSubscriptionOfferCodeCustomCodes));
            }
            if (fieldsSubscriptionOfferCodeOneTimeUseCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionOfferCodeOneTimeUseCodes]", fieldsSubscriptionOfferCodeOneTimeUseCodes));
            }
            if (fieldsSubscriptionOfferCodePrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionOfferCodePrices]", fieldsSubscriptionOfferCodePrices));
            }
            if (limitCustomCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[customCodes]", limitCustomCodes));
            }
            if (limitOneTimeUseCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[oneTimeUseCodes]", limitOneTimeUseCodes));
            }
            if (limitPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[prices]", limitPrices));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionOfferCodeResponse>("/v1/subscriptionOfferCodes/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionOfferCodesGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeCustomCodes">the fields to include for returned resources of type subscriptionOfferCodeCustomCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeOneTimeUseCodes">the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodePrices">the fields to include for returned resources of type subscriptionOfferCodePrices (optional)</param>
        /// <param name="limitCustomCodes">maximum number of related customCodes returned (when they are included) (optional)</param>
        /// <param name="limitOneTimeUseCodes">maximum number of related oneTimeUseCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionOfferCodeResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionOfferCodeResponse> SubscriptionOfferCodesGetInstanceAsync(string id, List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeCustomCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeOneTimeUseCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodePrices = default(List<string>?), int? limitCustomCodes = default(int?), int? limitOneTimeUseCodes = default(int?), int? limitPrices = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionOfferCodeResponse> localVarResponse = await SubscriptionOfferCodesGetInstanceWithHttpInfoAsync(id, fieldsSubscriptionOfferCodes, include, fieldsSubscriptionOfferCodeCustomCodes, fieldsSubscriptionOfferCodeOneTimeUseCodes, fieldsSubscriptionOfferCodePrices, limitCustomCodes, limitOneTimeUseCodes, limitPrices, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeCustomCodes">the fields to include for returned resources of type subscriptionOfferCodeCustomCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeOneTimeUseCodes">the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodePrices">the fields to include for returned resources of type subscriptionOfferCodePrices (optional)</param>
        /// <param name="limitCustomCodes">maximum number of related customCodes returned (when they are included) (optional)</param>
        /// <param name="limitOneTimeUseCodes">maximum number of related oneTimeUseCodes returned (when they are included) (optional)</param>
        /// <param name="limitPrices">maximum number of related prices returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionOfferCodeResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<SubscriptionOfferCodeResponse>> SubscriptionOfferCodesGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeCustomCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeOneTimeUseCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodePrices = default(List<string>?), int? limitCustomCodes = default(int?), int? limitOneTimeUseCodes = default(int?), int? limitPrices = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionOfferCodesApi->SubscriptionOfferCodesGetInstance");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsSubscriptionOfferCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionOfferCodes]", fieldsSubscriptionOfferCodes));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (fieldsSubscriptionOfferCodeCustomCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionOfferCodeCustomCodes]", fieldsSubscriptionOfferCodeCustomCodes));
            }
            if (fieldsSubscriptionOfferCodeOneTimeUseCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionOfferCodeOneTimeUseCodes]", fieldsSubscriptionOfferCodeOneTimeUseCodes));
            }
            if (fieldsSubscriptionOfferCodePrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionOfferCodePrices]", fieldsSubscriptionOfferCodePrices));
            }
            if (limitCustomCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[customCodes]", limitCustomCodes));
            }
            if (limitOneTimeUseCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[oneTimeUseCodes]", limitOneTimeUseCodes));
            }
            if (limitPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[prices]", limitPrices));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SubscriptionOfferCodeResponse>("/v1/subscriptionOfferCodes/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionOfferCodesGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeOneTimeUseCodes">the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>SubscriptionOfferCodeOneTimeUseCodesResponse</returns>
        public SubscriptionOfferCodeOneTimeUseCodesResponse SubscriptionOfferCodesOneTimeUseCodesGetToManyRelated(string id, List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeOneTimeUseCodes = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionOfferCodeOneTimeUseCodesResponse> localVarResponse = SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedWithHttpInfo(id, fieldsSubscriptionOfferCodes, fieldsSubscriptionOfferCodeOneTimeUseCodes, limit, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeOneTimeUseCodes">the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of SubscriptionOfferCodeOneTimeUseCodesResponse</returns>
        public AppStoreConnect.Client.ApiResponse<SubscriptionOfferCodeOneTimeUseCodesResponse> SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeOneTimeUseCodes = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionOfferCodesApi->SubscriptionOfferCodesOneTimeUseCodesGetToManyRelated");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsSubscriptionOfferCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionOfferCodes]", fieldsSubscriptionOfferCodes));
            }
            if (fieldsSubscriptionOfferCodeOneTimeUseCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionOfferCodeOneTimeUseCodes]", fieldsSubscriptionOfferCodeOneTimeUseCodes));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionOfferCodeOneTimeUseCodesResponse>("/v1/subscriptionOfferCodes/{id}/oneTimeUseCodes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionOfferCodesOneTimeUseCodesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeOneTimeUseCodes">the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionOfferCodeOneTimeUseCodesResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionOfferCodeOneTimeUseCodesResponse> SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedAsync(string id, List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeOneTimeUseCodes = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionOfferCodeOneTimeUseCodesResponse> localVarResponse = await SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedWithHttpInfoAsync(id, fieldsSubscriptionOfferCodes, fieldsSubscriptionOfferCodeOneTimeUseCodes, limit, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionOfferCodes">the fields to include for returned resources of type subscriptionOfferCodes (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodeOneTimeUseCodes">the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionOfferCodeOneTimeUseCodesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<SubscriptionOfferCodeOneTimeUseCodesResponse>> SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsSubscriptionOfferCodes = default(List<string>?), List<string>? fieldsSubscriptionOfferCodeOneTimeUseCodes = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionOfferCodesApi->SubscriptionOfferCodesOneTimeUseCodesGetToManyRelated");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsSubscriptionOfferCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionOfferCodes]", fieldsSubscriptionOfferCodes));
            }
            if (fieldsSubscriptionOfferCodeOneTimeUseCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionOfferCodeOneTimeUseCodes]", fieldsSubscriptionOfferCodeOneTimeUseCodes));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SubscriptionOfferCodeOneTimeUseCodesResponse>("/v1/subscriptionOfferCodes/{id}/oneTimeUseCodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionOfferCodesOneTimeUseCodesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodePrices">the fields to include for returned resources of type subscriptionOfferCodePrices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>SubscriptionOfferCodePricesResponse</returns>
        public SubscriptionOfferCodePricesResponse SubscriptionOfferCodesPricesGetToManyRelated(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), List<string>? fieldsSubscriptionOfferCodePrices = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionOfferCodePricesResponse> localVarResponse = SubscriptionOfferCodesPricesGetToManyRelatedWithHttpInfo(id, filterTerritory, fieldsSubscriptionPricePoints, fieldsTerritories, fieldsSubscriptionOfferCodePrices, limit, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodePrices">the fields to include for returned resources of type subscriptionOfferCodePrices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of SubscriptionOfferCodePricesResponse</returns>
        public AppStoreConnect.Client.ApiResponse<SubscriptionOfferCodePricesResponse> SubscriptionOfferCodesPricesGetToManyRelatedWithHttpInfo(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), List<string>? fieldsSubscriptionOfferCodePrices = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionOfferCodesApi->SubscriptionOfferCodesPricesGetToManyRelated");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterTerritory != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[territory]", filterTerritory));
            }
            if (fieldsSubscriptionPricePoints != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionPricePoints]", fieldsSubscriptionPricePoints));
            }
            if (fieldsTerritories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[territories]", fieldsTerritories));
            }
            if (fieldsSubscriptionOfferCodePrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionOfferCodePrices]", fieldsSubscriptionOfferCodePrices));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionOfferCodePricesResponse>("/v1/subscriptionOfferCodes/{id}/prices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionOfferCodesPricesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodePrices">the fields to include for returned resources of type subscriptionOfferCodePrices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionOfferCodePricesResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionOfferCodePricesResponse> SubscriptionOfferCodesPricesGetToManyRelatedAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), List<string>? fieldsSubscriptionOfferCodePrices = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionOfferCodePricesResponse> localVarResponse = await SubscriptionOfferCodesPricesGetToManyRelatedWithHttpInfoAsync(id, filterTerritory, fieldsSubscriptionPricePoints, fieldsTerritories, fieldsSubscriptionOfferCodePrices, limit, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsSubscriptionPricePoints">the fields to include for returned resources of type subscriptionPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="fieldsSubscriptionOfferCodePrices">the fields to include for returned resources of type subscriptionOfferCodePrices (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionOfferCodePricesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<SubscriptionOfferCodePricesResponse>> SubscriptionOfferCodesPricesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsSubscriptionPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), List<string>? fieldsSubscriptionOfferCodePrices = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionOfferCodesApi->SubscriptionOfferCodesPricesGetToManyRelated");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterTerritory != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[territory]", filterTerritory));
            }
            if (fieldsSubscriptionPricePoints != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionPricePoints]", fieldsSubscriptionPricePoints));
            }
            if (fieldsTerritories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[territories]", fieldsTerritories));
            }
            if (fieldsSubscriptionOfferCodePrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionOfferCodePrices]", fieldsSubscriptionOfferCodePrices));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SubscriptionOfferCodePricesResponse>("/v1/subscriptionOfferCodes/{id}/prices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionOfferCodesPricesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionOfferCodeUpdateRequest">SubscriptionOfferCode representation</param>
        /// <returns>SubscriptionOfferCodeResponse</returns>
        public SubscriptionOfferCodeResponse SubscriptionOfferCodesUpdateInstance(string id, SubscriptionOfferCodeUpdateRequest subscriptionOfferCodeUpdateRequest)
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionOfferCodeResponse> localVarResponse = SubscriptionOfferCodesUpdateInstanceWithHttpInfo(id, subscriptionOfferCodeUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionOfferCodeUpdateRequest">SubscriptionOfferCode representation</param>
        /// <returns>ApiResponse of SubscriptionOfferCodeResponse</returns>
        public AppStoreConnect.Client.ApiResponse<SubscriptionOfferCodeResponse> SubscriptionOfferCodesUpdateInstanceWithHttpInfo(string id, SubscriptionOfferCodeUpdateRequest subscriptionOfferCodeUpdateRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionOfferCodesApi->SubscriptionOfferCodesUpdateInstance");

            // verify the required parameter 'subscriptionOfferCodeUpdateRequest' is set
            if (subscriptionOfferCodeUpdateRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'subscriptionOfferCodeUpdateRequest' when calling SubscriptionOfferCodesApi->SubscriptionOfferCodesUpdateInstance");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = subscriptionOfferCodeUpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<SubscriptionOfferCodeResponse>("/v1/subscriptionOfferCodes/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionOfferCodesUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionOfferCodeUpdateRequest">SubscriptionOfferCode representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionOfferCodeResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionOfferCodeResponse> SubscriptionOfferCodesUpdateInstanceAsync(string id, SubscriptionOfferCodeUpdateRequest subscriptionOfferCodeUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<SubscriptionOfferCodeResponse> localVarResponse = await SubscriptionOfferCodesUpdateInstanceWithHttpInfoAsync(id, subscriptionOfferCodeUpdateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="subscriptionOfferCodeUpdateRequest">SubscriptionOfferCode representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionOfferCodeResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<SubscriptionOfferCodeResponse>> SubscriptionOfferCodesUpdateInstanceWithHttpInfoAsync(string id, SubscriptionOfferCodeUpdateRequest subscriptionOfferCodeUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionOfferCodesApi->SubscriptionOfferCodesUpdateInstance");

            // verify the required parameter 'subscriptionOfferCodeUpdateRequest' is set
            if (subscriptionOfferCodeUpdateRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'subscriptionOfferCodeUpdateRequest' when calling SubscriptionOfferCodesApi->SubscriptionOfferCodesUpdateInstance");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = subscriptionOfferCodeUpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<SubscriptionOfferCodeResponse>("/v1/subscriptionOfferCodes/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubscriptionOfferCodesUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
