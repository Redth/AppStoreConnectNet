/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AppStoreConnect.Client;
using AppStoreConnect.Model;

namespace AppStoreConnect.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppPriceSchedulesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEndDate">filter by attribute &#39;endDate&#39; (optional)</param>
        /// <param name="filterStartDate">filter by attribute &#39;startDate&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="fieldsAppPricePoints">the fields to include for returned resources of type appPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>AppPricesV2Response</returns>
        AppPricesV2Response AppPriceSchedulesAutomaticPricesGetToManyRelated(string id, List<string>? filterEndDate = default(List<string>?), List<string>? filterStartDate = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? fieldsAppPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEndDate">filter by attribute &#39;endDate&#39; (optional)</param>
        /// <param name="filterStartDate">filter by attribute &#39;startDate&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="fieldsAppPricePoints">the fields to include for returned resources of type appPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of AppPricesV2Response</returns>
        ApiResponse<AppPricesV2Response> AppPriceSchedulesAutomaticPricesGetToManyRelatedWithHttpInfo(string id, List<string>? filterEndDate = default(List<string>?), List<string>? filterStartDate = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? fieldsAppPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <returns>TerritoryResponse</returns>
        TerritoryResponse AppPriceSchedulesBaseTerritoryGetToOneRelated(string id, List<string>? fieldsTerritories = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <returns>ApiResponse of TerritoryResponse</returns>
        ApiResponse<TerritoryResponse> AppPriceSchedulesBaseTerritoryGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsTerritories = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appPriceScheduleCreateRequest">AppPriceSchedule representation</param>
        /// <returns>AppPriceScheduleResponse</returns>
        AppPriceScheduleResponse AppPriceSchedulesCreateInstance(AppPriceScheduleCreateRequest appPriceScheduleCreateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appPriceScheduleCreateRequest">AppPriceSchedule representation</param>
        /// <returns>ApiResponse of AppPriceScheduleResponse</returns>
        ApiResponse<AppPriceScheduleResponse> AppPriceSchedulesCreateInstanceWithHttpInfo(AppPriceScheduleCreateRequest appPriceScheduleCreateRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppPriceSchedules">the fields to include for returned resources of type appPriceSchedules (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limitAutomaticPrices">maximum number of related automaticPrices returned (when they are included) (optional)</param>
        /// <param name="limitManualPrices">maximum number of related manualPrices returned (when they are included) (optional)</param>
        /// <returns>AppPriceScheduleResponse</returns>
        AppPriceScheduleResponse AppPriceSchedulesGetInstance(string id, List<string>? fieldsAppPriceSchedules = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limitAutomaticPrices = default(int?), int? limitManualPrices = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppPriceSchedules">the fields to include for returned resources of type appPriceSchedules (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limitAutomaticPrices">maximum number of related automaticPrices returned (when they are included) (optional)</param>
        /// <param name="limitManualPrices">maximum number of related manualPrices returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppPriceScheduleResponse</returns>
        ApiResponse<AppPriceScheduleResponse> AppPriceSchedulesGetInstanceWithHttpInfo(string id, List<string>? fieldsAppPriceSchedules = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limitAutomaticPrices = default(int?), int? limitManualPrices = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEndDate">filter by attribute &#39;endDate&#39; (optional)</param>
        /// <param name="filterStartDate">filter by attribute &#39;startDate&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="fieldsAppPricePoints">the fields to include for returned resources of type appPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>AppPricesV2Response</returns>
        AppPricesV2Response AppPriceSchedulesManualPricesGetToManyRelated(string id, List<string>? filterEndDate = default(List<string>?), List<string>? filterStartDate = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? fieldsAppPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEndDate">filter by attribute &#39;endDate&#39; (optional)</param>
        /// <param name="filterStartDate">filter by attribute &#39;startDate&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="fieldsAppPricePoints">the fields to include for returned resources of type appPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of AppPricesV2Response</returns>
        ApiResponse<AppPricesV2Response> AppPriceSchedulesManualPricesGetToManyRelatedWithHttpInfo(string id, List<string>? filterEndDate = default(List<string>?), List<string>? filterStartDate = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? fieldsAppPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppPriceSchedulesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEndDate">filter by attribute &#39;endDate&#39; (optional)</param>
        /// <param name="filterStartDate">filter by attribute &#39;startDate&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="fieldsAppPricePoints">the fields to include for returned resources of type appPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppPricesV2Response</returns>
        System.Threading.Tasks.Task<AppPricesV2Response> AppPriceSchedulesAutomaticPricesGetToManyRelatedAsync(string id, List<string>? filterEndDate = default(List<string>?), List<string>? filterStartDate = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? fieldsAppPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEndDate">filter by attribute &#39;endDate&#39; (optional)</param>
        /// <param name="filterStartDate">filter by attribute &#39;startDate&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="fieldsAppPricePoints">the fields to include for returned resources of type appPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppPricesV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppPricesV2Response>> AppPriceSchedulesAutomaticPricesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterEndDate = default(List<string>?), List<string>? filterStartDate = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? fieldsAppPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TerritoryResponse</returns>
        System.Threading.Tasks.Task<TerritoryResponse> AppPriceSchedulesBaseTerritoryGetToOneRelatedAsync(string id, List<string>? fieldsTerritories = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TerritoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TerritoryResponse>> AppPriceSchedulesBaseTerritoryGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsTerritories = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appPriceScheduleCreateRequest">AppPriceSchedule representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppPriceScheduleResponse</returns>
        System.Threading.Tasks.Task<AppPriceScheduleResponse> AppPriceSchedulesCreateInstanceAsync(AppPriceScheduleCreateRequest appPriceScheduleCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appPriceScheduleCreateRequest">AppPriceSchedule representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppPriceScheduleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppPriceScheduleResponse>> AppPriceSchedulesCreateInstanceWithHttpInfoAsync(AppPriceScheduleCreateRequest appPriceScheduleCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppPriceSchedules">the fields to include for returned resources of type appPriceSchedules (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limitAutomaticPrices">maximum number of related automaticPrices returned (when they are included) (optional)</param>
        /// <param name="limitManualPrices">maximum number of related manualPrices returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppPriceScheduleResponse</returns>
        System.Threading.Tasks.Task<AppPriceScheduleResponse> AppPriceSchedulesGetInstanceAsync(string id, List<string>? fieldsAppPriceSchedules = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limitAutomaticPrices = default(int?), int? limitManualPrices = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppPriceSchedules">the fields to include for returned resources of type appPriceSchedules (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limitAutomaticPrices">maximum number of related automaticPrices returned (when they are included) (optional)</param>
        /// <param name="limitManualPrices">maximum number of related manualPrices returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppPriceScheduleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppPriceScheduleResponse>> AppPriceSchedulesGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsAppPriceSchedules = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limitAutomaticPrices = default(int?), int? limitManualPrices = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEndDate">filter by attribute &#39;endDate&#39; (optional)</param>
        /// <param name="filterStartDate">filter by attribute &#39;startDate&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="fieldsAppPricePoints">the fields to include for returned resources of type appPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppPricesV2Response</returns>
        System.Threading.Tasks.Task<AppPricesV2Response> AppPriceSchedulesManualPricesGetToManyRelatedAsync(string id, List<string>? filterEndDate = default(List<string>?), List<string>? filterStartDate = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? fieldsAppPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEndDate">filter by attribute &#39;endDate&#39; (optional)</param>
        /// <param name="filterStartDate">filter by attribute &#39;startDate&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="fieldsAppPricePoints">the fields to include for returned resources of type appPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppPricesV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppPricesV2Response>> AppPriceSchedulesManualPricesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterEndDate = default(List<string>?), List<string>? filterStartDate = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? fieldsAppPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppPriceSchedulesApi : IAppPriceSchedulesApiSync, IAppPriceSchedulesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AppPriceSchedulesApi : IDisposable, IAppPriceSchedulesApi
    {
        private AppStoreConnect.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AppPriceSchedulesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public AppPriceSchedulesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppPriceSchedulesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public AppPriceSchedulesApi(string basePath)
        {
            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppPriceSchedulesApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public AppPriceSchedulesApi(AppStoreConnect.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppPriceSchedulesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AppPriceSchedulesApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppPriceSchedulesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AppPriceSchedulesApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppPriceSchedulesApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AppPriceSchedulesApi(HttpClient client, AppStoreConnect.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppPriceSchedulesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public AppPriceSchedulesApi(AppStoreConnect.Client.ISynchronousClient client, AppStoreConnect.Client.IAsynchronousClient asyncClient, AppStoreConnect.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AppStoreConnect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AppStoreConnect.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AppStoreConnect.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AppStoreConnect.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AppStoreConnect.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AppStoreConnect.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEndDate">filter by attribute &#39;endDate&#39; (optional)</param>
        /// <param name="filterStartDate">filter by attribute &#39;startDate&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="fieldsAppPricePoints">the fields to include for returned resources of type appPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>AppPricesV2Response</returns>
        public AppPricesV2Response AppPriceSchedulesAutomaticPricesGetToManyRelated(string id, List<string>? filterEndDate = default(List<string>?), List<string>? filterStartDate = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? fieldsAppPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Client.ApiResponse<AppPricesV2Response> localVarResponse = AppPriceSchedulesAutomaticPricesGetToManyRelatedWithHttpInfo(id, filterEndDate, filterStartDate, filterTerritory, fieldsAppPrices, fieldsAppPricePoints, fieldsTerritories, limit, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEndDate">filter by attribute &#39;endDate&#39; (optional)</param>
        /// <param name="filterStartDate">filter by attribute &#39;startDate&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="fieldsAppPricePoints">the fields to include for returned resources of type appPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of AppPricesV2Response</returns>
        public AppStoreConnect.Client.ApiResponse<AppPricesV2Response> AppPriceSchedulesAutomaticPricesGetToManyRelatedWithHttpInfo(string id, List<string>? filterEndDate = default(List<string>?), List<string>? filterStartDate = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? fieldsAppPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppPriceSchedulesApi->AppPriceSchedulesAutomaticPricesGetToManyRelated");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterEndDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[endDate]", filterEndDate));
            }
            if (filterStartDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[startDate]", filterStartDate));
            }
            if (filterTerritory != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[territory]", filterTerritory));
            }
            if (fieldsAppPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPrices]", fieldsAppPrices));
            }
            if (fieldsAppPricePoints != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPricePoints]", fieldsAppPricePoints));
            }
            if (fieldsTerritories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[territories]", fieldsTerritories));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppPricesV2Response>("/v1/appPriceSchedules/{id}/automaticPrices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppPriceSchedulesAutomaticPricesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEndDate">filter by attribute &#39;endDate&#39; (optional)</param>
        /// <param name="filterStartDate">filter by attribute &#39;startDate&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="fieldsAppPricePoints">the fields to include for returned resources of type appPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppPricesV2Response</returns>
        public async System.Threading.Tasks.Task<AppPricesV2Response> AppPriceSchedulesAutomaticPricesGetToManyRelatedAsync(string id, List<string>? filterEndDate = default(List<string>?), List<string>? filterStartDate = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? fieldsAppPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<AppPricesV2Response> localVarResponse = await AppPriceSchedulesAutomaticPricesGetToManyRelatedWithHttpInfoAsync(id, filterEndDate, filterStartDate, filterTerritory, fieldsAppPrices, fieldsAppPricePoints, fieldsTerritories, limit, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEndDate">filter by attribute &#39;endDate&#39; (optional)</param>
        /// <param name="filterStartDate">filter by attribute &#39;startDate&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="fieldsAppPricePoints">the fields to include for returned resources of type appPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppPricesV2Response)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<AppPricesV2Response>> AppPriceSchedulesAutomaticPricesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterEndDate = default(List<string>?), List<string>? filterStartDate = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? fieldsAppPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppPriceSchedulesApi->AppPriceSchedulesAutomaticPricesGetToManyRelated");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterEndDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[endDate]", filterEndDate));
            }
            if (filterStartDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[startDate]", filterStartDate));
            }
            if (filterTerritory != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[territory]", filterTerritory));
            }
            if (fieldsAppPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPrices]", fieldsAppPrices));
            }
            if (fieldsAppPricePoints != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPricePoints]", fieldsAppPricePoints));
            }
            if (fieldsTerritories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[territories]", fieldsTerritories));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppPricesV2Response>("/v1/appPriceSchedules/{id}/automaticPrices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppPriceSchedulesAutomaticPricesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <returns>TerritoryResponse</returns>
        public TerritoryResponse AppPriceSchedulesBaseTerritoryGetToOneRelated(string id, List<string>? fieldsTerritories = default(List<string>?))
        {
            AppStoreConnect.Client.ApiResponse<TerritoryResponse> localVarResponse = AppPriceSchedulesBaseTerritoryGetToOneRelatedWithHttpInfo(id, fieldsTerritories);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <returns>ApiResponse of TerritoryResponse</returns>
        public AppStoreConnect.Client.ApiResponse<TerritoryResponse> AppPriceSchedulesBaseTerritoryGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsTerritories = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppPriceSchedulesApi->AppPriceSchedulesBaseTerritoryGetToOneRelated");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsTerritories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[territories]", fieldsTerritories));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TerritoryResponse>("/v1/appPriceSchedules/{id}/baseTerritory", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppPriceSchedulesBaseTerritoryGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TerritoryResponse</returns>
        public async System.Threading.Tasks.Task<TerritoryResponse> AppPriceSchedulesBaseTerritoryGetToOneRelatedAsync(string id, List<string>? fieldsTerritories = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<TerritoryResponse> localVarResponse = await AppPriceSchedulesBaseTerritoryGetToOneRelatedWithHttpInfoAsync(id, fieldsTerritories, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TerritoryResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<TerritoryResponse>> AppPriceSchedulesBaseTerritoryGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsTerritories = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppPriceSchedulesApi->AppPriceSchedulesBaseTerritoryGetToOneRelated");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsTerritories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[territories]", fieldsTerritories));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TerritoryResponse>("/v1/appPriceSchedules/{id}/baseTerritory", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppPriceSchedulesBaseTerritoryGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appPriceScheduleCreateRequest">AppPriceSchedule representation</param>
        /// <returns>AppPriceScheduleResponse</returns>
        public AppPriceScheduleResponse AppPriceSchedulesCreateInstance(AppPriceScheduleCreateRequest appPriceScheduleCreateRequest)
        {
            AppStoreConnect.Client.ApiResponse<AppPriceScheduleResponse> localVarResponse = AppPriceSchedulesCreateInstanceWithHttpInfo(appPriceScheduleCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appPriceScheduleCreateRequest">AppPriceSchedule representation</param>
        /// <returns>ApiResponse of AppPriceScheduleResponse</returns>
        public AppStoreConnect.Client.ApiResponse<AppPriceScheduleResponse> AppPriceSchedulesCreateInstanceWithHttpInfo(AppPriceScheduleCreateRequest appPriceScheduleCreateRequest)
        {
            // verify the required parameter 'appPriceScheduleCreateRequest' is set
            if (appPriceScheduleCreateRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'appPriceScheduleCreateRequest' when calling AppPriceSchedulesApi->AppPriceSchedulesCreateInstance");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = appPriceScheduleCreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AppPriceScheduleResponse>("/v1/appPriceSchedules", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppPriceSchedulesCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appPriceScheduleCreateRequest">AppPriceSchedule representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppPriceScheduleResponse</returns>
        public async System.Threading.Tasks.Task<AppPriceScheduleResponse> AppPriceSchedulesCreateInstanceAsync(AppPriceScheduleCreateRequest appPriceScheduleCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<AppPriceScheduleResponse> localVarResponse = await AppPriceSchedulesCreateInstanceWithHttpInfoAsync(appPriceScheduleCreateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appPriceScheduleCreateRequest">AppPriceSchedule representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppPriceScheduleResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<AppPriceScheduleResponse>> AppPriceSchedulesCreateInstanceWithHttpInfoAsync(AppPriceScheduleCreateRequest appPriceScheduleCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appPriceScheduleCreateRequest' is set
            if (appPriceScheduleCreateRequest == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'appPriceScheduleCreateRequest' when calling AppPriceSchedulesApi->AppPriceSchedulesCreateInstance");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = appPriceScheduleCreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AppPriceScheduleResponse>("/v1/appPriceSchedules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppPriceSchedulesCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppPriceSchedules">the fields to include for returned resources of type appPriceSchedules (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limitAutomaticPrices">maximum number of related automaticPrices returned (when they are included) (optional)</param>
        /// <param name="limitManualPrices">maximum number of related manualPrices returned (when they are included) (optional)</param>
        /// <returns>AppPriceScheduleResponse</returns>
        public AppPriceScheduleResponse AppPriceSchedulesGetInstance(string id, List<string>? fieldsAppPriceSchedules = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limitAutomaticPrices = default(int?), int? limitManualPrices = default(int?))
        {
            AppStoreConnect.Client.ApiResponse<AppPriceScheduleResponse> localVarResponse = AppPriceSchedulesGetInstanceWithHttpInfo(id, fieldsAppPriceSchedules, include, fieldsAppPrices, fieldsTerritories, limitAutomaticPrices, limitManualPrices);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppPriceSchedules">the fields to include for returned resources of type appPriceSchedules (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limitAutomaticPrices">maximum number of related automaticPrices returned (when they are included) (optional)</param>
        /// <param name="limitManualPrices">maximum number of related manualPrices returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppPriceScheduleResponse</returns>
        public AppStoreConnect.Client.ApiResponse<AppPriceScheduleResponse> AppPriceSchedulesGetInstanceWithHttpInfo(string id, List<string>? fieldsAppPriceSchedules = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limitAutomaticPrices = default(int?), int? limitManualPrices = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppPriceSchedulesApi->AppPriceSchedulesGetInstance");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppPriceSchedules != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPriceSchedules]", fieldsAppPriceSchedules));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (fieldsAppPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPrices]", fieldsAppPrices));
            }
            if (fieldsTerritories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[territories]", fieldsTerritories));
            }
            if (limitAutomaticPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[automaticPrices]", limitAutomaticPrices));
            }
            if (limitManualPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[manualPrices]", limitManualPrices));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppPriceScheduleResponse>("/v1/appPriceSchedules/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppPriceSchedulesGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppPriceSchedules">the fields to include for returned resources of type appPriceSchedules (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limitAutomaticPrices">maximum number of related automaticPrices returned (when they are included) (optional)</param>
        /// <param name="limitManualPrices">maximum number of related manualPrices returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppPriceScheduleResponse</returns>
        public async System.Threading.Tasks.Task<AppPriceScheduleResponse> AppPriceSchedulesGetInstanceAsync(string id, List<string>? fieldsAppPriceSchedules = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limitAutomaticPrices = default(int?), int? limitManualPrices = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<AppPriceScheduleResponse> localVarResponse = await AppPriceSchedulesGetInstanceWithHttpInfoAsync(id, fieldsAppPriceSchedules, include, fieldsAppPrices, fieldsTerritories, limitAutomaticPrices, limitManualPrices, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppPriceSchedules">the fields to include for returned resources of type appPriceSchedules (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limitAutomaticPrices">maximum number of related automaticPrices returned (when they are included) (optional)</param>
        /// <param name="limitManualPrices">maximum number of related manualPrices returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppPriceScheduleResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<AppPriceScheduleResponse>> AppPriceSchedulesGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsAppPriceSchedules = default(List<string>?), List<string>? include = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limitAutomaticPrices = default(int?), int? limitManualPrices = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppPriceSchedulesApi->AppPriceSchedulesGetInstance");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppPriceSchedules != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPriceSchedules]", fieldsAppPriceSchedules));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (fieldsAppPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPrices]", fieldsAppPrices));
            }
            if (fieldsTerritories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[territories]", fieldsTerritories));
            }
            if (limitAutomaticPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[automaticPrices]", limitAutomaticPrices));
            }
            if (limitManualPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit[manualPrices]", limitManualPrices));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppPriceScheduleResponse>("/v1/appPriceSchedules/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppPriceSchedulesGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEndDate">filter by attribute &#39;endDate&#39; (optional)</param>
        /// <param name="filterStartDate">filter by attribute &#39;startDate&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="fieldsAppPricePoints">the fields to include for returned resources of type appPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>AppPricesV2Response</returns>
        public AppPricesV2Response AppPriceSchedulesManualPricesGetToManyRelated(string id, List<string>? filterEndDate = default(List<string>?), List<string>? filterStartDate = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? fieldsAppPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Client.ApiResponse<AppPricesV2Response> localVarResponse = AppPriceSchedulesManualPricesGetToManyRelatedWithHttpInfo(id, filterEndDate, filterStartDate, filterTerritory, fieldsAppPrices, fieldsAppPricePoints, fieldsTerritories, limit, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEndDate">filter by attribute &#39;endDate&#39; (optional)</param>
        /// <param name="filterStartDate">filter by attribute &#39;startDate&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="fieldsAppPricePoints">the fields to include for returned resources of type appPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of AppPricesV2Response</returns>
        public AppStoreConnect.Client.ApiResponse<AppPricesV2Response> AppPriceSchedulesManualPricesGetToManyRelatedWithHttpInfo(string id, List<string>? filterEndDate = default(List<string>?), List<string>? filterStartDate = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? fieldsAppPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppPriceSchedulesApi->AppPriceSchedulesManualPricesGetToManyRelated");

            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterEndDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[endDate]", filterEndDate));
            }
            if (filterStartDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[startDate]", filterStartDate));
            }
            if (filterTerritory != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[territory]", filterTerritory));
            }
            if (fieldsAppPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPrices]", fieldsAppPrices));
            }
            if (fieldsAppPricePoints != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPricePoints]", fieldsAppPricePoints));
            }
            if (fieldsTerritories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[territories]", fieldsTerritories));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppPricesV2Response>("/v1/appPriceSchedules/{id}/manualPrices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppPriceSchedulesManualPricesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEndDate">filter by attribute &#39;endDate&#39; (optional)</param>
        /// <param name="filterStartDate">filter by attribute &#39;startDate&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="fieldsAppPricePoints">the fields to include for returned resources of type appPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppPricesV2Response</returns>
        public async System.Threading.Tasks.Task<AppPricesV2Response> AppPriceSchedulesManualPricesGetToManyRelatedAsync(string id, List<string>? filterEndDate = default(List<string>?), List<string>? filterStartDate = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? fieldsAppPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            AppStoreConnect.Client.ApiResponse<AppPricesV2Response> localVarResponse = await AppPriceSchedulesManualPricesGetToManyRelatedWithHttpInfoAsync(id, filterEndDate, filterStartDate, filterTerritory, fieldsAppPrices, fieldsAppPricePoints, fieldsTerritories, limit, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEndDate">filter by attribute &#39;endDate&#39; (optional)</param>
        /// <param name="filterStartDate">filter by attribute &#39;startDate&#39; (optional)</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="fieldsAppPricePoints">the fields to include for returned resources of type appPricePoints (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppPricesV2Response)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Client.ApiResponse<AppPricesV2Response>> AppPriceSchedulesManualPricesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterEndDate = default(List<string>?), List<string>? filterStartDate = default(List<string>?), List<string>? filterTerritory = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? fieldsAppPricePoints = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Client.ApiException(400, "Missing required parameter 'id' when calling AppPriceSchedulesApi->AppPriceSchedulesManualPricesGetToManyRelated");


            AppStoreConnect.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterEndDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[endDate]", filterEndDate));
            }
            if (filterStartDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[startDate]", filterStartDate));
            }
            if (filterTerritory != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "filter[territory]", filterTerritory));
            }
            if (fieldsAppPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPrices]", fieldsAppPrices));
            }
            if (fieldsAppPricePoints != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPricePoints]", fieldsAppPricePoints));
            }
            if (fieldsTerritories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "fields[territories]", fieldsTerritories));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppPricesV2Response>("/v1/appPriceSchedules/{id}/manualPrices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppPriceSchedulesManualPricesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
