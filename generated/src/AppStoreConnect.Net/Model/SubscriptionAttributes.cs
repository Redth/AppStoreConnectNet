/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Model
{
    /// <summary>
    /// SubscriptionAttributes
    /// </summary>
    [DataContract(Name = "Subscription_attributes")]
    public partial class SubscriptionAttributes : IEquatable<SubscriptionAttributes>, IValidatableObject
    {
        /// <summary>
        /// Defines State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum MISSINGMETADATA for value: MISSING_METADATA
            /// </summary>
            [EnumMember(Value = "MISSING_METADATA")]
            MISSINGMETADATA = 1,

            /// <summary>
            /// Enum READYTOSUBMIT for value: READY_TO_SUBMIT
            /// </summary>
            [EnumMember(Value = "READY_TO_SUBMIT")]
            READYTOSUBMIT = 2,

            /// <summary>
            /// Enum WAITINGFORREVIEW for value: WAITING_FOR_REVIEW
            /// </summary>
            [EnumMember(Value = "WAITING_FOR_REVIEW")]
            WAITINGFORREVIEW = 3,

            /// <summary>
            /// Enum INREVIEW for value: IN_REVIEW
            /// </summary>
            [EnumMember(Value = "IN_REVIEW")]
            INREVIEW = 4,

            /// <summary>
            /// Enum DEVELOPERACTIONNEEDED for value: DEVELOPER_ACTION_NEEDED
            /// </summary>
            [EnumMember(Value = "DEVELOPER_ACTION_NEEDED")]
            DEVELOPERACTIONNEEDED = 5,

            /// <summary>
            /// Enum PENDINGBINARYAPPROVAL for value: PENDING_BINARY_APPROVAL
            /// </summary>
            [EnumMember(Value = "PENDING_BINARY_APPROVAL")]
            PENDINGBINARYAPPROVAL = 6,

            /// <summary>
            /// Enum APPROVED for value: APPROVED
            /// </summary>
            [EnumMember(Value = "APPROVED")]
            APPROVED = 7,

            /// <summary>
            /// Enum DEVELOPERREMOVEDFROMSALE for value: DEVELOPER_REMOVED_FROM_SALE
            /// </summary>
            [EnumMember(Value = "DEVELOPER_REMOVED_FROM_SALE")]
            DEVELOPERREMOVEDFROMSALE = 8,

            /// <summary>
            /// Enum REMOVEDFROMSALE for value: REMOVED_FROM_SALE
            /// </summary>
            [EnumMember(Value = "REMOVED_FROM_SALE")]
            REMOVEDFROMSALE = 9,

            /// <summary>
            /// Enum REJECTED for value: REJECTED
            /// </summary>
            [EnumMember(Value = "REJECTED")]
            REJECTED = 10

        }


        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Defines SubscriptionPeriod
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SubscriptionPeriodEnum
        {
            /// <summary>
            /// Enum ONEWEEK for value: ONE_WEEK
            /// </summary>
            [EnumMember(Value = "ONE_WEEK")]
            ONEWEEK = 1,

            /// <summary>
            /// Enum ONEMONTH for value: ONE_MONTH
            /// </summary>
            [EnumMember(Value = "ONE_MONTH")]
            ONEMONTH = 2,

            /// <summary>
            /// Enum TWOMONTHS for value: TWO_MONTHS
            /// </summary>
            [EnumMember(Value = "TWO_MONTHS")]
            TWOMONTHS = 3,

            /// <summary>
            /// Enum THREEMONTHS for value: THREE_MONTHS
            /// </summary>
            [EnumMember(Value = "THREE_MONTHS")]
            THREEMONTHS = 4,

            /// <summary>
            /// Enum SIXMONTHS for value: SIX_MONTHS
            /// </summary>
            [EnumMember(Value = "SIX_MONTHS")]
            SIXMONTHS = 5,

            /// <summary>
            /// Enum ONEYEAR for value: ONE_YEAR
            /// </summary>
            [EnumMember(Value = "ONE_YEAR")]
            ONEYEAR = 6

        }


        /// <summary>
        /// Gets or Sets SubscriptionPeriod
        /// </summary>
        [DataMember(Name = "subscriptionPeriod", EmitDefaultValue = false)]
        public SubscriptionPeriodEnum? SubscriptionPeriod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionAttributes" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="productId">productId.</param>
        /// <param name="familySharable">familySharable.</param>
        /// <param name="state">state.</param>
        /// <param name="subscriptionPeriod">subscriptionPeriod.</param>
        /// <param name="reviewNote">reviewNote.</param>
        /// <param name="groupLevel">groupLevel.</param>
        /// <param name="availableInAllTerritories">availableInAllTerritories.</param>
        public SubscriptionAttributes(string name = default(string), string productId = default(string), bool familySharable = default(bool), StateEnum? state = default(StateEnum?), SubscriptionPeriodEnum? subscriptionPeriod = default(SubscriptionPeriodEnum?), string reviewNote = default(string), int groupLevel = default(int), bool availableInAllTerritories = default(bool))
        {
            this.Name = name;
            this.ProductId = productId;
            this.FamilySharable = familySharable;
            this.State = state;
            this.SubscriptionPeriod = subscriptionPeriod;
            this.ReviewNote = reviewNote;
            this.GroupLevel = groupLevel;
            this.AvailableInAllTerritories = availableInAllTerritories;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ProductId
        /// </summary>
        [DataMember(Name = "productId", EmitDefaultValue = false)]
        public string ProductId { get; set; }

        /// <summary>
        /// Gets or Sets FamilySharable
        /// </summary>
        [DataMember(Name = "familySharable", EmitDefaultValue = true)]
        public bool FamilySharable { get; set; }

        /// <summary>
        /// Gets or Sets ReviewNote
        /// </summary>
        [DataMember(Name = "reviewNote", EmitDefaultValue = false)]
        public string ReviewNote { get; set; }

        /// <summary>
        /// Gets or Sets GroupLevel
        /// </summary>
        [DataMember(Name = "groupLevel", EmitDefaultValue = false)]
        public int GroupLevel { get; set; }

        /// <summary>
        /// Gets or Sets AvailableInAllTerritories
        /// </summary>
        [DataMember(Name = "availableInAllTerritories", EmitDefaultValue = true)]
        public bool AvailableInAllTerritories { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubscriptionAttributes {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  FamilySharable: ").Append(FamilySharable).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  SubscriptionPeriod: ").Append(SubscriptionPeriod).Append("\n");
            sb.Append("  ReviewNote: ").Append(ReviewNote).Append("\n");
            sb.Append("  GroupLevel: ").Append(GroupLevel).Append("\n");
            sb.Append("  AvailableInAllTerritories: ").Append(AvailableInAllTerritories).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionAttributes);
        }

        /// <summary>
        /// Returns true if SubscriptionAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionAttributes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.FamilySharable == input.FamilySharable ||
                    this.FamilySharable.Equals(input.FamilySharable)
                ) && 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                ) && 
                (
                    this.SubscriptionPeriod == input.SubscriptionPeriod ||
                    this.SubscriptionPeriod.Equals(input.SubscriptionPeriod)
                ) && 
                (
                    this.ReviewNote == input.ReviewNote ||
                    (this.ReviewNote != null &&
                    this.ReviewNote.Equals(input.ReviewNote))
                ) && 
                (
                    this.GroupLevel == input.GroupLevel ||
                    this.GroupLevel.Equals(input.GroupLevel)
                ) && 
                (
                    this.AvailableInAllTerritories == input.AvailableInAllTerritories ||
                    this.AvailableInAllTerritories.Equals(input.AvailableInAllTerritories)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ProductId != null)
                {
                    hashCode = (hashCode * 59) + this.ProductId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FamilySharable.GetHashCode();
                hashCode = (hashCode * 59) + this.State.GetHashCode();
                hashCode = (hashCode * 59) + this.SubscriptionPeriod.GetHashCode();
                if (this.ReviewNote != null)
                {
                    hashCode = (hashCode * 59) + this.ReviewNote.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GroupLevel.GetHashCode();
                hashCode = (hashCode * 59) + this.AvailableInAllTerritories.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
