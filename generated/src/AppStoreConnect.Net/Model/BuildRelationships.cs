/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Model
{
    /// <summary>
    /// BuildRelationships
    /// </summary>
    [DataContract(Name = "Build_relationships")]
    public partial class BuildRelationships : IEquatable<BuildRelationships>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildRelationships" /> class.
        /// </summary>
        /// <param name="preReleaseVersion">preReleaseVersion.</param>
        /// <param name="individualTesters">individualTesters.</param>
        /// <param name="betaGroups">betaGroups.</param>
        /// <param name="betaBuildLocalizations">betaBuildLocalizations.</param>
        /// <param name="appEncryptionDeclaration">appEncryptionDeclaration.</param>
        /// <param name="betaAppReviewSubmission">betaAppReviewSubmission.</param>
        /// <param name="app">app.</param>
        /// <param name="buildBetaDetail">buildBetaDetail.</param>
        /// <param name="appStoreVersion">appStoreVersion.</param>
        /// <param name="icons">icons.</param>
        /// <param name="buildBundles">buildBundles.</param>
        public BuildRelationships(BuildRelationshipsPreReleaseVersion preReleaseVersion = default(BuildRelationshipsPreReleaseVersion), BetaGroupRelationshipsBetaTesters individualTesters = default(BetaGroupRelationshipsBetaTesters), AppRelationshipsBetaGroups betaGroups = default(AppRelationshipsBetaGroups), BuildRelationshipsBetaBuildLocalizations betaBuildLocalizations = default(BuildRelationshipsBetaBuildLocalizations), BuildRelationshipsAppEncryptionDeclaration appEncryptionDeclaration = default(BuildRelationshipsAppEncryptionDeclaration), BuildRelationshipsBetaAppReviewSubmission betaAppReviewSubmission = default(BuildRelationshipsBetaAppReviewSubmission), AppAvailabilityRelationshipsApp app = default(AppAvailabilityRelationshipsApp), BuildRelationshipsBuildBetaDetail buildBetaDetail = default(BuildRelationshipsBuildBetaDetail), AppClipDefaultExperienceRelationshipsReleaseWithAppStoreVersion appStoreVersion = default(AppClipDefaultExperienceRelationshipsReleaseWithAppStoreVersion), BuildRelationshipsIcons icons = default(BuildRelationshipsIcons), BuildRelationshipsBuildBundles buildBundles = default(BuildRelationshipsBuildBundles))
        {
            this.PreReleaseVersion = preReleaseVersion;
            this.IndividualTesters = individualTesters;
            this.BetaGroups = betaGroups;
            this.BetaBuildLocalizations = betaBuildLocalizations;
            this.AppEncryptionDeclaration = appEncryptionDeclaration;
            this.BetaAppReviewSubmission = betaAppReviewSubmission;
            this.App = app;
            this.BuildBetaDetail = buildBetaDetail;
            this.AppStoreVersion = appStoreVersion;
            this.Icons = icons;
            this.BuildBundles = buildBundles;
        }

        /// <summary>
        /// Gets or Sets PreReleaseVersion
        /// </summary>
        [DataMember(Name = "preReleaseVersion", EmitDefaultValue = false)]
        public BuildRelationshipsPreReleaseVersion PreReleaseVersion { get; set; }

        /// <summary>
        /// Gets or Sets IndividualTesters
        /// </summary>
        [DataMember(Name = "individualTesters", EmitDefaultValue = false)]
        public BetaGroupRelationshipsBetaTesters IndividualTesters { get; set; }

        /// <summary>
        /// Gets or Sets BetaGroups
        /// </summary>
        [DataMember(Name = "betaGroups", EmitDefaultValue = false)]
        public AppRelationshipsBetaGroups BetaGroups { get; set; }

        /// <summary>
        /// Gets or Sets BetaBuildLocalizations
        /// </summary>
        [DataMember(Name = "betaBuildLocalizations", EmitDefaultValue = false)]
        public BuildRelationshipsBetaBuildLocalizations BetaBuildLocalizations { get; set; }

        /// <summary>
        /// Gets or Sets AppEncryptionDeclaration
        /// </summary>
        [DataMember(Name = "appEncryptionDeclaration", EmitDefaultValue = false)]
        public BuildRelationshipsAppEncryptionDeclaration AppEncryptionDeclaration { get; set; }

        /// <summary>
        /// Gets or Sets BetaAppReviewSubmission
        /// </summary>
        [DataMember(Name = "betaAppReviewSubmission", EmitDefaultValue = false)]
        public BuildRelationshipsBetaAppReviewSubmission BetaAppReviewSubmission { get; set; }

        /// <summary>
        /// Gets or Sets App
        /// </summary>
        [DataMember(Name = "app", EmitDefaultValue = false)]
        public AppAvailabilityRelationshipsApp App { get; set; }

        /// <summary>
        /// Gets or Sets BuildBetaDetail
        /// </summary>
        [DataMember(Name = "buildBetaDetail", EmitDefaultValue = false)]
        public BuildRelationshipsBuildBetaDetail BuildBetaDetail { get; set; }

        /// <summary>
        /// Gets or Sets AppStoreVersion
        /// </summary>
        [DataMember(Name = "appStoreVersion", EmitDefaultValue = false)]
        public AppClipDefaultExperienceRelationshipsReleaseWithAppStoreVersion AppStoreVersion { get; set; }

        /// <summary>
        /// Gets or Sets Icons
        /// </summary>
        [DataMember(Name = "icons", EmitDefaultValue = false)]
        public BuildRelationshipsIcons Icons { get; set; }

        /// <summary>
        /// Gets or Sets BuildBundles
        /// </summary>
        [DataMember(Name = "buildBundles", EmitDefaultValue = false)]
        public BuildRelationshipsBuildBundles BuildBundles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BuildRelationships {\n");
            sb.Append("  PreReleaseVersion: ").Append(PreReleaseVersion).Append("\n");
            sb.Append("  IndividualTesters: ").Append(IndividualTesters).Append("\n");
            sb.Append("  BetaGroups: ").Append(BetaGroups).Append("\n");
            sb.Append("  BetaBuildLocalizations: ").Append(BetaBuildLocalizations).Append("\n");
            sb.Append("  AppEncryptionDeclaration: ").Append(AppEncryptionDeclaration).Append("\n");
            sb.Append("  BetaAppReviewSubmission: ").Append(BetaAppReviewSubmission).Append("\n");
            sb.Append("  App: ").Append(App).Append("\n");
            sb.Append("  BuildBetaDetail: ").Append(BuildBetaDetail).Append("\n");
            sb.Append("  AppStoreVersion: ").Append(AppStoreVersion).Append("\n");
            sb.Append("  Icons: ").Append(Icons).Append("\n");
            sb.Append("  BuildBundles: ").Append(BuildBundles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildRelationships);
        }

        /// <summary>
        /// Returns true if BuildRelationships instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildRelationships to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildRelationships input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PreReleaseVersion == input.PreReleaseVersion ||
                    (this.PreReleaseVersion != null &&
                    this.PreReleaseVersion.Equals(input.PreReleaseVersion))
                ) && 
                (
                    this.IndividualTesters == input.IndividualTesters ||
                    (this.IndividualTesters != null &&
                    this.IndividualTesters.Equals(input.IndividualTesters))
                ) && 
                (
                    this.BetaGroups == input.BetaGroups ||
                    (this.BetaGroups != null &&
                    this.BetaGroups.Equals(input.BetaGroups))
                ) && 
                (
                    this.BetaBuildLocalizations == input.BetaBuildLocalizations ||
                    (this.BetaBuildLocalizations != null &&
                    this.BetaBuildLocalizations.Equals(input.BetaBuildLocalizations))
                ) && 
                (
                    this.AppEncryptionDeclaration == input.AppEncryptionDeclaration ||
                    (this.AppEncryptionDeclaration != null &&
                    this.AppEncryptionDeclaration.Equals(input.AppEncryptionDeclaration))
                ) && 
                (
                    this.BetaAppReviewSubmission == input.BetaAppReviewSubmission ||
                    (this.BetaAppReviewSubmission != null &&
                    this.BetaAppReviewSubmission.Equals(input.BetaAppReviewSubmission))
                ) && 
                (
                    this.App == input.App ||
                    (this.App != null &&
                    this.App.Equals(input.App))
                ) && 
                (
                    this.BuildBetaDetail == input.BuildBetaDetail ||
                    (this.BuildBetaDetail != null &&
                    this.BuildBetaDetail.Equals(input.BuildBetaDetail))
                ) && 
                (
                    this.AppStoreVersion == input.AppStoreVersion ||
                    (this.AppStoreVersion != null &&
                    this.AppStoreVersion.Equals(input.AppStoreVersion))
                ) && 
                (
                    this.Icons == input.Icons ||
                    (this.Icons != null &&
                    this.Icons.Equals(input.Icons))
                ) && 
                (
                    this.BuildBundles == input.BuildBundles ||
                    (this.BuildBundles != null &&
                    this.BuildBundles.Equals(input.BuildBundles))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PreReleaseVersion != null)
                {
                    hashCode = (hashCode * 59) + this.PreReleaseVersion.GetHashCode();
                }
                if (this.IndividualTesters != null)
                {
                    hashCode = (hashCode * 59) + this.IndividualTesters.GetHashCode();
                }
                if (this.BetaGroups != null)
                {
                    hashCode = (hashCode * 59) + this.BetaGroups.GetHashCode();
                }
                if (this.BetaBuildLocalizations != null)
                {
                    hashCode = (hashCode * 59) + this.BetaBuildLocalizations.GetHashCode();
                }
                if (this.AppEncryptionDeclaration != null)
                {
                    hashCode = (hashCode * 59) + this.AppEncryptionDeclaration.GetHashCode();
                }
                if (this.BetaAppReviewSubmission != null)
                {
                    hashCode = (hashCode * 59) + this.BetaAppReviewSubmission.GetHashCode();
                }
                if (this.App != null)
                {
                    hashCode = (hashCode * 59) + this.App.GetHashCode();
                }
                if (this.BuildBetaDetail != null)
                {
                    hashCode = (hashCode * 59) + this.BuildBetaDetail.GetHashCode();
                }
                if (this.AppStoreVersion != null)
                {
                    hashCode = (hashCode * 59) + this.AppStoreVersion.GetHashCode();
                }
                if (this.Icons != null)
                {
                    hashCode = (hashCode * 59) + this.Icons.GetHashCode();
                }
                if (this.BuildBundles != null)
                {
                    hashCode = (hashCode * 59) + this.BuildBundles.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
