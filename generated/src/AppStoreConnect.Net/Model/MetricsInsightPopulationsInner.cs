/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Model
{
    /// <summary>
    /// MetricsInsightPopulationsInner
    /// </summary>
    [DataContract(Name = "MetricsInsight_populations_inner")]
    public partial class MetricsInsightPopulationsInner : IEquatable<MetricsInsightPopulationsInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MetricsInsightPopulationsInner" /> class.
        /// </summary>
        /// <param name="deltaPercentage">deltaPercentage.</param>
        /// <param name="percentile">percentile.</param>
        /// <param name="summaryString">summaryString.</param>
        /// <param name="referenceAverageValue">referenceAverageValue.</param>
        /// <param name="latestVersionValue">latestVersionValue.</param>
        /// <param name="device">device.</param>
        public MetricsInsightPopulationsInner(decimal deltaPercentage = default(decimal), string percentile = default(string), string summaryString = default(string), decimal referenceAverageValue = default(decimal), decimal latestVersionValue = default(decimal), string device = default(string))
        {
            this.DeltaPercentage = deltaPercentage;
            this.Percentile = percentile;
            this.SummaryString = summaryString;
            this.ReferenceAverageValue = referenceAverageValue;
            this.LatestVersionValue = latestVersionValue;
            this.Device = device;
        }

        /// <summary>
        /// Gets or Sets DeltaPercentage
        /// </summary>
        [DataMember(Name = "deltaPercentage", EmitDefaultValue = false)]
        public decimal DeltaPercentage { get; set; }

        /// <summary>
        /// Gets or Sets Percentile
        /// </summary>
        [DataMember(Name = "percentile", EmitDefaultValue = false)]
        public string Percentile { get; set; }

        /// <summary>
        /// Gets or Sets SummaryString
        /// </summary>
        [DataMember(Name = "summaryString", EmitDefaultValue = false)]
        public string SummaryString { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceAverageValue
        /// </summary>
        [DataMember(Name = "referenceAverageValue", EmitDefaultValue = false)]
        public decimal ReferenceAverageValue { get; set; }

        /// <summary>
        /// Gets or Sets LatestVersionValue
        /// </summary>
        [DataMember(Name = "latestVersionValue", EmitDefaultValue = false)]
        public decimal LatestVersionValue { get; set; }

        /// <summary>
        /// Gets or Sets Device
        /// </summary>
        [DataMember(Name = "device", EmitDefaultValue = false)]
        public string Device { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MetricsInsightPopulationsInner {\n");
            sb.Append("  DeltaPercentage: ").Append(DeltaPercentage).Append("\n");
            sb.Append("  Percentile: ").Append(Percentile).Append("\n");
            sb.Append("  SummaryString: ").Append(SummaryString).Append("\n");
            sb.Append("  ReferenceAverageValue: ").Append(ReferenceAverageValue).Append("\n");
            sb.Append("  LatestVersionValue: ").Append(LatestVersionValue).Append("\n");
            sb.Append("  Device: ").Append(Device).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MetricsInsightPopulationsInner);
        }

        /// <summary>
        /// Returns true if MetricsInsightPopulationsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of MetricsInsightPopulationsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MetricsInsightPopulationsInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DeltaPercentage == input.DeltaPercentage ||
                    this.DeltaPercentage.Equals(input.DeltaPercentage)
                ) && 
                (
                    this.Percentile == input.Percentile ||
                    (this.Percentile != null &&
                    this.Percentile.Equals(input.Percentile))
                ) && 
                (
                    this.SummaryString == input.SummaryString ||
                    (this.SummaryString != null &&
                    this.SummaryString.Equals(input.SummaryString))
                ) && 
                (
                    this.ReferenceAverageValue == input.ReferenceAverageValue ||
                    this.ReferenceAverageValue.Equals(input.ReferenceAverageValue)
                ) && 
                (
                    this.LatestVersionValue == input.LatestVersionValue ||
                    this.LatestVersionValue.Equals(input.LatestVersionValue)
                ) && 
                (
                    this.Device == input.Device ||
                    (this.Device != null &&
                    this.Device.Equals(input.Device))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.DeltaPercentage.GetHashCode();
                if (this.Percentile != null)
                {
                    hashCode = (hashCode * 59) + this.Percentile.GetHashCode();
                }
                if (this.SummaryString != null)
                {
                    hashCode = (hashCode * 59) + this.SummaryString.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReferenceAverageValue.GetHashCode();
                hashCode = (hashCode * 59) + this.LatestVersionValue.GetHashCode();
                if (this.Device != null)
                {
                    hashCode = (hashCode * 59) + this.Device.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
