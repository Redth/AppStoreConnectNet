/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Model
{
    /// <summary>
    /// AppStoreReviewDetailAttributes
    /// </summary>
    [DataContract(Name = "AppStoreReviewDetail_attributes")]
    public partial class AppStoreReviewDetailAttributes : IEquatable<AppStoreReviewDetailAttributes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppStoreReviewDetailAttributes" /> class.
        /// </summary>
        /// <param name="contactFirstName">contactFirstName.</param>
        /// <param name="contactLastName">contactLastName.</param>
        /// <param name="contactPhone">contactPhone.</param>
        /// <param name="contactEmail">contactEmail.</param>
        /// <param name="demoAccountName">demoAccountName.</param>
        /// <param name="demoAccountPassword">demoAccountPassword.</param>
        /// <param name="demoAccountRequired">demoAccountRequired.</param>
        /// <param name="notes">notes.</param>
        public AppStoreReviewDetailAttributes(string contactFirstName = default(string), string contactLastName = default(string), string contactPhone = default(string), string contactEmail = default(string), string demoAccountName = default(string), string demoAccountPassword = default(string), bool demoAccountRequired = default(bool), string notes = default(string))
        {
            this.ContactFirstName = contactFirstName;
            this.ContactLastName = contactLastName;
            this.ContactPhone = contactPhone;
            this.ContactEmail = contactEmail;
            this.DemoAccountName = demoAccountName;
            this.DemoAccountPassword = demoAccountPassword;
            this.DemoAccountRequired = demoAccountRequired;
            this.Notes = notes;
        }

        /// <summary>
        /// Gets or Sets ContactFirstName
        /// </summary>
        [DataMember(Name = "contactFirstName", EmitDefaultValue = false)]
        public string ContactFirstName { get; set; }

        /// <summary>
        /// Gets or Sets ContactLastName
        /// </summary>
        [DataMember(Name = "contactLastName", EmitDefaultValue = false)]
        public string ContactLastName { get; set; }

        /// <summary>
        /// Gets or Sets ContactPhone
        /// </summary>
        [DataMember(Name = "contactPhone", EmitDefaultValue = false)]
        public string ContactPhone { get; set; }

        /// <summary>
        /// Gets or Sets ContactEmail
        /// </summary>
        [DataMember(Name = "contactEmail", EmitDefaultValue = false)]
        public string ContactEmail { get; set; }

        /// <summary>
        /// Gets or Sets DemoAccountName
        /// </summary>
        [DataMember(Name = "demoAccountName", EmitDefaultValue = false)]
        public string DemoAccountName { get; set; }

        /// <summary>
        /// Gets or Sets DemoAccountPassword
        /// </summary>
        [DataMember(Name = "demoAccountPassword", EmitDefaultValue = false)]
        public string DemoAccountPassword { get; set; }

        /// <summary>
        /// Gets or Sets DemoAccountRequired
        /// </summary>
        [DataMember(Name = "demoAccountRequired", EmitDefaultValue = true)]
        public bool DemoAccountRequired { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name = "notes", EmitDefaultValue = false)]
        public string Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppStoreReviewDetailAttributes {\n");
            sb.Append("  ContactFirstName: ").Append(ContactFirstName).Append("\n");
            sb.Append("  ContactLastName: ").Append(ContactLastName).Append("\n");
            sb.Append("  ContactPhone: ").Append(ContactPhone).Append("\n");
            sb.Append("  ContactEmail: ").Append(ContactEmail).Append("\n");
            sb.Append("  DemoAccountName: ").Append(DemoAccountName).Append("\n");
            sb.Append("  DemoAccountPassword: ").Append(DemoAccountPassword).Append("\n");
            sb.Append("  DemoAccountRequired: ").Append(DemoAccountRequired).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppStoreReviewDetailAttributes);
        }

        /// <summary>
        /// Returns true if AppStoreReviewDetailAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of AppStoreReviewDetailAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppStoreReviewDetailAttributes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ContactFirstName == input.ContactFirstName ||
                    (this.ContactFirstName != null &&
                    this.ContactFirstName.Equals(input.ContactFirstName))
                ) && 
                (
                    this.ContactLastName == input.ContactLastName ||
                    (this.ContactLastName != null &&
                    this.ContactLastName.Equals(input.ContactLastName))
                ) && 
                (
                    this.ContactPhone == input.ContactPhone ||
                    (this.ContactPhone != null &&
                    this.ContactPhone.Equals(input.ContactPhone))
                ) && 
                (
                    this.ContactEmail == input.ContactEmail ||
                    (this.ContactEmail != null &&
                    this.ContactEmail.Equals(input.ContactEmail))
                ) && 
                (
                    this.DemoAccountName == input.DemoAccountName ||
                    (this.DemoAccountName != null &&
                    this.DemoAccountName.Equals(input.DemoAccountName))
                ) && 
                (
                    this.DemoAccountPassword == input.DemoAccountPassword ||
                    (this.DemoAccountPassword != null &&
                    this.DemoAccountPassword.Equals(input.DemoAccountPassword))
                ) && 
                (
                    this.DemoAccountRequired == input.DemoAccountRequired ||
                    this.DemoAccountRequired.Equals(input.DemoAccountRequired)
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContactFirstName != null)
                {
                    hashCode = (hashCode * 59) + this.ContactFirstName.GetHashCode();
                }
                if (this.ContactLastName != null)
                {
                    hashCode = (hashCode * 59) + this.ContactLastName.GetHashCode();
                }
                if (this.ContactPhone != null)
                {
                    hashCode = (hashCode * 59) + this.ContactPhone.GetHashCode();
                }
                if (this.ContactEmail != null)
                {
                    hashCode = (hashCode * 59) + this.ContactEmail.GetHashCode();
                }
                if (this.DemoAccountName != null)
                {
                    hashCode = (hashCode * 59) + this.DemoAccountName.GetHashCode();
                }
                if (this.DemoAccountPassword != null)
                {
                    hashCode = (hashCode * 59) + this.DemoAccountPassword.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DemoAccountRequired.GetHashCode();
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
