/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Model
{
    /// <summary>
    /// AppInfoLocalizationCreateRequestDataAttributes
    /// </summary>
    [DataContract(Name = "AppInfoLocalizationCreateRequest_data_attributes")]
    public partial class AppInfoLocalizationCreateRequestDataAttributes : IEquatable<AppInfoLocalizationCreateRequestDataAttributes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppInfoLocalizationCreateRequestDataAttributes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AppInfoLocalizationCreateRequestDataAttributes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppInfoLocalizationCreateRequestDataAttributes" /> class.
        /// </summary>
        /// <param name="locale">locale (required).</param>
        /// <param name="name">name.</param>
        /// <param name="subtitle">subtitle.</param>
        /// <param name="privacyPolicyUrl">privacyPolicyUrl.</param>
        /// <param name="privacyChoicesUrl">privacyChoicesUrl.</param>
        /// <param name="privacyPolicyText">privacyPolicyText.</param>
        public AppInfoLocalizationCreateRequestDataAttributes(string locale = default(string), string name = default(string), string subtitle = default(string), string privacyPolicyUrl = default(string), string privacyChoicesUrl = default(string), string privacyPolicyText = default(string))
        {
            // to ensure "locale" is required (not null)
            if (locale == null)
            {
                throw new ArgumentNullException("locale is a required property for AppInfoLocalizationCreateRequestDataAttributes and cannot be null");
            }
            this.Locale = locale;
            this.Name = name;
            this.Subtitle = subtitle;
            this.PrivacyPolicyUrl = privacyPolicyUrl;
            this.PrivacyChoicesUrl = privacyChoicesUrl;
            this.PrivacyPolicyText = privacyPolicyText;
        }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name = "locale", IsRequired = true, EmitDefaultValue = true)]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Subtitle
        /// </summary>
        [DataMember(Name = "subtitle", EmitDefaultValue = false)]
        public string Subtitle { get; set; }

        /// <summary>
        /// Gets or Sets PrivacyPolicyUrl
        /// </summary>
        [DataMember(Name = "privacyPolicyUrl", EmitDefaultValue = false)]
        public string PrivacyPolicyUrl { get; set; }

        /// <summary>
        /// Gets or Sets PrivacyChoicesUrl
        /// </summary>
        [DataMember(Name = "privacyChoicesUrl", EmitDefaultValue = false)]
        public string PrivacyChoicesUrl { get; set; }

        /// <summary>
        /// Gets or Sets PrivacyPolicyText
        /// </summary>
        [DataMember(Name = "privacyPolicyText", EmitDefaultValue = false)]
        public string PrivacyPolicyText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppInfoLocalizationCreateRequestDataAttributes {\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Subtitle: ").Append(Subtitle).Append("\n");
            sb.Append("  PrivacyPolicyUrl: ").Append(PrivacyPolicyUrl).Append("\n");
            sb.Append("  PrivacyChoicesUrl: ").Append(PrivacyChoicesUrl).Append("\n");
            sb.Append("  PrivacyPolicyText: ").Append(PrivacyPolicyText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppInfoLocalizationCreateRequestDataAttributes);
        }

        /// <summary>
        /// Returns true if AppInfoLocalizationCreateRequestDataAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of AppInfoLocalizationCreateRequestDataAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppInfoLocalizationCreateRequestDataAttributes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Locale == input.Locale ||
                    (this.Locale != null &&
                    this.Locale.Equals(input.Locale))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Subtitle == input.Subtitle ||
                    (this.Subtitle != null &&
                    this.Subtitle.Equals(input.Subtitle))
                ) && 
                (
                    this.PrivacyPolicyUrl == input.PrivacyPolicyUrl ||
                    (this.PrivacyPolicyUrl != null &&
                    this.PrivacyPolicyUrl.Equals(input.PrivacyPolicyUrl))
                ) && 
                (
                    this.PrivacyChoicesUrl == input.PrivacyChoicesUrl ||
                    (this.PrivacyChoicesUrl != null &&
                    this.PrivacyChoicesUrl.Equals(input.PrivacyChoicesUrl))
                ) && 
                (
                    this.PrivacyPolicyText == input.PrivacyPolicyText ||
                    (this.PrivacyPolicyText != null &&
                    this.PrivacyPolicyText.Equals(input.PrivacyPolicyText))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Locale != null)
                {
                    hashCode = (hashCode * 59) + this.Locale.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Subtitle != null)
                {
                    hashCode = (hashCode * 59) + this.Subtitle.GetHashCode();
                }
                if (this.PrivacyPolicyUrl != null)
                {
                    hashCode = (hashCode * 59) + this.PrivacyPolicyUrl.GetHashCode();
                }
                if (this.PrivacyChoicesUrl != null)
                {
                    hashCode = (hashCode * 59) + this.PrivacyChoicesUrl.GetHashCode();
                }
                if (this.PrivacyPolicyText != null)
                {
                    hashCode = (hashCode * 59) + this.PrivacyPolicyText.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
