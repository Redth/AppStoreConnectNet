/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Model
{
    /// <summary>
    /// BuildUpdateRequestDataAttributes
    /// </summary>
    [DataContract(Name = "BuildUpdateRequest_data_attributes")]
    public partial class BuildUpdateRequestDataAttributes : IEquatable<BuildUpdateRequestDataAttributes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildUpdateRequestDataAttributes" /> class.
        /// </summary>
        /// <param name="expired">expired.</param>
        /// <param name="usesNonExemptEncryption">usesNonExemptEncryption.</param>
        public BuildUpdateRequestDataAttributes(bool expired = default(bool), bool usesNonExemptEncryption = default(bool))
        {
            this.Expired = expired;
            this.UsesNonExemptEncryption = usesNonExemptEncryption;
        }

        /// <summary>
        /// Gets or Sets Expired
        /// </summary>
        [DataMember(Name = "expired", EmitDefaultValue = true)]
        public bool Expired { get; set; }

        /// <summary>
        /// Gets or Sets UsesNonExemptEncryption
        /// </summary>
        [DataMember(Name = "usesNonExemptEncryption", EmitDefaultValue = true)]
        public bool UsesNonExemptEncryption { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BuildUpdateRequestDataAttributes {\n");
            sb.Append("  Expired: ").Append(Expired).Append("\n");
            sb.Append("  UsesNonExemptEncryption: ").Append(UsesNonExemptEncryption).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildUpdateRequestDataAttributes);
        }

        /// <summary>
        /// Returns true if BuildUpdateRequestDataAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildUpdateRequestDataAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildUpdateRequestDataAttributes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Expired == input.Expired ||
                    this.Expired.Equals(input.Expired)
                ) && 
                (
                    this.UsesNonExemptEncryption == input.UsesNonExemptEncryption ||
                    this.UsesNonExemptEncryption.Equals(input.UsesNonExemptEncryption)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Expired.GetHashCode();
                hashCode = (hashCode * 59) + this.UsesNonExemptEncryption.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
