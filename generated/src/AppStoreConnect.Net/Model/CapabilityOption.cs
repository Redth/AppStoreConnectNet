/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Model
{
    /// <summary>
    /// CapabilityOption
    /// </summary>
    [DataContract(Name = "CapabilityOption")]
    public partial class CapabilityOption : IEquatable<CapabilityOption>, IValidatableObject
    {
        /// <summary>
        /// Defines Key
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum KeyEnum
        {
            /// <summary>
            /// Enum XCODE5 for value: XCODE_5
            /// </summary>
            [EnumMember(Value = "XCODE_5")]
            XCODE5 = 1,

            /// <summary>
            /// Enum XCODE6 for value: XCODE_6
            /// </summary>
            [EnumMember(Value = "XCODE_6")]
            XCODE6 = 2,

            /// <summary>
            /// Enum COMPLETEPROTECTION for value: COMPLETE_PROTECTION
            /// </summary>
            [EnumMember(Value = "COMPLETE_PROTECTION")]
            COMPLETEPROTECTION = 3,

            /// <summary>
            /// Enum PROTECTEDUNLESSOPEN for value: PROTECTED_UNLESS_OPEN
            /// </summary>
            [EnumMember(Value = "PROTECTED_UNLESS_OPEN")]
            PROTECTEDUNLESSOPEN = 4,

            /// <summary>
            /// Enum PROTECTEDUNTILFIRSTUSERAUTH for value: PROTECTED_UNTIL_FIRST_USER_AUTH
            /// </summary>
            [EnumMember(Value = "PROTECTED_UNTIL_FIRST_USER_AUTH")]
            PROTECTEDUNTILFIRSTUSERAUTH = 5,

            /// <summary>
            /// Enum PRIMARYAPPCONSENT for value: PRIMARY_APP_CONSENT
            /// </summary>
            [EnumMember(Value = "PRIMARY_APP_CONSENT")]
            PRIMARYAPPCONSENT = 6

        }


        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public KeyEnum? Key { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CapabilityOption" /> class.
        /// </summary>
        /// <param name="key">key.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="enabledByDefault">enabledByDefault.</param>
        /// <param name="enabled">enabled.</param>
        /// <param name="supportsWildcard">supportsWildcard.</param>
        public CapabilityOption(KeyEnum? key = default(KeyEnum?), string name = default(string), string description = default(string), bool enabledByDefault = default(bool), bool enabled = default(bool), bool supportsWildcard = default(bool))
        {
            this.Key = key;
            this.Name = name;
            this.Description = description;
            this.EnabledByDefault = enabledByDefault;
            this.Enabled = enabled;
            this.SupportsWildcard = supportsWildcard;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets EnabledByDefault
        /// </summary>
        [DataMember(Name = "enabledByDefault", EmitDefaultValue = true)]
        public bool EnabledByDefault { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets SupportsWildcard
        /// </summary>
        [DataMember(Name = "supportsWildcard", EmitDefaultValue = true)]
        public bool SupportsWildcard { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CapabilityOption {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EnabledByDefault: ").Append(EnabledByDefault).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  SupportsWildcard: ").Append(SupportsWildcard).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CapabilityOption);
        }

        /// <summary>
        /// Returns true if CapabilityOption instances are equal
        /// </summary>
        /// <param name="input">Instance of CapabilityOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CapabilityOption input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Key == input.Key ||
                    this.Key.Equals(input.Key)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.EnabledByDefault == input.EnabledByDefault ||
                    this.EnabledByDefault.Equals(input.EnabledByDefault)
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.SupportsWildcard == input.SupportsWildcard ||
                    this.SupportsWildcard.Equals(input.SupportsWildcard)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Key.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EnabledByDefault.GetHashCode();
                hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                hashCode = (hashCode * 59) + this.SupportsWildcard.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
