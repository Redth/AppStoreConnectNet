/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Model
{
    /// <summary>
    /// CiBuildRunAttributesSourceCommit
    /// </summary>
    [DataContract(Name = "CiBuildRun_attributes_sourceCommit")]
    public partial class CiBuildRunAttributesSourceCommit : IEquatable<CiBuildRunAttributesSourceCommit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CiBuildRunAttributesSourceCommit" /> class.
        /// </summary>
        /// <param name="commitSha">commitSha.</param>
        /// <param name="message">message.</param>
        /// <param name="author">author.</param>
        /// <param name="committer">committer.</param>
        /// <param name="webUrl">webUrl.</param>
        public CiBuildRunAttributesSourceCommit(string commitSha = default(string), string message = default(string), CiGitUser author = default(CiGitUser), CiGitUser committer = default(CiGitUser), string webUrl = default(string))
        {
            this.CommitSha = commitSha;
            this.Message = message;
            this.Author = author;
            this.Committer = committer;
            this.WebUrl = webUrl;
        }

        /// <summary>
        /// Gets or Sets CommitSha
        /// </summary>
        [DataMember(Name = "commitSha", EmitDefaultValue = false)]
        public string CommitSha { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [DataMember(Name = "author", EmitDefaultValue = false)]
        public CiGitUser Author { get; set; }

        /// <summary>
        /// Gets or Sets Committer
        /// </summary>
        [DataMember(Name = "committer", EmitDefaultValue = false)]
        public CiGitUser Committer { get; set; }

        /// <summary>
        /// Gets or Sets WebUrl
        /// </summary>
        [DataMember(Name = "webUrl", EmitDefaultValue = false)]
        public string WebUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CiBuildRunAttributesSourceCommit {\n");
            sb.Append("  CommitSha: ").Append(CommitSha).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Committer: ").Append(Committer).Append("\n");
            sb.Append("  WebUrl: ").Append(WebUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CiBuildRunAttributesSourceCommit);
        }

        /// <summary>
        /// Returns true if CiBuildRunAttributesSourceCommit instances are equal
        /// </summary>
        /// <param name="input">Instance of CiBuildRunAttributesSourceCommit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CiBuildRunAttributesSourceCommit input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CommitSha == input.CommitSha ||
                    (this.CommitSha != null &&
                    this.CommitSha.Equals(input.CommitSha))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Author == input.Author ||
                    (this.Author != null &&
                    this.Author.Equals(input.Author))
                ) && 
                (
                    this.Committer == input.Committer ||
                    (this.Committer != null &&
                    this.Committer.Equals(input.Committer))
                ) && 
                (
                    this.WebUrl == input.WebUrl ||
                    (this.WebUrl != null &&
                    this.WebUrl.Equals(input.WebUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CommitSha != null)
                {
                    hashCode = (hashCode * 59) + this.CommitSha.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.Author != null)
                {
                    hashCode = (hashCode * 59) + this.Author.GetHashCode();
                }
                if (this.Committer != null)
                {
                    hashCode = (hashCode * 59) + this.Committer.GetHashCode();
                }
                if (this.WebUrl != null)
                {
                    hashCode = (hashCode * 59) + this.WebUrl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
