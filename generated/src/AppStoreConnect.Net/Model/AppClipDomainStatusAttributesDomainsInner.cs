/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Model
{
    /// <summary>
    /// AppClipDomainStatusAttributesDomainsInner
    /// </summary>
    [DataContract(Name = "AppClipDomainStatus_attributes_domains_inner")]
    public partial class AppClipDomainStatusAttributesDomainsInner : IEquatable<AppClipDomainStatusAttributesDomainsInner>, IValidatableObject
    {
        /// <summary>
        /// Defines ErrorCode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ErrorCodeEnum
        {
            /// <summary>
            /// Enum BADHTTPRESPONSE for value: BAD_HTTP_RESPONSE
            /// </summary>
            [EnumMember(Value = "BAD_HTTP_RESPONSE")]
            BADHTTPRESPONSE = 1,

            /// <summary>
            /// Enum BADJSONCONTENT for value: BAD_JSON_CONTENT
            /// </summary>
            [EnumMember(Value = "BAD_JSON_CONTENT")]
            BADJSONCONTENT = 2,

            /// <summary>
            /// Enum BADPKCS7SIGNATURE for value: BAD_PKCS7_SIGNATURE
            /// </summary>
            [EnumMember(Value = "BAD_PKCS7_SIGNATURE")]
            BADPKCS7SIGNATURE = 3,

            /// <summary>
            /// Enum CANNOTREACHAASAFILE for value: CANNOT_REACH_AASA_FILE
            /// </summary>
            [EnumMember(Value = "CANNOT_REACH_AASA_FILE")]
            CANNOTREACHAASAFILE = 4,

            /// <summary>
            /// Enum DNSERROR for value: DNS_ERROR
            /// </summary>
            [EnumMember(Value = "DNS_ERROR")]
            DNSERROR = 5,

            /// <summary>
            /// Enum INSECUREREDIRECTSFORBIDDEN for value: INSECURE_REDIRECTS_FORBIDDEN
            /// </summary>
            [EnumMember(Value = "INSECURE_REDIRECTS_FORBIDDEN")]
            INSECUREREDIRECTSFORBIDDEN = 6,

            /// <summary>
            /// Enum INVALIDENTITLEMENTMISSINGSECTION for value: INVALID_ENTITLEMENT_MISSING_SECTION
            /// </summary>
            [EnumMember(Value = "INVALID_ENTITLEMENT_MISSING_SECTION")]
            INVALIDENTITLEMENTMISSINGSECTION = 7,

            /// <summary>
            /// Enum INVALIDENTITLEMENTSYNTAXERROR for value: INVALID_ENTITLEMENT_SYNTAX_ERROR
            /// </summary>
            [EnumMember(Value = "INVALID_ENTITLEMENT_SYNTAX_ERROR")]
            INVALIDENTITLEMENTSYNTAXERROR = 8,

            /// <summary>
            /// Enum INVALIDENTITLEMENTUNHANDLEDSECTION for value: INVALID_ENTITLEMENT_UNHANDLED_SECTION
            /// </summary>
            [EnumMember(Value = "INVALID_ENTITLEMENT_UNHANDLED_SECTION")]
            INVALIDENTITLEMENTUNHANDLEDSECTION = 9,

            /// <summary>
            /// Enum INVALIDENTITLEMENTUNKNOWNID for value: INVALID_ENTITLEMENT_UNKNOWN_ID
            /// </summary>
            [EnumMember(Value = "INVALID_ENTITLEMENT_UNKNOWN_ID")]
            INVALIDENTITLEMENTUNKNOWNID = 10,

            /// <summary>
            /// Enum NETWORKERROR for value: NETWORK_ERROR
            /// </summary>
            [EnumMember(Value = "NETWORK_ERROR")]
            NETWORKERROR = 11,

            /// <summary>
            /// Enum NETWORKERRORTEMPORARY for value: NETWORK_ERROR_TEMPORARY
            /// </summary>
            [EnumMember(Value = "NETWORK_ERROR_TEMPORARY")]
            NETWORKERRORTEMPORARY = 12,

            /// <summary>
            /// Enum OTHERERROR for value: OTHER_ERROR
            /// </summary>
            [EnumMember(Value = "OTHER_ERROR")]
            OTHERERROR = 13,

            /// <summary>
            /// Enum TIMEOUT for value: TIMEOUT
            /// </summary>
            [EnumMember(Value = "TIMEOUT")]
            TIMEOUT = 14,

            /// <summary>
            /// Enum TLSERROR for value: TLS_ERROR
            /// </summary>
            [EnumMember(Value = "TLS_ERROR")]
            TLSERROR = 15,

            /// <summary>
            /// Enum UNEXPECTEDERROR for value: UNEXPECTED_ERROR
            /// </summary>
            [EnumMember(Value = "UNEXPECTED_ERROR")]
            UNEXPECTEDERROR = 16

        }


        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [DataMember(Name = "errorCode", EmitDefaultValue = false)]
        public ErrorCodeEnum? ErrorCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppClipDomainStatusAttributesDomainsInner" /> class.
        /// </summary>
        /// <param name="domain">domain.</param>
        /// <param name="isValid">isValid.</param>
        /// <param name="lastUpdatedDate">lastUpdatedDate.</param>
        /// <param name="errorCode">errorCode.</param>
        public AppClipDomainStatusAttributesDomainsInner(string domain = default(string), bool isValid = default(bool), DateTimeOffset lastUpdatedDate = default(DateTimeOffset), ErrorCodeEnum? errorCode = default(ErrorCodeEnum?))
        {
            this.Domain = domain;
            this.IsValid = isValid;
            this.LastUpdatedDate = lastUpdatedDate;
            this.ErrorCode = errorCode;
        }

        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        [DataMember(Name = "domain", EmitDefaultValue = false)]
        public string Domain { get; set; }

        /// <summary>
        /// Gets or Sets IsValid
        /// </summary>
        [DataMember(Name = "isValid", EmitDefaultValue = true)]
        public bool IsValid { get; set; }

        /// <summary>
        /// Gets or Sets LastUpdatedDate
        /// </summary>
        [DataMember(Name = "lastUpdatedDate", EmitDefaultValue = false)]
        public DateTimeOffset LastUpdatedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppClipDomainStatusAttributesDomainsInner {\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  IsValid: ").Append(IsValid).Append("\n");
            sb.Append("  LastUpdatedDate: ").Append(LastUpdatedDate).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppClipDomainStatusAttributesDomainsInner);
        }

        /// <summary>
        /// Returns true if AppClipDomainStatusAttributesDomainsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of AppClipDomainStatusAttributesDomainsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppClipDomainStatusAttributesDomainsInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.IsValid == input.IsValid ||
                    this.IsValid.Equals(input.IsValid)
                ) && 
                (
                    this.LastUpdatedDate == input.LastUpdatedDate ||
                    (this.LastUpdatedDate != null &&
                    this.LastUpdatedDate.Equals(input.LastUpdatedDate))
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    this.ErrorCode.Equals(input.ErrorCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Domain != null)
                {
                    hashCode = (hashCode * 59) + this.Domain.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsValid.GetHashCode();
                if (this.LastUpdatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastUpdatedDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ErrorCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
