/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Model
{
    /// <summary>
    /// MetricsInsight
    /// </summary>
    [DataContract(Name = "MetricsInsight")]
    public partial class MetricsInsight : IEquatable<MetricsInsight>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets MetricCategory
        /// </summary>
        [DataMember(Name = "metricCategory", EmitDefaultValue = false)]
        public MetricCategory? MetricCategory { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MetricsInsight" /> class.
        /// </summary>
        /// <param name="metricCategory">metricCategory.</param>
        /// <param name="latestVersion">latestVersion.</param>
        /// <param name="metric">metric.</param>
        /// <param name="summaryString">summaryString.</param>
        /// <param name="referenceVersions">referenceVersions.</param>
        /// <param name="maxLatestVersionValue">maxLatestVersionValue.</param>
        /// <param name="subSystemLabel">subSystemLabel.</param>
        /// <param name="highImpact">highImpact.</param>
        /// <param name="populations">populations.</param>
        public MetricsInsight(MetricCategory? metricCategory = default(MetricCategory?), string latestVersion = default(string), string metric = default(string), string summaryString = default(string), string referenceVersions = default(string), decimal maxLatestVersionValue = default(decimal), string subSystemLabel = default(string), bool highImpact = default(bool), List<MetricsInsightPopulationsInner> populations = default(List<MetricsInsightPopulationsInner>))
        {
            this.MetricCategory = metricCategory;
            this.LatestVersion = latestVersion;
            this.Metric = metric;
            this.SummaryString = summaryString;
            this.ReferenceVersions = referenceVersions;
            this.MaxLatestVersionValue = maxLatestVersionValue;
            this.SubSystemLabel = subSystemLabel;
            this.HighImpact = highImpact;
            this.Populations = populations;
        }

        /// <summary>
        /// Gets or Sets LatestVersion
        /// </summary>
        [DataMember(Name = "latestVersion", EmitDefaultValue = false)]
        public string LatestVersion { get; set; }

        /// <summary>
        /// Gets or Sets Metric
        /// </summary>
        [DataMember(Name = "metric", EmitDefaultValue = false)]
        public string Metric { get; set; }

        /// <summary>
        /// Gets or Sets SummaryString
        /// </summary>
        [DataMember(Name = "summaryString", EmitDefaultValue = false)]
        public string SummaryString { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceVersions
        /// </summary>
        [DataMember(Name = "referenceVersions", EmitDefaultValue = false)]
        public string ReferenceVersions { get; set; }

        /// <summary>
        /// Gets or Sets MaxLatestVersionValue
        /// </summary>
        [DataMember(Name = "maxLatestVersionValue", EmitDefaultValue = false)]
        public decimal MaxLatestVersionValue { get; set; }

        /// <summary>
        /// Gets or Sets SubSystemLabel
        /// </summary>
        [DataMember(Name = "subSystemLabel", EmitDefaultValue = false)]
        public string SubSystemLabel { get; set; }

        /// <summary>
        /// Gets or Sets HighImpact
        /// </summary>
        [DataMember(Name = "highImpact", EmitDefaultValue = true)]
        public bool HighImpact { get; set; }

        /// <summary>
        /// Gets or Sets Populations
        /// </summary>
        [DataMember(Name = "populations", EmitDefaultValue = false)]
        public List<MetricsInsightPopulationsInner> Populations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MetricsInsight {\n");
            sb.Append("  MetricCategory: ").Append(MetricCategory).Append("\n");
            sb.Append("  LatestVersion: ").Append(LatestVersion).Append("\n");
            sb.Append("  Metric: ").Append(Metric).Append("\n");
            sb.Append("  SummaryString: ").Append(SummaryString).Append("\n");
            sb.Append("  ReferenceVersions: ").Append(ReferenceVersions).Append("\n");
            sb.Append("  MaxLatestVersionValue: ").Append(MaxLatestVersionValue).Append("\n");
            sb.Append("  SubSystemLabel: ").Append(SubSystemLabel).Append("\n");
            sb.Append("  HighImpact: ").Append(HighImpact).Append("\n");
            sb.Append("  Populations: ").Append(Populations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MetricsInsight);
        }

        /// <summary>
        /// Returns true if MetricsInsight instances are equal
        /// </summary>
        /// <param name="input">Instance of MetricsInsight to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MetricsInsight input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MetricCategory == input.MetricCategory ||
                    this.MetricCategory.Equals(input.MetricCategory)
                ) && 
                (
                    this.LatestVersion == input.LatestVersion ||
                    (this.LatestVersion != null &&
                    this.LatestVersion.Equals(input.LatestVersion))
                ) && 
                (
                    this.Metric == input.Metric ||
                    (this.Metric != null &&
                    this.Metric.Equals(input.Metric))
                ) && 
                (
                    this.SummaryString == input.SummaryString ||
                    (this.SummaryString != null &&
                    this.SummaryString.Equals(input.SummaryString))
                ) && 
                (
                    this.ReferenceVersions == input.ReferenceVersions ||
                    (this.ReferenceVersions != null &&
                    this.ReferenceVersions.Equals(input.ReferenceVersions))
                ) && 
                (
                    this.MaxLatestVersionValue == input.MaxLatestVersionValue ||
                    this.MaxLatestVersionValue.Equals(input.MaxLatestVersionValue)
                ) && 
                (
                    this.SubSystemLabel == input.SubSystemLabel ||
                    (this.SubSystemLabel != null &&
                    this.SubSystemLabel.Equals(input.SubSystemLabel))
                ) && 
                (
                    this.HighImpact == input.HighImpact ||
                    this.HighImpact.Equals(input.HighImpact)
                ) && 
                (
                    this.Populations == input.Populations ||
                    this.Populations != null &&
                    input.Populations != null &&
                    this.Populations.SequenceEqual(input.Populations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MetricCategory.GetHashCode();
                if (this.LatestVersion != null)
                {
                    hashCode = (hashCode * 59) + this.LatestVersion.GetHashCode();
                }
                if (this.Metric != null)
                {
                    hashCode = (hashCode * 59) + this.Metric.GetHashCode();
                }
                if (this.SummaryString != null)
                {
                    hashCode = (hashCode * 59) + this.SummaryString.GetHashCode();
                }
                if (this.ReferenceVersions != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceVersions.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MaxLatestVersionValue.GetHashCode();
                if (this.SubSystemLabel != null)
                {
                    hashCode = (hashCode * 59) + this.SubSystemLabel.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HighImpact.GetHashCode();
                if (this.Populations != null)
                {
                    hashCode = (hashCode * 59) + this.Populations.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
