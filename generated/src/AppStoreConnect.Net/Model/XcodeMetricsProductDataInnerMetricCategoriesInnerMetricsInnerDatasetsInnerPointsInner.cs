/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Model
{
    /// <summary>
    /// XcodeMetricsProductDataInnerMetricCategoriesInnerMetricsInnerDatasetsInnerPointsInner
    /// </summary>
    [DataContract(Name = "xcodeMetrics_productData_inner_metricCategories_inner_metrics_inner_datasets_inner_points_inner")]
    public partial class XcodeMetricsProductDataInnerMetricCategoriesInnerMetricsInnerDatasetsInnerPointsInner : IEquatable<XcodeMetricsProductDataInnerMetricCategoriesInnerMetricsInnerDatasetsInnerPointsInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XcodeMetricsProductDataInnerMetricCategoriesInnerMetricsInnerDatasetsInnerPointsInner" /> class.
        /// </summary>
        /// <param name="version">version.</param>
        /// <param name="value">value.</param>
        /// <param name="errorMargin">errorMargin.</param>
        /// <param name="percentageBreakdown">percentageBreakdown.</param>
        /// <param name="goal">goal.</param>
        public XcodeMetricsProductDataInnerMetricCategoriesInnerMetricsInnerDatasetsInnerPointsInner(string version = default(string), decimal value = default(decimal), decimal errorMargin = default(decimal), XcodeMetricsProductDataInnerMetricCategoriesInnerMetricsInnerDatasetsInnerPointsInnerPercentageBreakdown percentageBreakdown = default(XcodeMetricsProductDataInnerMetricCategoriesInnerMetricsInnerDatasetsInnerPointsInnerPercentageBreakdown), string goal = default(string))
        {
            this._Version = version;
            this.Value = value;
            this.ErrorMargin = errorMargin;
            this.PercentageBreakdown = percentageBreakdown;
            this.Goal = goal;
        }

        /// <summary>
        /// Gets or Sets _Version
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string _Version { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public decimal Value { get; set; }

        /// <summary>
        /// Gets or Sets ErrorMargin
        /// </summary>
        [DataMember(Name = "errorMargin", EmitDefaultValue = false)]
        public decimal ErrorMargin { get; set; }

        /// <summary>
        /// Gets or Sets PercentageBreakdown
        /// </summary>
        [DataMember(Name = "percentageBreakdown", EmitDefaultValue = false)]
        public XcodeMetricsProductDataInnerMetricCategoriesInnerMetricsInnerDatasetsInnerPointsInnerPercentageBreakdown PercentageBreakdown { get; set; }

        /// <summary>
        /// Gets or Sets Goal
        /// </summary>
        [DataMember(Name = "goal", EmitDefaultValue = false)]
        public string Goal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class XcodeMetricsProductDataInnerMetricCategoriesInnerMetricsInnerDatasetsInnerPointsInner {\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ErrorMargin: ").Append(ErrorMargin).Append("\n");
            sb.Append("  PercentageBreakdown: ").Append(PercentageBreakdown).Append("\n");
            sb.Append("  Goal: ").Append(Goal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XcodeMetricsProductDataInnerMetricCategoriesInnerMetricsInnerDatasetsInnerPointsInner);
        }

        /// <summary>
        /// Returns true if XcodeMetricsProductDataInnerMetricCategoriesInnerMetricsInnerDatasetsInnerPointsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of XcodeMetricsProductDataInnerMetricCategoriesInnerMetricsInnerDatasetsInnerPointsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XcodeMetricsProductDataInnerMetricCategoriesInnerMetricsInnerDatasetsInnerPointsInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this._Version == input._Version ||
                    (this._Version != null &&
                    this._Version.Equals(input._Version))
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                ) && 
                (
                    this.ErrorMargin == input.ErrorMargin ||
                    this.ErrorMargin.Equals(input.ErrorMargin)
                ) && 
                (
                    this.PercentageBreakdown == input.PercentageBreakdown ||
                    (this.PercentageBreakdown != null &&
                    this.PercentageBreakdown.Equals(input.PercentageBreakdown))
                ) && 
                (
                    this.Goal == input.Goal ||
                    (this.Goal != null &&
                    this.Goal.Equals(input.Goal))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._Version != null)
                {
                    hashCode = (hashCode * 59) + this._Version.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Value.GetHashCode();
                hashCode = (hashCode * 59) + this.ErrorMargin.GetHashCode();
                if (this.PercentageBreakdown != null)
                {
                    hashCode = (hashCode * 59) + this.PercentageBreakdown.GetHashCode();
                }
                if (this.Goal != null)
                {
                    hashCode = (hashCode * 59) + this.Goal.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
