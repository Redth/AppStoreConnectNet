/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Model
{
    /// <summary>
    /// CiTestResultAttributes
    /// </summary>
    [DataContract(Name = "CiTestResult_attributes")]
    public partial class CiTestResultAttributes : IEquatable<CiTestResultAttributes>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public CiTestStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CiTestResultAttributes" /> class.
        /// </summary>
        /// <param name="className">className.</param>
        /// <param name="name">name.</param>
        /// <param name="status">status.</param>
        /// <param name="fileSource">fileSource.</param>
        /// <param name="message">message.</param>
        /// <param name="destinationTestResults">destinationTestResults.</param>
        public CiTestResultAttributes(string className = default(string), string name = default(string), CiTestStatus? status = default(CiTestStatus?), FileLocation fileSource = default(FileLocation), string message = default(string), List<CiTestResultAttributesDestinationTestResultsInner> destinationTestResults = default(List<CiTestResultAttributesDestinationTestResultsInner>))
        {
            this.ClassName = className;
            this.Name = name;
            this.Status = status;
            this.FileSource = fileSource;
            this.Message = message;
            this.DestinationTestResults = destinationTestResults;
        }

        /// <summary>
        /// Gets or Sets ClassName
        /// </summary>
        [DataMember(Name = "className", EmitDefaultValue = false)]
        public string ClassName { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets FileSource
        /// </summary>
        [DataMember(Name = "fileSource", EmitDefaultValue = false)]
        public FileLocation FileSource { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets DestinationTestResults
        /// </summary>
        [DataMember(Name = "destinationTestResults", EmitDefaultValue = false)]
        public List<CiTestResultAttributesDestinationTestResultsInner> DestinationTestResults { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CiTestResultAttributes {\n");
            sb.Append("  ClassName: ").Append(ClassName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  FileSource: ").Append(FileSource).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  DestinationTestResults: ").Append(DestinationTestResults).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CiTestResultAttributes);
        }

        /// <summary>
        /// Returns true if CiTestResultAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of CiTestResultAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CiTestResultAttributes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ClassName == input.ClassName ||
                    (this.ClassName != null &&
                    this.ClassName.Equals(input.ClassName))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.FileSource == input.FileSource ||
                    (this.FileSource != null &&
                    this.FileSource.Equals(input.FileSource))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.DestinationTestResults == input.DestinationTestResults ||
                    this.DestinationTestResults != null &&
                    input.DestinationTestResults != null &&
                    this.DestinationTestResults.SequenceEqual(input.DestinationTestResults)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClassName != null)
                {
                    hashCode = (hashCode * 59) + this.ClassName.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.FileSource != null)
                {
                    hashCode = (hashCode * 59) + this.FileSource.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.DestinationTestResults != null)
                {
                    hashCode = (hashCode * 59) + this.DestinationTestResults.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
