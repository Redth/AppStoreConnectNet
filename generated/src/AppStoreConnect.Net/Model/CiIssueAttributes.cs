/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Model
{
    /// <summary>
    /// CiIssueAttributes
    /// </summary>
    [DataContract(Name = "CiIssue_attributes")]
    public partial class CiIssueAttributes : IEquatable<CiIssueAttributes>, IValidatableObject
    {
        /// <summary>
        /// Defines IssueType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IssueTypeEnum
        {
            /// <summary>
            /// Enum ANALYZERWARNING for value: ANALYZER_WARNING
            /// </summary>
            [EnumMember(Value = "ANALYZER_WARNING")]
            ANALYZERWARNING = 1,

            /// <summary>
            /// Enum ERROR for value: ERROR
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR = 2,

            /// <summary>
            /// Enum TESTFAILURE for value: TEST_FAILURE
            /// </summary>
            [EnumMember(Value = "TEST_FAILURE")]
            TESTFAILURE = 3,

            /// <summary>
            /// Enum WARNING for value: WARNING
            /// </summary>
            [EnumMember(Value = "WARNING")]
            WARNING = 4

        }


        /// <summary>
        /// Gets or Sets IssueType
        /// </summary>
        [DataMember(Name = "issueType", EmitDefaultValue = false)]
        public IssueTypeEnum? IssueType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CiIssueAttributes" /> class.
        /// </summary>
        /// <param name="issueType">issueType.</param>
        /// <param name="message">message.</param>
        /// <param name="fileSource">fileSource.</param>
        /// <param name="category">category.</param>
        public CiIssueAttributes(IssueTypeEnum? issueType = default(IssueTypeEnum?), string message = default(string), FileLocation fileSource = default(FileLocation), string category = default(string))
        {
            this.IssueType = issueType;
            this.Message = message;
            this.FileSource = fileSource;
            this.Category = category;
        }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets FileSource
        /// </summary>
        [DataMember(Name = "fileSource", EmitDefaultValue = false)]
        public FileLocation FileSource { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public string Category { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CiIssueAttributes {\n");
            sb.Append("  IssueType: ").Append(IssueType).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  FileSource: ").Append(FileSource).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CiIssueAttributes);
        }

        /// <summary>
        /// Returns true if CiIssueAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of CiIssueAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CiIssueAttributes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IssueType == input.IssueType ||
                    this.IssueType.Equals(input.IssueType)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.FileSource == input.FileSource ||
                    (this.FileSource != null &&
                    this.FileSource.Equals(input.FileSource))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.IssueType.GetHashCode();
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.FileSource != null)
                {
                    hashCode = (hashCode * 59) + this.FileSource.GetHashCode();
                }
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
