/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Model
{
    /// <summary>
    /// AppUpdateRequestDataAttributes
    /// </summary>
    [DataContract(Name = "AppUpdateRequest_data_attributes")]
    public partial class AppUpdateRequestDataAttributes : IEquatable<AppUpdateRequestDataAttributes>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets SubscriptionStatusUrlVersion
        /// </summary>
        [DataMember(Name = "subscriptionStatusUrlVersion", EmitDefaultValue = false)]
        public SubscriptionStatusUrlVersion? SubscriptionStatusUrlVersion { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionStatusUrlVersionForSandbox
        /// </summary>
        [DataMember(Name = "subscriptionStatusUrlVersionForSandbox", EmitDefaultValue = false)]
        public SubscriptionStatusUrlVersion? SubscriptionStatusUrlVersionForSandbox { get; set; }
        /// <summary>
        /// Defines ContentRightsDeclaration
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContentRightsDeclarationEnum
        {
            /// <summary>
            /// Enum DOESNOTUSETHIRDPARTYCONTENT for value: DOES_NOT_USE_THIRD_PARTY_CONTENT
            /// </summary>
            [EnumMember(Value = "DOES_NOT_USE_THIRD_PARTY_CONTENT")]
            DOESNOTUSETHIRDPARTYCONTENT = 1,

            /// <summary>
            /// Enum USESTHIRDPARTYCONTENT for value: USES_THIRD_PARTY_CONTENT
            /// </summary>
            [EnumMember(Value = "USES_THIRD_PARTY_CONTENT")]
            USESTHIRDPARTYCONTENT = 2

        }


        /// <summary>
        /// Gets or Sets ContentRightsDeclaration
        /// </summary>
        [DataMember(Name = "contentRightsDeclaration", EmitDefaultValue = false)]
        public ContentRightsDeclarationEnum? ContentRightsDeclaration { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppUpdateRequestDataAttributes" /> class.
        /// </summary>
        /// <param name="bundleId">bundleId.</param>
        /// <param name="primaryLocale">primaryLocale.</param>
        /// <param name="subscriptionStatusUrl">subscriptionStatusUrl.</param>
        /// <param name="subscriptionStatusUrlVersion">subscriptionStatusUrlVersion.</param>
        /// <param name="subscriptionStatusUrlForSandbox">subscriptionStatusUrlForSandbox.</param>
        /// <param name="subscriptionStatusUrlVersionForSandbox">subscriptionStatusUrlVersionForSandbox.</param>
        /// <param name="availableInNewTerritories">availableInNewTerritories.</param>
        /// <param name="contentRightsDeclaration">contentRightsDeclaration.</param>
        public AppUpdateRequestDataAttributes(string bundleId = default(string), string primaryLocale = default(string), string subscriptionStatusUrl = default(string), SubscriptionStatusUrlVersion? subscriptionStatusUrlVersion = default(SubscriptionStatusUrlVersion?), string subscriptionStatusUrlForSandbox = default(string), SubscriptionStatusUrlVersion? subscriptionStatusUrlVersionForSandbox = default(SubscriptionStatusUrlVersion?), bool availableInNewTerritories = default(bool), ContentRightsDeclarationEnum? contentRightsDeclaration = default(ContentRightsDeclarationEnum?))
        {
            this.BundleId = bundleId;
            this.PrimaryLocale = primaryLocale;
            this.SubscriptionStatusUrl = subscriptionStatusUrl;
            this.SubscriptionStatusUrlVersion = subscriptionStatusUrlVersion;
            this.SubscriptionStatusUrlForSandbox = subscriptionStatusUrlForSandbox;
            this.SubscriptionStatusUrlVersionForSandbox = subscriptionStatusUrlVersionForSandbox;
            this.AvailableInNewTerritories = availableInNewTerritories;
            this.ContentRightsDeclaration = contentRightsDeclaration;
        }

        /// <summary>
        /// Gets or Sets BundleId
        /// </summary>
        [DataMember(Name = "bundleId", EmitDefaultValue = false)]
        public string BundleId { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryLocale
        /// </summary>
        [DataMember(Name = "primaryLocale", EmitDefaultValue = false)]
        public string PrimaryLocale { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionStatusUrl
        /// </summary>
        [DataMember(Name = "subscriptionStatusUrl", EmitDefaultValue = false)]
        public string SubscriptionStatusUrl { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionStatusUrlForSandbox
        /// </summary>
        [DataMember(Name = "subscriptionStatusUrlForSandbox", EmitDefaultValue = false)]
        public string SubscriptionStatusUrlForSandbox { get; set; }

        /// <summary>
        /// Gets or Sets AvailableInNewTerritories
        /// </summary>
        [DataMember(Name = "availableInNewTerritories", EmitDefaultValue = true)]
        [Obsolete]
        public bool AvailableInNewTerritories { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppUpdateRequestDataAttributes {\n");
            sb.Append("  BundleId: ").Append(BundleId).Append("\n");
            sb.Append("  PrimaryLocale: ").Append(PrimaryLocale).Append("\n");
            sb.Append("  SubscriptionStatusUrl: ").Append(SubscriptionStatusUrl).Append("\n");
            sb.Append("  SubscriptionStatusUrlVersion: ").Append(SubscriptionStatusUrlVersion).Append("\n");
            sb.Append("  SubscriptionStatusUrlForSandbox: ").Append(SubscriptionStatusUrlForSandbox).Append("\n");
            sb.Append("  SubscriptionStatusUrlVersionForSandbox: ").Append(SubscriptionStatusUrlVersionForSandbox).Append("\n");
            sb.Append("  AvailableInNewTerritories: ").Append(AvailableInNewTerritories).Append("\n");
            sb.Append("  ContentRightsDeclaration: ").Append(ContentRightsDeclaration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppUpdateRequestDataAttributes);
        }

        /// <summary>
        /// Returns true if AppUpdateRequestDataAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of AppUpdateRequestDataAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppUpdateRequestDataAttributes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BundleId == input.BundleId ||
                    (this.BundleId != null &&
                    this.BundleId.Equals(input.BundleId))
                ) && 
                (
                    this.PrimaryLocale == input.PrimaryLocale ||
                    (this.PrimaryLocale != null &&
                    this.PrimaryLocale.Equals(input.PrimaryLocale))
                ) && 
                (
                    this.SubscriptionStatusUrl == input.SubscriptionStatusUrl ||
                    (this.SubscriptionStatusUrl != null &&
                    this.SubscriptionStatusUrl.Equals(input.SubscriptionStatusUrl))
                ) && 
                (
                    this.SubscriptionStatusUrlVersion == input.SubscriptionStatusUrlVersion ||
                    this.SubscriptionStatusUrlVersion.Equals(input.SubscriptionStatusUrlVersion)
                ) && 
                (
                    this.SubscriptionStatusUrlForSandbox == input.SubscriptionStatusUrlForSandbox ||
                    (this.SubscriptionStatusUrlForSandbox != null &&
                    this.SubscriptionStatusUrlForSandbox.Equals(input.SubscriptionStatusUrlForSandbox))
                ) && 
                (
                    this.SubscriptionStatusUrlVersionForSandbox == input.SubscriptionStatusUrlVersionForSandbox ||
                    this.SubscriptionStatusUrlVersionForSandbox.Equals(input.SubscriptionStatusUrlVersionForSandbox)
                ) && 
                (
                    this.AvailableInNewTerritories == input.AvailableInNewTerritories ||
                    this.AvailableInNewTerritories.Equals(input.AvailableInNewTerritories)
                ) && 
                (
                    this.ContentRightsDeclaration == input.ContentRightsDeclaration ||
                    this.ContentRightsDeclaration.Equals(input.ContentRightsDeclaration)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BundleId != null)
                {
                    hashCode = (hashCode * 59) + this.BundleId.GetHashCode();
                }
                if (this.PrimaryLocale != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryLocale.GetHashCode();
                }
                if (this.SubscriptionStatusUrl != null)
                {
                    hashCode = (hashCode * 59) + this.SubscriptionStatusUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SubscriptionStatusUrlVersion.GetHashCode();
                if (this.SubscriptionStatusUrlForSandbox != null)
                {
                    hashCode = (hashCode * 59) + this.SubscriptionStatusUrlForSandbox.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SubscriptionStatusUrlVersionForSandbox.GetHashCode();
                hashCode = (hashCode * 59) + this.AvailableInNewTerritories.GetHashCode();
                hashCode = (hashCode * 59) + this.ContentRightsDeclaration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
