/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Model
{
    /// <summary>
    /// DiagnosticLogsProductDataInnerDiagnosticInsightsInner
    /// </summary>
    [DataContract(Name = "diagnosticLogs_productData_inner_diagnosticInsights_inner")]
    public partial class DiagnosticLogsProductDataInnerDiagnosticInsightsInner : IEquatable<DiagnosticLogsProductDataInnerDiagnosticInsightsInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagnosticLogsProductDataInnerDiagnosticInsightsInner" /> class.
        /// </summary>
        /// <param name="insightsURL">insightsURL.</param>
        /// <param name="insightsCategory">insightsCategory.</param>
        /// <param name="insightsString">insightsString.</param>
        public DiagnosticLogsProductDataInnerDiagnosticInsightsInner(string insightsURL = default(string), string insightsCategory = default(string), string insightsString = default(string))
        {
            this.InsightsURL = insightsURL;
            this.InsightsCategory = insightsCategory;
            this.InsightsString = insightsString;
        }

        /// <summary>
        /// Gets or Sets InsightsURL
        /// </summary>
        [DataMember(Name = "insightsURL", EmitDefaultValue = false)]
        public string InsightsURL { get; set; }

        /// <summary>
        /// Gets or Sets InsightsCategory
        /// </summary>
        [DataMember(Name = "insightsCategory", EmitDefaultValue = false)]
        public string InsightsCategory { get; set; }

        /// <summary>
        /// Gets or Sets InsightsString
        /// </summary>
        [DataMember(Name = "insightsString", EmitDefaultValue = false)]
        public string InsightsString { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiagnosticLogsProductDataInnerDiagnosticInsightsInner {\n");
            sb.Append("  InsightsURL: ").Append(InsightsURL).Append("\n");
            sb.Append("  InsightsCategory: ").Append(InsightsCategory).Append("\n");
            sb.Append("  InsightsString: ").Append(InsightsString).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiagnosticLogsProductDataInnerDiagnosticInsightsInner);
        }

        /// <summary>
        /// Returns true if DiagnosticLogsProductDataInnerDiagnosticInsightsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of DiagnosticLogsProductDataInnerDiagnosticInsightsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagnosticLogsProductDataInnerDiagnosticInsightsInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InsightsURL == input.InsightsURL ||
                    (this.InsightsURL != null &&
                    this.InsightsURL.Equals(input.InsightsURL))
                ) && 
                (
                    this.InsightsCategory == input.InsightsCategory ||
                    (this.InsightsCategory != null &&
                    this.InsightsCategory.Equals(input.InsightsCategory))
                ) && 
                (
                    this.InsightsString == input.InsightsString ||
                    (this.InsightsString != null &&
                    this.InsightsString.Equals(input.InsightsString))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InsightsURL != null)
                {
                    hashCode = (hashCode * 59) + this.InsightsURL.GetHashCode();
                }
                if (this.InsightsCategory != null)
                {
                    hashCode = (hashCode * 59) + this.InsightsCategory.GetHashCode();
                }
                if (this.InsightsString != null)
                {
                    hashCode = (hashCode * 59) + this.InsightsString.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
