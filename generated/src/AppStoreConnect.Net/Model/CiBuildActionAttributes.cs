/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Model
{
    /// <summary>
    /// CiBuildActionAttributes
    /// </summary>
    [DataContract(Name = "CiBuildAction_attributes")]
    public partial class CiBuildActionAttributes : IEquatable<CiBuildActionAttributes>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ActionType
        /// </summary>
        [DataMember(Name = "actionType", EmitDefaultValue = false)]
        public CiActionType? ActionType { get; set; }

        /// <summary>
        /// Gets or Sets ExecutionProgress
        /// </summary>
        [DataMember(Name = "executionProgress", EmitDefaultValue = false)]
        public CiExecutionProgress? ExecutionProgress { get; set; }

        /// <summary>
        /// Gets or Sets CompletionStatus
        /// </summary>
        [DataMember(Name = "completionStatus", EmitDefaultValue = false)]
        public CiCompletionStatus? CompletionStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CiBuildActionAttributes" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="actionType">actionType.</param>
        /// <param name="startedDate">startedDate.</param>
        /// <param name="finishedDate">finishedDate.</param>
        /// <param name="issueCounts">issueCounts.</param>
        /// <param name="executionProgress">executionProgress.</param>
        /// <param name="completionStatus">completionStatus.</param>
        /// <param name="isRequiredToPass">isRequiredToPass.</param>
        public CiBuildActionAttributes(string name = default(string), CiActionType? actionType = default(CiActionType?), DateTimeOffset startedDate = default(DateTimeOffset), DateTimeOffset finishedDate = default(DateTimeOffset), CiIssueCounts issueCounts = default(CiIssueCounts), CiExecutionProgress? executionProgress = default(CiExecutionProgress?), CiCompletionStatus? completionStatus = default(CiCompletionStatus?), bool isRequiredToPass = default(bool))
        {
            this.Name = name;
            this.ActionType = actionType;
            this.StartedDate = startedDate;
            this.FinishedDate = finishedDate;
            this.IssueCounts = issueCounts;
            this.ExecutionProgress = executionProgress;
            this.CompletionStatus = completionStatus;
            this.IsRequiredToPass = isRequiredToPass;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets StartedDate
        /// </summary>
        [DataMember(Name = "startedDate", EmitDefaultValue = false)]
        public DateTimeOffset StartedDate { get; set; }

        /// <summary>
        /// Gets or Sets FinishedDate
        /// </summary>
        [DataMember(Name = "finishedDate", EmitDefaultValue = false)]
        public DateTimeOffset FinishedDate { get; set; }

        /// <summary>
        /// Gets or Sets IssueCounts
        /// </summary>
        [DataMember(Name = "issueCounts", EmitDefaultValue = false)]
        public CiIssueCounts IssueCounts { get; set; }

        /// <summary>
        /// Gets or Sets IsRequiredToPass
        /// </summary>
        [DataMember(Name = "isRequiredToPass", EmitDefaultValue = true)]
        public bool IsRequiredToPass { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CiBuildActionAttributes {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ActionType: ").Append(ActionType).Append("\n");
            sb.Append("  StartedDate: ").Append(StartedDate).Append("\n");
            sb.Append("  FinishedDate: ").Append(FinishedDate).Append("\n");
            sb.Append("  IssueCounts: ").Append(IssueCounts).Append("\n");
            sb.Append("  ExecutionProgress: ").Append(ExecutionProgress).Append("\n");
            sb.Append("  CompletionStatus: ").Append(CompletionStatus).Append("\n");
            sb.Append("  IsRequiredToPass: ").Append(IsRequiredToPass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CiBuildActionAttributes);
        }

        /// <summary>
        /// Returns true if CiBuildActionAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of CiBuildActionAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CiBuildActionAttributes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ActionType == input.ActionType ||
                    this.ActionType.Equals(input.ActionType)
                ) && 
                (
                    this.StartedDate == input.StartedDate ||
                    (this.StartedDate != null &&
                    this.StartedDate.Equals(input.StartedDate))
                ) && 
                (
                    this.FinishedDate == input.FinishedDate ||
                    (this.FinishedDate != null &&
                    this.FinishedDate.Equals(input.FinishedDate))
                ) && 
                (
                    this.IssueCounts == input.IssueCounts ||
                    (this.IssueCounts != null &&
                    this.IssueCounts.Equals(input.IssueCounts))
                ) && 
                (
                    this.ExecutionProgress == input.ExecutionProgress ||
                    this.ExecutionProgress.Equals(input.ExecutionProgress)
                ) && 
                (
                    this.CompletionStatus == input.CompletionStatus ||
                    this.CompletionStatus.Equals(input.CompletionStatus)
                ) && 
                (
                    this.IsRequiredToPass == input.IsRequiredToPass ||
                    this.IsRequiredToPass.Equals(input.IsRequiredToPass)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ActionType.GetHashCode();
                if (this.StartedDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartedDate.GetHashCode();
                }
                if (this.FinishedDate != null)
                {
                    hashCode = (hashCode * 59) + this.FinishedDate.GetHashCode();
                }
                if (this.IssueCounts != null)
                {
                    hashCode = (hashCode * 59) + this.IssueCounts.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExecutionProgress.GetHashCode();
                hashCode = (hashCode * 59) + this.CompletionStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.IsRequiredToPass.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
