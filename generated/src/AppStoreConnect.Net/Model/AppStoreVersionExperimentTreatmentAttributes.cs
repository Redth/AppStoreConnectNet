/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Model
{
    /// <summary>
    /// AppStoreVersionExperimentTreatmentAttributes
    /// </summary>
    [DataContract(Name = "AppStoreVersionExperimentTreatment_attributes")]
    public partial class AppStoreVersionExperimentTreatmentAttributes : IEquatable<AppStoreVersionExperimentTreatmentAttributes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppStoreVersionExperimentTreatmentAttributes" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="appIcon">appIcon.</param>
        /// <param name="appIconName">appIconName.</param>
        /// <param name="promotedDate">promotedDate.</param>
        public AppStoreVersionExperimentTreatmentAttributes(string name = default(string), ImageAsset appIcon = default(ImageAsset), string appIconName = default(string), DateTimeOffset promotedDate = default(DateTimeOffset))
        {
            this.Name = name;
            this.AppIcon = appIcon;
            this.AppIconName = appIconName;
            this.PromotedDate = promotedDate;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets AppIcon
        /// </summary>
        [DataMember(Name = "appIcon", EmitDefaultValue = false)]
        public ImageAsset AppIcon { get; set; }

        /// <summary>
        /// Gets or Sets AppIconName
        /// </summary>
        [DataMember(Name = "appIconName", EmitDefaultValue = false)]
        public string AppIconName { get; set; }

        /// <summary>
        /// Gets or Sets PromotedDate
        /// </summary>
        [DataMember(Name = "promotedDate", EmitDefaultValue = false)]
        public DateTimeOffset PromotedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppStoreVersionExperimentTreatmentAttributes {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AppIcon: ").Append(AppIcon).Append("\n");
            sb.Append("  AppIconName: ").Append(AppIconName).Append("\n");
            sb.Append("  PromotedDate: ").Append(PromotedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppStoreVersionExperimentTreatmentAttributes);
        }

        /// <summary>
        /// Returns true if AppStoreVersionExperimentTreatmentAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of AppStoreVersionExperimentTreatmentAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppStoreVersionExperimentTreatmentAttributes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.AppIcon == input.AppIcon ||
                    (this.AppIcon != null &&
                    this.AppIcon.Equals(input.AppIcon))
                ) && 
                (
                    this.AppIconName == input.AppIconName ||
                    (this.AppIconName != null &&
                    this.AppIconName.Equals(input.AppIconName))
                ) && 
                (
                    this.PromotedDate == input.PromotedDate ||
                    (this.PromotedDate != null &&
                    this.PromotedDate.Equals(input.PromotedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.AppIcon != null)
                {
                    hashCode = (hashCode * 59) + this.AppIcon.GetHashCode();
                }
                if (this.AppIconName != null)
                {
                    hashCode = (hashCode * 59) + this.AppIconName.GetHashCode();
                }
                if (this.PromotedDate != null)
                {
                    hashCode = (hashCode * 59) + this.PromotedDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
