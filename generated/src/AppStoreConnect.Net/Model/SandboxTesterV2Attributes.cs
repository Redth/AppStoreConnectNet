/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Model
{
    /// <summary>
    /// SandboxTesterV2Attributes
    /// </summary>
    [DataContract(Name = "SandboxTesterV2_attributes")]
    public partial class SandboxTesterV2Attributes : IEquatable<SandboxTesterV2Attributes>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Territory
        /// </summary>
        [DataMember(Name = "territory", EmitDefaultValue = false)]
        public TerritoryCode? Territory { get; set; }
        /// <summary>
        /// Defines SubscriptionRenewalRate
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SubscriptionRenewalRateEnum
        {
            /// <summary>
            /// Enum ONEHOUR for value: MONTHLY_RENEWAL_EVERY_ONE_HOUR
            /// </summary>
            [EnumMember(Value = "MONTHLY_RENEWAL_EVERY_ONE_HOUR")]
            ONEHOUR = 1,

            /// <summary>
            /// Enum THIRTYMINUTES for value: MONTHLY_RENEWAL_EVERY_THIRTY_MINUTES
            /// </summary>
            [EnumMember(Value = "MONTHLY_RENEWAL_EVERY_THIRTY_MINUTES")]
            THIRTYMINUTES = 2,

            /// <summary>
            /// Enum FIFTEENMINUTES for value: MONTHLY_RENEWAL_EVERY_FIFTEEN_MINUTES
            /// </summary>
            [EnumMember(Value = "MONTHLY_RENEWAL_EVERY_FIFTEEN_MINUTES")]
            FIFTEENMINUTES = 3,

            /// <summary>
            /// Enum FIVEMINUTES for value: MONTHLY_RENEWAL_EVERY_FIVE_MINUTES
            /// </summary>
            [EnumMember(Value = "MONTHLY_RENEWAL_EVERY_FIVE_MINUTES")]
            FIVEMINUTES = 4,

            /// <summary>
            /// Enum THREEMINUTES for value: MONTHLY_RENEWAL_EVERY_THREE_MINUTES
            /// </summary>
            [EnumMember(Value = "MONTHLY_RENEWAL_EVERY_THREE_MINUTES")]
            THREEMINUTES = 5

        }


        /// <summary>
        /// Gets or Sets SubscriptionRenewalRate
        /// </summary>
        [DataMember(Name = "subscriptionRenewalRate", EmitDefaultValue = false)]
        public SubscriptionRenewalRateEnum? SubscriptionRenewalRate { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SandboxTesterV2Attributes" /> class.
        /// </summary>
        /// <param name="firstName">firstName.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="acAccountName">acAccountName.</param>
        /// <param name="territory">territory.</param>
        /// <param name="applePayCompatible">applePayCompatible.</param>
        /// <param name="interruptPurchases">interruptPurchases.</param>
        /// <param name="subscriptionRenewalRate">subscriptionRenewalRate.</param>
        public SandboxTesterV2Attributes(string firstName = default(string), string lastName = default(string), string acAccountName = default(string), TerritoryCode? territory = default(TerritoryCode?), bool applePayCompatible = default(bool), bool interruptPurchases = default(bool), SubscriptionRenewalRateEnum? subscriptionRenewalRate = default(SubscriptionRenewalRateEnum?))
        {
            this.FirstName = firstName;
            this.LastName = lastName;
            this.AcAccountName = acAccountName;
            this.Territory = territory;
            this.ApplePayCompatible = applePayCompatible;
            this.InterruptPurchases = interruptPurchases;
            this.SubscriptionRenewalRate = subscriptionRenewalRate;
        }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "firstName", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "lastName", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets AcAccountName
        /// </summary>
        [DataMember(Name = "acAccountName", EmitDefaultValue = false)]
        public string AcAccountName { get; set; }

        /// <summary>
        /// Gets or Sets ApplePayCompatible
        /// </summary>
        [DataMember(Name = "applePayCompatible", EmitDefaultValue = true)]
        public bool ApplePayCompatible { get; set; }

        /// <summary>
        /// Gets or Sets InterruptPurchases
        /// </summary>
        [DataMember(Name = "interruptPurchases", EmitDefaultValue = true)]
        public bool InterruptPurchases { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SandboxTesterV2Attributes {\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  AcAccountName: ").Append(AcAccountName).Append("\n");
            sb.Append("  Territory: ").Append(Territory).Append("\n");
            sb.Append("  ApplePayCompatible: ").Append(ApplePayCompatible).Append("\n");
            sb.Append("  InterruptPurchases: ").Append(InterruptPurchases).Append("\n");
            sb.Append("  SubscriptionRenewalRate: ").Append(SubscriptionRenewalRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SandboxTesterV2Attributes);
        }

        /// <summary>
        /// Returns true if SandboxTesterV2Attributes instances are equal
        /// </summary>
        /// <param name="input">Instance of SandboxTesterV2Attributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SandboxTesterV2Attributes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.AcAccountName == input.AcAccountName ||
                    (this.AcAccountName != null &&
                    this.AcAccountName.Equals(input.AcAccountName))
                ) && 
                (
                    this.Territory == input.Territory ||
                    this.Territory.Equals(input.Territory)
                ) && 
                (
                    this.ApplePayCompatible == input.ApplePayCompatible ||
                    this.ApplePayCompatible.Equals(input.ApplePayCompatible)
                ) && 
                (
                    this.InterruptPurchases == input.InterruptPurchases ||
                    this.InterruptPurchases.Equals(input.InterruptPurchases)
                ) && 
                (
                    this.SubscriptionRenewalRate == input.SubscriptionRenewalRate ||
                    this.SubscriptionRenewalRate.Equals(input.SubscriptionRenewalRate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                if (this.AcAccountName != null)
                {
                    hashCode = (hashCode * 59) + this.AcAccountName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Territory.GetHashCode();
                hashCode = (hashCode * 59) + this.ApplePayCompatible.GetHashCode();
                hashCode = (hashCode * 59) + this.InterruptPurchases.GetHashCode();
                hashCode = (hashCode * 59) + this.SubscriptionRenewalRate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
