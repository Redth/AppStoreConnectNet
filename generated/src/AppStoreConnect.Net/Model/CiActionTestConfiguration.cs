/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Model
{
    /// <summary>
    /// CiActionTestConfiguration
    /// </summary>
    [DataContract(Name = "CiAction_testConfiguration")]
    public partial class CiActionTestConfiguration : IEquatable<CiActionTestConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Defines Kind
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum KindEnum
        {
            /// <summary>
            /// Enum USESCHEMESETTINGS for value: USE_SCHEME_SETTINGS
            /// </summary>
            [EnumMember(Value = "USE_SCHEME_SETTINGS")]
            USESCHEMESETTINGS = 1,

            /// <summary>
            /// Enum SPECIFICTESTPLANS for value: SPECIFIC_TEST_PLANS
            /// </summary>
            [EnumMember(Value = "SPECIFIC_TEST_PLANS")]
            SPECIFICTESTPLANS = 2

        }


        /// <summary>
        /// Gets or Sets Kind
        /// </summary>
        [DataMember(Name = "kind", EmitDefaultValue = false)]
        public KindEnum? Kind { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CiActionTestConfiguration" /> class.
        /// </summary>
        /// <param name="kind">kind.</param>
        /// <param name="testPlanName">testPlanName.</param>
        /// <param name="testDestinations">testDestinations.</param>
        public CiActionTestConfiguration(KindEnum? kind = default(KindEnum?), string testPlanName = default(string), List<CiTestDestination> testDestinations = default(List<CiTestDestination>))
        {
            this.Kind = kind;
            this.TestPlanName = testPlanName;
            this.TestDestinations = testDestinations;
        }

        /// <summary>
        /// Gets or Sets TestPlanName
        /// </summary>
        [DataMember(Name = "testPlanName", EmitDefaultValue = false)]
        public string TestPlanName { get; set; }

        /// <summary>
        /// Gets or Sets TestDestinations
        /// </summary>
        [DataMember(Name = "testDestinations", EmitDefaultValue = false)]
        public List<CiTestDestination> TestDestinations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CiActionTestConfiguration {\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  TestPlanName: ").Append(TestPlanName).Append("\n");
            sb.Append("  TestDestinations: ").Append(TestDestinations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CiActionTestConfiguration);
        }

        /// <summary>
        /// Returns true if CiActionTestConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of CiActionTestConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CiActionTestConfiguration input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Kind == input.Kind ||
                    this.Kind.Equals(input.Kind)
                ) && 
                (
                    this.TestPlanName == input.TestPlanName ||
                    (this.TestPlanName != null &&
                    this.TestPlanName.Equals(input.TestPlanName))
                ) && 
                (
                    this.TestDestinations == input.TestDestinations ||
                    this.TestDestinations != null &&
                    input.TestDestinations != null &&
                    this.TestDestinations.SequenceEqual(input.TestDestinations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Kind.GetHashCode();
                if (this.TestPlanName != null)
                {
                    hashCode = (hashCode * 59) + this.TestPlanName.GetHashCode();
                }
                if (this.TestDestinations != null)
                {
                    hashCode = (hashCode * 59) + this.TestDestinations.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
