/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Model
{
    /// <summary>
    /// UserInvitationCreateRequestDataAttributes
    /// </summary>
    [DataContract(Name = "UserInvitationCreateRequest_data_attributes")]
    public partial class UserInvitationCreateRequestDataAttributes : IEquatable<UserInvitationCreateRequestDataAttributes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserInvitationCreateRequestDataAttributes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserInvitationCreateRequestDataAttributes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserInvitationCreateRequestDataAttributes" /> class.
        /// </summary>
        /// <param name="email">email (required).</param>
        /// <param name="firstName">firstName (required).</param>
        /// <param name="lastName">lastName (required).</param>
        /// <param name="roles">roles (required).</param>
        /// <param name="allAppsVisible">allAppsVisible.</param>
        /// <param name="provisioningAllowed">provisioningAllowed.</param>
        public UserInvitationCreateRequestDataAttributes(string email = default(string), string firstName = default(string), string lastName = default(string), List<UserRole> roles = default(List<UserRole>), bool allAppsVisible = default(bool), bool provisioningAllowed = default(bool))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for UserInvitationCreateRequestDataAttributes and cannot be null");
            }
            this.Email = email;
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new ArgumentNullException("firstName is a required property for UserInvitationCreateRequestDataAttributes and cannot be null");
            }
            this.FirstName = firstName;
            // to ensure "lastName" is required (not null)
            if (lastName == null)
            {
                throw new ArgumentNullException("lastName is a required property for UserInvitationCreateRequestDataAttributes and cannot be null");
            }
            this.LastName = lastName;
            // to ensure "roles" is required (not null)
            if (roles == null)
            {
                throw new ArgumentNullException("roles is a required property for UserInvitationCreateRequestDataAttributes and cannot be null");
            }
            this.Roles = roles;
            this.AllAppsVisible = allAppsVisible;
            this.ProvisioningAllowed = provisioningAllowed;
        }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "firstName", IsRequired = true, EmitDefaultValue = true)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "lastName", IsRequired = true, EmitDefaultValue = true)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets Roles
        /// </summary>
        [DataMember(Name = "roles", IsRequired = true, EmitDefaultValue = true)]
        public List<UserRole> Roles { get; set; }

        /// <summary>
        /// Gets or Sets AllAppsVisible
        /// </summary>
        [DataMember(Name = "allAppsVisible", EmitDefaultValue = true)]
        public bool AllAppsVisible { get; set; }

        /// <summary>
        /// Gets or Sets ProvisioningAllowed
        /// </summary>
        [DataMember(Name = "provisioningAllowed", EmitDefaultValue = true)]
        public bool ProvisioningAllowed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserInvitationCreateRequestDataAttributes {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  AllAppsVisible: ").Append(AllAppsVisible).Append("\n");
            sb.Append("  ProvisioningAllowed: ").Append(ProvisioningAllowed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserInvitationCreateRequestDataAttributes);
        }

        /// <summary>
        /// Returns true if UserInvitationCreateRequestDataAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of UserInvitationCreateRequestDataAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserInvitationCreateRequestDataAttributes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Roles == input.Roles ||
                    this.Roles != null &&
                    input.Roles != null &&
                    this.Roles.SequenceEqual(input.Roles)
                ) && 
                (
                    this.AllAppsVisible == input.AllAppsVisible ||
                    this.AllAppsVisible.Equals(input.AllAppsVisible)
                ) && 
                (
                    this.ProvisioningAllowed == input.ProvisioningAllowed ||
                    this.ProvisioningAllowed.Equals(input.ProvisioningAllowed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                if (this.Roles != null)
                {
                    hashCode = (hashCode * 59) + this.Roles.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AllAppsVisible.GetHashCode();
                hashCode = (hashCode * 59) + this.ProvisioningAllowed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
