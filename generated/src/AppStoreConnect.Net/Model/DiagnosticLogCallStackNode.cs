/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Model
{
    /// <summary>
    /// DiagnosticLogCallStackNode
    /// </summary>
    [DataContract(Name = "DiagnosticLogCallStackNode")]
    public partial class DiagnosticLogCallStackNode : IEquatable<DiagnosticLogCallStackNode>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagnosticLogCallStackNode" /> class.
        /// </summary>
        /// <param name="sampleCount">sampleCount.</param>
        /// <param name="isBlameFrame">isBlameFrame.</param>
        /// <param name="symbolName">symbolName.</param>
        /// <param name="insightsCategory">insightsCategory.</param>
        /// <param name="offsetIntoSymbol">offsetIntoSymbol.</param>
        /// <param name="binaryName">binaryName.</param>
        /// <param name="fileName">fileName.</param>
        /// <param name="binaryUUID">binaryUUID.</param>
        /// <param name="lineNumber">lineNumber.</param>
        /// <param name="address">address.</param>
        /// <param name="offsetIntoBinaryTextSegment">offsetIntoBinaryTextSegment.</param>
        /// <param name="rawFrame">rawFrame.</param>
        /// <param name="subFrames">subFrames.</param>
        public DiagnosticLogCallStackNode(int sampleCount = default(int), bool isBlameFrame = default(bool), string symbolName = default(string), string insightsCategory = default(string), string offsetIntoSymbol = default(string), string binaryName = default(string), string fileName = default(string), string binaryUUID = default(string), string lineNumber = default(string), string address = default(string), string offsetIntoBinaryTextSegment = default(string), string rawFrame = default(string), List<DiagnosticLogCallStackNode> subFrames = default(List<DiagnosticLogCallStackNode>))
        {
            this.SampleCount = sampleCount;
            this.IsBlameFrame = isBlameFrame;
            this.SymbolName = symbolName;
            this.InsightsCategory = insightsCategory;
            this.OffsetIntoSymbol = offsetIntoSymbol;
            this.BinaryName = binaryName;
            this.FileName = fileName;
            this.BinaryUUID = binaryUUID;
            this.LineNumber = lineNumber;
            this.Address = address;
            this.OffsetIntoBinaryTextSegment = offsetIntoBinaryTextSegment;
            this.RawFrame = rawFrame;
            this.SubFrames = subFrames;
        }

        /// <summary>
        /// Gets or Sets SampleCount
        /// </summary>
        [DataMember(Name = "sampleCount", EmitDefaultValue = false)]
        public int SampleCount { get; set; }

        /// <summary>
        /// Gets or Sets IsBlameFrame
        /// </summary>
        [DataMember(Name = "isBlameFrame", EmitDefaultValue = true)]
        public bool IsBlameFrame { get; set; }

        /// <summary>
        /// Gets or Sets SymbolName
        /// </summary>
        [DataMember(Name = "symbolName", EmitDefaultValue = false)]
        public string SymbolName { get; set; }

        /// <summary>
        /// Gets or Sets InsightsCategory
        /// </summary>
        [DataMember(Name = "insightsCategory", EmitDefaultValue = false)]
        public string InsightsCategory { get; set; }

        /// <summary>
        /// Gets or Sets OffsetIntoSymbol
        /// </summary>
        [DataMember(Name = "offsetIntoSymbol", EmitDefaultValue = false)]
        public string OffsetIntoSymbol { get; set; }

        /// <summary>
        /// Gets or Sets BinaryName
        /// </summary>
        [DataMember(Name = "binaryName", EmitDefaultValue = false)]
        public string BinaryName { get; set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [DataMember(Name = "fileName", EmitDefaultValue = false)]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or Sets BinaryUUID
        /// </summary>
        [DataMember(Name = "binaryUUID", EmitDefaultValue = false)]
        public string BinaryUUID { get; set; }

        /// <summary>
        /// Gets or Sets LineNumber
        /// </summary>
        [DataMember(Name = "lineNumber", EmitDefaultValue = false)]
        public string LineNumber { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets OffsetIntoBinaryTextSegment
        /// </summary>
        [DataMember(Name = "offsetIntoBinaryTextSegment", EmitDefaultValue = false)]
        public string OffsetIntoBinaryTextSegment { get; set; }

        /// <summary>
        /// Gets or Sets RawFrame
        /// </summary>
        [DataMember(Name = "rawFrame", EmitDefaultValue = false)]
        public string RawFrame { get; set; }

        /// <summary>
        /// Gets or Sets SubFrames
        /// </summary>
        [DataMember(Name = "subFrames", EmitDefaultValue = false)]
        public List<DiagnosticLogCallStackNode> SubFrames { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiagnosticLogCallStackNode {\n");
            sb.Append("  SampleCount: ").Append(SampleCount).Append("\n");
            sb.Append("  IsBlameFrame: ").Append(IsBlameFrame).Append("\n");
            sb.Append("  SymbolName: ").Append(SymbolName).Append("\n");
            sb.Append("  InsightsCategory: ").Append(InsightsCategory).Append("\n");
            sb.Append("  OffsetIntoSymbol: ").Append(OffsetIntoSymbol).Append("\n");
            sb.Append("  BinaryName: ").Append(BinaryName).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  BinaryUUID: ").Append(BinaryUUID).Append("\n");
            sb.Append("  LineNumber: ").Append(LineNumber).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  OffsetIntoBinaryTextSegment: ").Append(OffsetIntoBinaryTextSegment).Append("\n");
            sb.Append("  RawFrame: ").Append(RawFrame).Append("\n");
            sb.Append("  SubFrames: ").Append(SubFrames).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiagnosticLogCallStackNode);
        }

        /// <summary>
        /// Returns true if DiagnosticLogCallStackNode instances are equal
        /// </summary>
        /// <param name="input">Instance of DiagnosticLogCallStackNode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagnosticLogCallStackNode input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SampleCount == input.SampleCount ||
                    this.SampleCount.Equals(input.SampleCount)
                ) && 
                (
                    this.IsBlameFrame == input.IsBlameFrame ||
                    this.IsBlameFrame.Equals(input.IsBlameFrame)
                ) && 
                (
                    this.SymbolName == input.SymbolName ||
                    (this.SymbolName != null &&
                    this.SymbolName.Equals(input.SymbolName))
                ) && 
                (
                    this.InsightsCategory == input.InsightsCategory ||
                    (this.InsightsCategory != null &&
                    this.InsightsCategory.Equals(input.InsightsCategory))
                ) && 
                (
                    this.OffsetIntoSymbol == input.OffsetIntoSymbol ||
                    (this.OffsetIntoSymbol != null &&
                    this.OffsetIntoSymbol.Equals(input.OffsetIntoSymbol))
                ) && 
                (
                    this.BinaryName == input.BinaryName ||
                    (this.BinaryName != null &&
                    this.BinaryName.Equals(input.BinaryName))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.BinaryUUID == input.BinaryUUID ||
                    (this.BinaryUUID != null &&
                    this.BinaryUUID.Equals(input.BinaryUUID))
                ) && 
                (
                    this.LineNumber == input.LineNumber ||
                    (this.LineNumber != null &&
                    this.LineNumber.Equals(input.LineNumber))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.OffsetIntoBinaryTextSegment == input.OffsetIntoBinaryTextSegment ||
                    (this.OffsetIntoBinaryTextSegment != null &&
                    this.OffsetIntoBinaryTextSegment.Equals(input.OffsetIntoBinaryTextSegment))
                ) && 
                (
                    this.RawFrame == input.RawFrame ||
                    (this.RawFrame != null &&
                    this.RawFrame.Equals(input.RawFrame))
                ) && 
                (
                    this.SubFrames == input.SubFrames ||
                    this.SubFrames != null &&
                    input.SubFrames != null &&
                    this.SubFrames.SequenceEqual(input.SubFrames)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SampleCount.GetHashCode();
                hashCode = (hashCode * 59) + this.IsBlameFrame.GetHashCode();
                if (this.SymbolName != null)
                {
                    hashCode = (hashCode * 59) + this.SymbolName.GetHashCode();
                }
                if (this.InsightsCategory != null)
                {
                    hashCode = (hashCode * 59) + this.InsightsCategory.GetHashCode();
                }
                if (this.OffsetIntoSymbol != null)
                {
                    hashCode = (hashCode * 59) + this.OffsetIntoSymbol.GetHashCode();
                }
                if (this.BinaryName != null)
                {
                    hashCode = (hashCode * 59) + this.BinaryName.GetHashCode();
                }
                if (this.FileName != null)
                {
                    hashCode = (hashCode * 59) + this.FileName.GetHashCode();
                }
                if (this.BinaryUUID != null)
                {
                    hashCode = (hashCode * 59) + this.BinaryUUID.GetHashCode();
                }
                if (this.LineNumber != null)
                {
                    hashCode = (hashCode * 59) + this.LineNumber.GetHashCode();
                }
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.OffsetIntoBinaryTextSegment != null)
                {
                    hashCode = (hashCode * 59) + this.OffsetIntoBinaryTextSegment.GetHashCode();
                }
                if (this.RawFrame != null)
                {
                    hashCode = (hashCode * 59) + this.RawFrame.GetHashCode();
                }
                if (this.SubFrames != null)
                {
                    hashCode = (hashCode * 59) + this.SubFrames.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
