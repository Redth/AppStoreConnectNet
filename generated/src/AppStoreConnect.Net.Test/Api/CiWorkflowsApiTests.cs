/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using AppStoreConnect.Client;
using AppStoreConnect.Api;
// uncomment below to import models
//using AppStoreConnect.Model;

namespace AppStoreConnect.Test.Api
{
    /// <summary>
    ///  Class for testing CiWorkflowsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CiWorkflowsApiTests : IDisposable
    {
        private CiWorkflowsApi instance;

        public CiWorkflowsApiTests()
        {
            instance = new CiWorkflowsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CiWorkflowsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' CiWorkflowsApi
            //Assert.IsType<CiWorkflowsApi>(instance);
        }

        /// <summary>
        /// Test CiWorkflowsBuildRunsGetToManyRelated
        /// </summary>
        [Fact]
        public void CiWorkflowsBuildRunsGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? filterBuilds = null;
            //List<string>? fieldsScmGitReferences = null;
            //List<string>? fieldsCiBuildRuns = null;
            //List<string>? fieldsCiWorkflows = null;
            //List<string>? fieldsScmPullRequests = null;
            //List<string>? fieldsCiProducts = null;
            //List<string>? fieldsBuilds = null;
            //int? limit = null;
            //int? limitBuilds = null;
            //List<string>? include = null;
            //var response = instance.CiWorkflowsBuildRunsGetToManyRelated(id, filterBuilds, fieldsScmGitReferences, fieldsCiBuildRuns, fieldsCiWorkflows, fieldsScmPullRequests, fieldsCiProducts, fieldsBuilds, limit, limitBuilds, include);
            //Assert.IsType<CiBuildRunsResponse>(response);
        }

        /// <summary>
        /// Test CiWorkflowsCreateInstance
        /// </summary>
        [Fact]
        public void CiWorkflowsCreateInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CiWorkflowCreateRequest ciWorkflowCreateRequest = null;
            //var response = instance.CiWorkflowsCreateInstance(ciWorkflowCreateRequest);
            //Assert.IsType<CiWorkflowResponse>(response);
        }

        /// <summary>
        /// Test CiWorkflowsDeleteInstance
        /// </summary>
        [Fact]
        public void CiWorkflowsDeleteInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.CiWorkflowsDeleteInstance(id);
        }

        /// <summary>
        /// Test CiWorkflowsGetInstance
        /// </summary>
        [Fact]
        public void CiWorkflowsGetInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsCiWorkflows = null;
            //List<string>? include = null;
            //List<string>? fieldsCiBuildRuns = null;
            //List<string>? fieldsScmRepositories = null;
            //var response = instance.CiWorkflowsGetInstance(id, fieldsCiWorkflows, include, fieldsCiBuildRuns, fieldsScmRepositories);
            //Assert.IsType<CiWorkflowResponse>(response);
        }

        /// <summary>
        /// Test CiWorkflowsRepositoryGetToOneRelated
        /// </summary>
        [Fact]
        public void CiWorkflowsRepositoryGetToOneRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsScmGitReferences = null;
            //List<string>? fieldsScmProviders = null;
            //List<string>? fieldsScmRepositories = null;
            //List<string>? include = null;
            //var response = instance.CiWorkflowsRepositoryGetToOneRelated(id, fieldsScmGitReferences, fieldsScmProviders, fieldsScmRepositories, include);
            //Assert.IsType<ScmRepositoryResponse>(response);
        }

        /// <summary>
        /// Test CiWorkflowsUpdateInstance
        /// </summary>
        [Fact]
        public void CiWorkflowsUpdateInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //CiWorkflowUpdateRequest ciWorkflowUpdateRequest = null;
            //var response = instance.CiWorkflowsUpdateInstance(id, ciWorkflowUpdateRequest);
            //Assert.IsType<CiWorkflowResponse>(response);
        }
    }
}
