/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using AppStoreConnect.Client;
using AppStoreConnect.Api;
// uncomment below to import models
//using AppStoreConnect.Model;

namespace AppStoreConnect.Test.Api
{
    /// <summary>
    ///  Class for testing AppInfosApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AppInfosApiTests : IDisposable
    {
        private AppInfosApi instance;

        public AppInfosApiTests()
        {
            instance = new AppInfosApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AppInfosApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AppInfosApi
            //Assert.IsType<AppInfosApi>(instance);
        }

        /// <summary>
        /// Test AppInfosAgeRatingDeclarationGetToOneRelated
        /// </summary>
        [Fact]
        public void AppInfosAgeRatingDeclarationGetToOneRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsAgeRatingDeclarations = null;
            //var response = instance.AppInfosAgeRatingDeclarationGetToOneRelated(id, fieldsAgeRatingDeclarations);
            //Assert.IsType<AgeRatingDeclarationResponse>(response);
        }

        /// <summary>
        /// Test AppInfosAppInfoLocalizationsGetToManyRelated
        /// </summary>
        [Fact]
        public void AppInfosAppInfoLocalizationsGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? filterLocale = null;
            //List<string>? fieldsAppInfos = null;
            //List<string>? fieldsAppInfoLocalizations = null;
            //int? limit = null;
            //List<string>? include = null;
            //var response = instance.AppInfosAppInfoLocalizationsGetToManyRelated(id, filterLocale, fieldsAppInfos, fieldsAppInfoLocalizations, limit, include);
            //Assert.IsType<AppInfoLocalizationsResponse>(response);
        }

        /// <summary>
        /// Test AppInfosGetInstance
        /// </summary>
        [Fact]
        public void AppInfosGetInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsAppInfos = null;
            //List<string>? include = null;
            //List<string>? fieldsAgeRatingDeclarations = null;
            //List<string>? fieldsAppInfoLocalizations = null;
            //List<string>? fieldsAppCategories = null;
            //int? limitAppInfoLocalizations = null;
            //var response = instance.AppInfosGetInstance(id, fieldsAppInfos, include, fieldsAgeRatingDeclarations, fieldsAppInfoLocalizations, fieldsAppCategories, limitAppInfoLocalizations);
            //Assert.IsType<AppInfoResponse>(response);
        }

        /// <summary>
        /// Test AppInfosPrimaryCategoryGetToOneRelated
        /// </summary>
        [Fact]
        public void AppInfosPrimaryCategoryGetToOneRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsAppCategories = null;
            //int? limitSubcategories = null;
            //List<string>? include = null;
            //var response = instance.AppInfosPrimaryCategoryGetToOneRelated(id, fieldsAppCategories, limitSubcategories, include);
            //Assert.IsType<AppCategoryResponse>(response);
        }

        /// <summary>
        /// Test AppInfosPrimarySubcategoryOneGetToOneRelated
        /// </summary>
        [Fact]
        public void AppInfosPrimarySubcategoryOneGetToOneRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsAppCategories = null;
            //int? limitSubcategories = null;
            //List<string>? include = null;
            //var response = instance.AppInfosPrimarySubcategoryOneGetToOneRelated(id, fieldsAppCategories, limitSubcategories, include);
            //Assert.IsType<AppCategoryResponse>(response);
        }

        /// <summary>
        /// Test AppInfosPrimarySubcategoryTwoGetToOneRelated
        /// </summary>
        [Fact]
        public void AppInfosPrimarySubcategoryTwoGetToOneRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsAppCategories = null;
            //int? limitSubcategories = null;
            //List<string>? include = null;
            //var response = instance.AppInfosPrimarySubcategoryTwoGetToOneRelated(id, fieldsAppCategories, limitSubcategories, include);
            //Assert.IsType<AppCategoryResponse>(response);
        }

        /// <summary>
        /// Test AppInfosSecondaryCategoryGetToOneRelated
        /// </summary>
        [Fact]
        public void AppInfosSecondaryCategoryGetToOneRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsAppCategories = null;
            //int? limitSubcategories = null;
            //List<string>? include = null;
            //var response = instance.AppInfosSecondaryCategoryGetToOneRelated(id, fieldsAppCategories, limitSubcategories, include);
            //Assert.IsType<AppCategoryResponse>(response);
        }

        /// <summary>
        /// Test AppInfosSecondarySubcategoryOneGetToOneRelated
        /// </summary>
        [Fact]
        public void AppInfosSecondarySubcategoryOneGetToOneRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsAppCategories = null;
            //int? limitSubcategories = null;
            //List<string>? include = null;
            //var response = instance.AppInfosSecondarySubcategoryOneGetToOneRelated(id, fieldsAppCategories, limitSubcategories, include);
            //Assert.IsType<AppCategoryResponse>(response);
        }

        /// <summary>
        /// Test AppInfosSecondarySubcategoryTwoGetToOneRelated
        /// </summary>
        [Fact]
        public void AppInfosSecondarySubcategoryTwoGetToOneRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsAppCategories = null;
            //int? limitSubcategories = null;
            //List<string>? include = null;
            //var response = instance.AppInfosSecondarySubcategoryTwoGetToOneRelated(id, fieldsAppCategories, limitSubcategories, include);
            //Assert.IsType<AppCategoryResponse>(response);
        }

        /// <summary>
        /// Test AppInfosUpdateInstance
        /// </summary>
        [Fact]
        public void AppInfosUpdateInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //AppInfoUpdateRequest appInfoUpdateRequest = null;
            //var response = instance.AppInfosUpdateInstance(id, appInfoUpdateRequest);
            //Assert.IsType<AppInfoResponse>(response);
        }
    }
}
