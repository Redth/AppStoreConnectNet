/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using AppStoreConnect.Client;
using AppStoreConnect.Api;
// uncomment below to import models
//using AppStoreConnect.Model;

namespace AppStoreConnect.Test.Api
{
    /// <summary>
    ///  Class for testing BetaGroupsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class BetaGroupsApiTests : IDisposable
    {
        private BetaGroupsApi instance;

        public BetaGroupsApiTests()
        {
            instance = new BetaGroupsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of BetaGroupsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' BetaGroupsApi
            //Assert.IsType<BetaGroupsApi>(instance);
        }

        /// <summary>
        /// Test BetaGroupsAppGetToOneRelated
        /// </summary>
        [Fact]
        public void BetaGroupsAppGetToOneRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsApps = null;
            //var response = instance.BetaGroupsAppGetToOneRelated(id, fieldsApps);
            //Assert.IsType<AppResponse>(response);
        }

        /// <summary>
        /// Test BetaGroupsBetaTestersCreateToManyRelationship
        /// </summary>
        [Fact]
        public void BetaGroupsBetaTestersCreateToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //BetaGroupBetaTestersLinkagesRequest betaGroupBetaTestersLinkagesRequest = null;
            //instance.BetaGroupsBetaTestersCreateToManyRelationship(id, betaGroupBetaTestersLinkagesRequest);
        }

        /// <summary>
        /// Test BetaGroupsBetaTestersDeleteToManyRelationship
        /// </summary>
        [Fact]
        public void BetaGroupsBetaTestersDeleteToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //BetaGroupBetaTestersLinkagesRequest betaGroupBetaTestersLinkagesRequest = null;
            //instance.BetaGroupsBetaTestersDeleteToManyRelationship(id, betaGroupBetaTestersLinkagesRequest);
        }

        /// <summary>
        /// Test BetaGroupsBetaTestersGetToManyRelated
        /// </summary>
        [Fact]
        public void BetaGroupsBetaTestersGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsBetaTesters = null;
            //int? limit = null;
            //var response = instance.BetaGroupsBetaTestersGetToManyRelated(id, fieldsBetaTesters, limit);
            //Assert.IsType<BetaTestersResponse>(response);
        }

        /// <summary>
        /// Test BetaGroupsBetaTestersGetToManyRelationship
        /// </summary>
        [Fact]
        public void BetaGroupsBetaTestersGetToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //var response = instance.BetaGroupsBetaTestersGetToManyRelationship(id, limit);
            //Assert.IsType<BetaGroupBetaTestersLinkagesResponse>(response);
        }

        /// <summary>
        /// Test BetaGroupsBuildsCreateToManyRelationship
        /// </summary>
        [Fact]
        public void BetaGroupsBuildsCreateToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //BetaGroupBuildsLinkagesRequest betaGroupBuildsLinkagesRequest = null;
            //instance.BetaGroupsBuildsCreateToManyRelationship(id, betaGroupBuildsLinkagesRequest);
        }

        /// <summary>
        /// Test BetaGroupsBuildsDeleteToManyRelationship
        /// </summary>
        [Fact]
        public void BetaGroupsBuildsDeleteToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //BetaGroupBuildsLinkagesRequest betaGroupBuildsLinkagesRequest = null;
            //instance.BetaGroupsBuildsDeleteToManyRelationship(id, betaGroupBuildsLinkagesRequest);
        }

        /// <summary>
        /// Test BetaGroupsBuildsGetToManyRelated
        /// </summary>
        [Fact]
        public void BetaGroupsBuildsGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsBuilds = null;
            //int? limit = null;
            //var response = instance.BetaGroupsBuildsGetToManyRelated(id, fieldsBuilds, limit);
            //Assert.IsType<BuildsResponse>(response);
        }

        /// <summary>
        /// Test BetaGroupsBuildsGetToManyRelationship
        /// </summary>
        [Fact]
        public void BetaGroupsBuildsGetToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //var response = instance.BetaGroupsBuildsGetToManyRelationship(id, limit);
            //Assert.IsType<BetaGroupBuildsLinkagesResponse>(response);
        }

        /// <summary>
        /// Test BetaGroupsCreateInstance
        /// </summary>
        [Fact]
        public void BetaGroupsCreateInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BetaGroupCreateRequest betaGroupCreateRequest = null;
            //var response = instance.BetaGroupsCreateInstance(betaGroupCreateRequest);
            //Assert.IsType<BetaGroupResponse>(response);
        }

        /// <summary>
        /// Test BetaGroupsDeleteInstance
        /// </summary>
        [Fact]
        public void BetaGroupsDeleteInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.BetaGroupsDeleteInstance(id);
        }

        /// <summary>
        /// Test BetaGroupsGetCollection
        /// </summary>
        [Fact]
        public void BetaGroupsGetCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string>? filterIsInternalGroup = null;
            //List<string>? filterName = null;
            //List<string>? filterPublicLink = null;
            //List<string>? filterPublicLinkEnabled = null;
            //List<string>? filterPublicLinkLimitEnabled = null;
            //List<string>? filterApp = null;
            //List<string>? filterBuilds = null;
            //List<string>? filterId = null;
            //List<string>? sort = null;
            //List<string>? fieldsBetaGroups = null;
            //int? limit = null;
            //List<string>? include = null;
            //List<string>? fieldsBetaTesters = null;
            //List<string>? fieldsApps = null;
            //List<string>? fieldsBuilds = null;
            //int? limitBetaTesters = null;
            //int? limitBuilds = null;
            //var response = instance.BetaGroupsGetCollection(filterIsInternalGroup, filterName, filterPublicLink, filterPublicLinkEnabled, filterPublicLinkLimitEnabled, filterApp, filterBuilds, filterId, sort, fieldsBetaGroups, limit, include, fieldsBetaTesters, fieldsApps, fieldsBuilds, limitBetaTesters, limitBuilds);
            //Assert.IsType<BetaGroupsResponse>(response);
        }

        /// <summary>
        /// Test BetaGroupsGetInstance
        /// </summary>
        [Fact]
        public void BetaGroupsGetInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsBetaGroups = null;
            //List<string>? include = null;
            //List<string>? fieldsBetaTesters = null;
            //List<string>? fieldsApps = null;
            //List<string>? fieldsBuilds = null;
            //int? limitBetaTesters = null;
            //int? limitBuilds = null;
            //var response = instance.BetaGroupsGetInstance(id, fieldsBetaGroups, include, fieldsBetaTesters, fieldsApps, fieldsBuilds, limitBetaTesters, limitBuilds);
            //Assert.IsType<BetaGroupResponse>(response);
        }

        /// <summary>
        /// Test BetaGroupsUpdateInstance
        /// </summary>
        [Fact]
        public void BetaGroupsUpdateInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //BetaGroupUpdateRequest betaGroupUpdateRequest = null;
            //var response = instance.BetaGroupsUpdateInstance(id, betaGroupUpdateRequest);
            //Assert.IsType<BetaGroupResponse>(response);
        }
    }
}
