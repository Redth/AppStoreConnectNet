/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using AppStoreConnect.Client;
using AppStoreConnect.Api;
// uncomment below to import models
//using AppStoreConnect.Model;

namespace AppStoreConnect.Test.Api
{
    /// <summary>
    ///  Class for testing UsersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UsersApiTests : IDisposable
    {
        private UsersApi instance;

        public UsersApiTests()
        {
            instance = new UsersApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UsersApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' UsersApi
            //Assert.IsType<UsersApi>(instance);
        }

        /// <summary>
        /// Test UsersDeleteInstance
        /// </summary>
        [Fact]
        public void UsersDeleteInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.UsersDeleteInstance(id);
        }

        /// <summary>
        /// Test UsersGetCollection
        /// </summary>
        [Fact]
        public void UsersGetCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string>? filterRoles = null;
            //List<string>? filterUsername = null;
            //List<string>? filterVisibleApps = null;
            //List<string>? sort = null;
            //List<string>? fieldsUsers = null;
            //int? limit = null;
            //List<string>? include = null;
            //List<string>? fieldsApps = null;
            //int? limitVisibleApps = null;
            //var response = instance.UsersGetCollection(filterRoles, filterUsername, filterVisibleApps, sort, fieldsUsers, limit, include, fieldsApps, limitVisibleApps);
            //Assert.IsType<UsersResponse>(response);
        }

        /// <summary>
        /// Test UsersGetInstance
        /// </summary>
        [Fact]
        public void UsersGetInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsUsers = null;
            //List<string>? include = null;
            //List<string>? fieldsApps = null;
            //int? limitVisibleApps = null;
            //var response = instance.UsersGetInstance(id, fieldsUsers, include, fieldsApps, limitVisibleApps);
            //Assert.IsType<UserResponse>(response);
        }

        /// <summary>
        /// Test UsersUpdateInstance
        /// </summary>
        [Fact]
        public void UsersUpdateInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //UserUpdateRequest userUpdateRequest = null;
            //var response = instance.UsersUpdateInstance(id, userUpdateRequest);
            //Assert.IsType<UserResponse>(response);
        }

        /// <summary>
        /// Test UsersVisibleAppsCreateToManyRelationship
        /// </summary>
        [Fact]
        public void UsersVisibleAppsCreateToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //UserVisibleAppsLinkagesRequest userVisibleAppsLinkagesRequest = null;
            //instance.UsersVisibleAppsCreateToManyRelationship(id, userVisibleAppsLinkagesRequest);
        }

        /// <summary>
        /// Test UsersVisibleAppsDeleteToManyRelationship
        /// </summary>
        [Fact]
        public void UsersVisibleAppsDeleteToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //UserVisibleAppsLinkagesRequest userVisibleAppsLinkagesRequest = null;
            //instance.UsersVisibleAppsDeleteToManyRelationship(id, userVisibleAppsLinkagesRequest);
        }

        /// <summary>
        /// Test UsersVisibleAppsGetToManyRelated
        /// </summary>
        [Fact]
        public void UsersVisibleAppsGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsApps = null;
            //int? limit = null;
            //var response = instance.UsersVisibleAppsGetToManyRelated(id, fieldsApps, limit);
            //Assert.IsType<AppsResponse>(response);
        }

        /// <summary>
        /// Test UsersVisibleAppsGetToManyRelationship
        /// </summary>
        [Fact]
        public void UsersVisibleAppsGetToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //var response = instance.UsersVisibleAppsGetToManyRelationship(id, limit);
            //Assert.IsType<UserVisibleAppsLinkagesResponse>(response);
        }

        /// <summary>
        /// Test UsersVisibleAppsReplaceToManyRelationship
        /// </summary>
        [Fact]
        public void UsersVisibleAppsReplaceToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //UserVisibleAppsLinkagesRequest userVisibleAppsLinkagesRequest = null;
            //instance.UsersVisibleAppsReplaceToManyRelationship(id, userVisibleAppsLinkagesRequest);
        }
    }
}
