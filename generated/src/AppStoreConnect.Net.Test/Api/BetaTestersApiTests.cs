/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using AppStoreConnect.Client;
using AppStoreConnect.Api;
// uncomment below to import models
//using AppStoreConnect.Model;

namespace AppStoreConnect.Test.Api
{
    /// <summary>
    ///  Class for testing BetaTestersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class BetaTestersApiTests : IDisposable
    {
        private BetaTestersApi instance;

        public BetaTestersApiTests()
        {
            instance = new BetaTestersApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of BetaTestersApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' BetaTestersApi
            //Assert.IsType<BetaTestersApi>(instance);
        }

        /// <summary>
        /// Test BetaTestersAppsDeleteToManyRelationship
        /// </summary>
        [Fact]
        public void BetaTestersAppsDeleteToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //BetaTesterAppsLinkagesRequest betaTesterAppsLinkagesRequest = null;
            //instance.BetaTestersAppsDeleteToManyRelationship(id, betaTesterAppsLinkagesRequest);
        }

        /// <summary>
        /// Test BetaTestersAppsGetToManyRelated
        /// </summary>
        [Fact]
        public void BetaTestersAppsGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsApps = null;
            //int? limit = null;
            //var response = instance.BetaTestersAppsGetToManyRelated(id, fieldsApps, limit);
            //Assert.IsType<AppsResponse>(response);
        }

        /// <summary>
        /// Test BetaTestersAppsGetToManyRelationship
        /// </summary>
        [Fact]
        public void BetaTestersAppsGetToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //var response = instance.BetaTestersAppsGetToManyRelationship(id, limit);
            //Assert.IsType<BetaTesterAppsLinkagesResponse>(response);
        }

        /// <summary>
        /// Test BetaTestersBetaGroupsCreateToManyRelationship
        /// </summary>
        [Fact]
        public void BetaTestersBetaGroupsCreateToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //BetaTesterBetaGroupsLinkagesRequest betaTesterBetaGroupsLinkagesRequest = null;
            //instance.BetaTestersBetaGroupsCreateToManyRelationship(id, betaTesterBetaGroupsLinkagesRequest);
        }

        /// <summary>
        /// Test BetaTestersBetaGroupsDeleteToManyRelationship
        /// </summary>
        [Fact]
        public void BetaTestersBetaGroupsDeleteToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //BetaTesterBetaGroupsLinkagesRequest betaTesterBetaGroupsLinkagesRequest = null;
            //instance.BetaTestersBetaGroupsDeleteToManyRelationship(id, betaTesterBetaGroupsLinkagesRequest);
        }

        /// <summary>
        /// Test BetaTestersBetaGroupsGetToManyRelated
        /// </summary>
        [Fact]
        public void BetaTestersBetaGroupsGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsBetaGroups = null;
            //int? limit = null;
            //var response = instance.BetaTestersBetaGroupsGetToManyRelated(id, fieldsBetaGroups, limit);
            //Assert.IsType<BetaGroupsResponse>(response);
        }

        /// <summary>
        /// Test BetaTestersBetaGroupsGetToManyRelationship
        /// </summary>
        [Fact]
        public void BetaTestersBetaGroupsGetToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //var response = instance.BetaTestersBetaGroupsGetToManyRelationship(id, limit);
            //Assert.IsType<BetaTesterBetaGroupsLinkagesResponse>(response);
        }

        /// <summary>
        /// Test BetaTestersBuildsCreateToManyRelationship
        /// </summary>
        [Fact]
        public void BetaTestersBuildsCreateToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //BetaTesterBuildsLinkagesRequest betaTesterBuildsLinkagesRequest = null;
            //instance.BetaTestersBuildsCreateToManyRelationship(id, betaTesterBuildsLinkagesRequest);
        }

        /// <summary>
        /// Test BetaTestersBuildsDeleteToManyRelationship
        /// </summary>
        [Fact]
        public void BetaTestersBuildsDeleteToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //BetaTesterBuildsLinkagesRequest betaTesterBuildsLinkagesRequest = null;
            //instance.BetaTestersBuildsDeleteToManyRelationship(id, betaTesterBuildsLinkagesRequest);
        }

        /// <summary>
        /// Test BetaTestersBuildsGetToManyRelated
        /// </summary>
        [Fact]
        public void BetaTestersBuildsGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsBuilds = null;
            //int? limit = null;
            //var response = instance.BetaTestersBuildsGetToManyRelated(id, fieldsBuilds, limit);
            //Assert.IsType<BuildsResponse>(response);
        }

        /// <summary>
        /// Test BetaTestersBuildsGetToManyRelationship
        /// </summary>
        [Fact]
        public void BetaTestersBuildsGetToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //var response = instance.BetaTestersBuildsGetToManyRelationship(id, limit);
            //Assert.IsType<BetaTesterBuildsLinkagesResponse>(response);
        }

        /// <summary>
        /// Test BetaTestersCreateInstance
        /// </summary>
        [Fact]
        public void BetaTestersCreateInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BetaTesterCreateRequest betaTesterCreateRequest = null;
            //var response = instance.BetaTestersCreateInstance(betaTesterCreateRequest);
            //Assert.IsType<BetaTesterResponse>(response);
        }

        /// <summary>
        /// Test BetaTestersDeleteInstance
        /// </summary>
        [Fact]
        public void BetaTestersDeleteInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.BetaTestersDeleteInstance(id);
        }

        /// <summary>
        /// Test BetaTestersGetCollection
        /// </summary>
        [Fact]
        public void BetaTestersGetCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string>? filterEmail = null;
            //List<string>? filterFirstName = null;
            //List<string>? filterInviteType = null;
            //List<string>? filterLastName = null;
            //List<string>? filterApps = null;
            //List<string>? filterBetaGroups = null;
            //List<string>? filterBuilds = null;
            //List<string>? filterId = null;
            //List<string>? sort = null;
            //List<string>? fieldsBetaTesters = null;
            //int? limit = null;
            //List<string>? include = null;
            //List<string>? fieldsApps = null;
            //List<string>? fieldsBuilds = null;
            //List<string>? fieldsBetaGroups = null;
            //int? limitApps = null;
            //int? limitBetaGroups = null;
            //int? limitBuilds = null;
            //var response = instance.BetaTestersGetCollection(filterEmail, filterFirstName, filterInviteType, filterLastName, filterApps, filterBetaGroups, filterBuilds, filterId, sort, fieldsBetaTesters, limit, include, fieldsApps, fieldsBuilds, fieldsBetaGroups, limitApps, limitBetaGroups, limitBuilds);
            //Assert.IsType<BetaTestersResponse>(response);
        }

        /// <summary>
        /// Test BetaTestersGetInstance
        /// </summary>
        [Fact]
        public void BetaTestersGetInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsBetaTesters = null;
            //List<string>? include = null;
            //List<string>? fieldsApps = null;
            //List<string>? fieldsBuilds = null;
            //List<string>? fieldsBetaGroups = null;
            //int? limitApps = null;
            //int? limitBetaGroups = null;
            //int? limitBuilds = null;
            //var response = instance.BetaTestersGetInstance(id, fieldsBetaTesters, include, fieldsApps, fieldsBuilds, fieldsBetaGroups, limitApps, limitBetaGroups, limitBuilds);
            //Assert.IsType<BetaTesterResponse>(response);
        }
    }
}
