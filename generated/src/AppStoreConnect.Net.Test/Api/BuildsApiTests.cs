/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using AppStoreConnect.Client;
using AppStoreConnect.Api;
// uncomment below to import models
//using AppStoreConnect.Model;

namespace AppStoreConnect.Test.Api
{
    /// <summary>
    ///  Class for testing BuildsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class BuildsApiTests : IDisposable
    {
        private BuildsApi instance;

        public BuildsApiTests()
        {
            instance = new BuildsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of BuildsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' BuildsApi
            //Assert.IsType<BuildsApi>(instance);
        }

        /// <summary>
        /// Test BuildsAppEncryptionDeclarationGetToOneRelated
        /// </summary>
        [Fact]
        public void BuildsAppEncryptionDeclarationGetToOneRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsAppEncryptionDeclarations = null;
            //var response = instance.BuildsAppEncryptionDeclarationGetToOneRelated(id, fieldsAppEncryptionDeclarations);
            //Assert.IsType<AppEncryptionDeclarationResponse>(response);
        }

        /// <summary>
        /// Test BuildsAppEncryptionDeclarationGetToOneRelationship
        /// </summary>
        [Fact]
        public void BuildsAppEncryptionDeclarationGetToOneRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.BuildsAppEncryptionDeclarationGetToOneRelationship(id);
            //Assert.IsType<BuildAppEncryptionDeclarationLinkageResponse>(response);
        }

        /// <summary>
        /// Test BuildsAppEncryptionDeclarationUpdateToOneRelationship
        /// </summary>
        [Fact]
        public void BuildsAppEncryptionDeclarationUpdateToOneRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //BuildAppEncryptionDeclarationLinkageRequest buildAppEncryptionDeclarationLinkageRequest = null;
            //instance.BuildsAppEncryptionDeclarationUpdateToOneRelationship(id, buildAppEncryptionDeclarationLinkageRequest);
        }

        /// <summary>
        /// Test BuildsAppGetToOneRelated
        /// </summary>
        [Fact]
        public void BuildsAppGetToOneRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsApps = null;
            //var response = instance.BuildsAppGetToOneRelated(id, fieldsApps);
            //Assert.IsType<AppResponse>(response);
        }

        /// <summary>
        /// Test BuildsAppStoreVersionGetToOneRelated
        /// </summary>
        [Fact]
        public void BuildsAppStoreVersionGetToOneRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsAppStoreVersionExperiments = null;
            //List<string>? fieldsAgeRatingDeclarations = null;
            //List<string>? fieldsAppStoreVersionSubmissions = null;
            //List<string>? fieldsAppStoreReviewDetails = null;
            //List<string>? fieldsAppStoreVersions = null;
            //List<string>? fieldsApps = null;
            //List<string>? fieldsRoutingAppCoverages = null;
            //List<string>? fieldsAppClipDefaultExperiences = null;
            //List<string>? fieldsAppStoreVersionPhasedReleases = null;
            //List<string>? fieldsBuilds = null;
            //List<string>? fieldsAppStoreVersionLocalizations = null;
            //int? limitAppStoreVersionLocalizations = null;
            //int? limitAppStoreVersionExperiments = null;
            //List<string>? include = null;
            //var response = instance.BuildsAppStoreVersionGetToOneRelated(id, fieldsAppStoreVersionExperiments, fieldsAgeRatingDeclarations, fieldsAppStoreVersionSubmissions, fieldsAppStoreReviewDetails, fieldsAppStoreVersions, fieldsApps, fieldsRoutingAppCoverages, fieldsAppClipDefaultExperiences, fieldsAppStoreVersionPhasedReleases, fieldsBuilds, fieldsAppStoreVersionLocalizations, limitAppStoreVersionLocalizations, limitAppStoreVersionExperiments, include);
            //Assert.IsType<AppStoreVersionResponse>(response);
        }

        /// <summary>
        /// Test BuildsBetaAppReviewSubmissionGetToOneRelated
        /// </summary>
        [Fact]
        public void BuildsBetaAppReviewSubmissionGetToOneRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsBetaAppReviewSubmissions = null;
            //var response = instance.BuildsBetaAppReviewSubmissionGetToOneRelated(id, fieldsBetaAppReviewSubmissions);
            //Assert.IsType<BetaAppReviewSubmissionResponse>(response);
        }

        /// <summary>
        /// Test BuildsBetaBuildLocalizationsGetToManyRelated
        /// </summary>
        [Fact]
        public void BuildsBetaBuildLocalizationsGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsBetaBuildLocalizations = null;
            //int? limit = null;
            //var response = instance.BuildsBetaBuildLocalizationsGetToManyRelated(id, fieldsBetaBuildLocalizations, limit);
            //Assert.IsType<BetaBuildLocalizationsResponse>(response);
        }

        /// <summary>
        /// Test BuildsBetaGroupsCreateToManyRelationship
        /// </summary>
        [Fact]
        public void BuildsBetaGroupsCreateToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest = null;
            //instance.BuildsBetaGroupsCreateToManyRelationship(id, buildBetaGroupsLinkagesRequest);
        }

        /// <summary>
        /// Test BuildsBetaGroupsDeleteToManyRelationship
        /// </summary>
        [Fact]
        public void BuildsBetaGroupsDeleteToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest = null;
            //instance.BuildsBetaGroupsDeleteToManyRelationship(id, buildBetaGroupsLinkagesRequest);
        }

        /// <summary>
        /// Test BuildsBuildBetaDetailGetToOneRelated
        /// </summary>
        [Fact]
        public void BuildsBuildBetaDetailGetToOneRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsBuildBetaDetails = null;
            //var response = instance.BuildsBuildBetaDetailGetToOneRelated(id, fieldsBuildBetaDetails);
            //Assert.IsType<BuildBetaDetailResponse>(response);
        }

        /// <summary>
        /// Test BuildsDiagnosticSignaturesGetToManyRelated
        /// </summary>
        [Fact]
        public void BuildsDiagnosticSignaturesGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? filterDiagnosticType = null;
            //List<string>? fieldsDiagnosticSignatures = null;
            //int? limit = null;
            //var response = instance.BuildsDiagnosticSignaturesGetToManyRelated(id, filterDiagnosticType, fieldsDiagnosticSignatures, limit);
            //Assert.IsType<DiagnosticSignaturesResponse>(response);
        }

        /// <summary>
        /// Test BuildsGetCollection
        /// </summary>
        [Fact]
        public void BuildsGetCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string>? filterBetaAppReviewSubmissionBetaReviewState = null;
            //List<string>? filterBuildAudienceType = null;
            //List<string>? filterExpired = null;
            //List<string>? filterPreReleaseVersionPlatform = null;
            //List<string>? filterPreReleaseVersionVersion = null;
            //List<string>? filterProcessingState = null;
            //List<string>? filterUsesNonExemptEncryption = null;
            //List<string>? filterVersion = null;
            //List<string>? filterApp = null;
            //List<string>? filterAppStoreVersion = null;
            //List<string>? filterBetaGroups = null;
            //List<string>? filterPreReleaseVersion = null;
            //List<string>? filterId = null;
            //List<string>? sort = null;
            //List<string>? fieldsBuilds = null;
            //int? limit = null;
            //List<string>? include = null;
            //List<string>? fieldsDiagnosticSignatures = null;
            //List<string>? fieldsBuildIcons = null;
            //List<string>? fieldsBuildBetaDetails = null;
            //List<string>? fieldsBetaAppReviewSubmissions = null;
            //List<string>? fieldsBetaTesters = null;
            //List<string>? fieldsAppStoreVersions = null;
            //List<string>? fieldsBetaBuildLocalizations = null;
            //List<string>? fieldsPreReleaseVersions = null;
            //List<string>? fieldsAppEncryptionDeclarations = null;
            //List<string>? fieldsApps = null;
            //List<string>? fieldsPerfPowerMetrics = null;
            //int? limitBetaBuildLocalizations = null;
            //int? limitBetaGroups = null;
            //int? limitBuildBundles = null;
            //int? limitIcons = null;
            //int? limitIndividualTesters = null;
            //var response = instance.BuildsGetCollection(filterBetaAppReviewSubmissionBetaReviewState, filterBuildAudienceType, filterExpired, filterPreReleaseVersionPlatform, filterPreReleaseVersionVersion, filterProcessingState, filterUsesNonExemptEncryption, filterVersion, filterApp, filterAppStoreVersion, filterBetaGroups, filterPreReleaseVersion, filterId, sort, fieldsBuilds, limit, include, fieldsDiagnosticSignatures, fieldsBuildIcons, fieldsBuildBetaDetails, fieldsBetaAppReviewSubmissions, fieldsBetaTesters, fieldsAppStoreVersions, fieldsBetaBuildLocalizations, fieldsPreReleaseVersions, fieldsAppEncryptionDeclarations, fieldsApps, fieldsPerfPowerMetrics, limitBetaBuildLocalizations, limitBetaGroups, limitBuildBundles, limitIcons, limitIndividualTesters);
            //Assert.IsType<BuildsResponse>(response);
        }

        /// <summary>
        /// Test BuildsGetInstance
        /// </summary>
        [Fact]
        public void BuildsGetInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsBuilds = null;
            //List<string>? include = null;
            //List<string>? fieldsDiagnosticSignatures = null;
            //List<string>? fieldsBuildIcons = null;
            //List<string>? fieldsBuildBetaDetails = null;
            //List<string>? fieldsBetaAppReviewSubmissions = null;
            //List<string>? fieldsBetaTesters = null;
            //List<string>? fieldsAppStoreVersions = null;
            //List<string>? fieldsBetaBuildLocalizations = null;
            //List<string>? fieldsPreReleaseVersions = null;
            //List<string>? fieldsAppEncryptionDeclarations = null;
            //List<string>? fieldsApps = null;
            //List<string>? fieldsPerfPowerMetrics = null;
            //int? limitBetaBuildLocalizations = null;
            //int? limitBetaGroups = null;
            //int? limitBuildBundles = null;
            //int? limitIcons = null;
            //int? limitIndividualTesters = null;
            //var response = instance.BuildsGetInstance(id, fieldsBuilds, include, fieldsDiagnosticSignatures, fieldsBuildIcons, fieldsBuildBetaDetails, fieldsBetaAppReviewSubmissions, fieldsBetaTesters, fieldsAppStoreVersions, fieldsBetaBuildLocalizations, fieldsPreReleaseVersions, fieldsAppEncryptionDeclarations, fieldsApps, fieldsPerfPowerMetrics, limitBetaBuildLocalizations, limitBetaGroups, limitBuildBundles, limitIcons, limitIndividualTesters);
            //Assert.IsType<BuildResponse>(response);
        }

        /// <summary>
        /// Test BuildsIconsGetToManyRelated
        /// </summary>
        [Fact]
        public void BuildsIconsGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsBuildIcons = null;
            //int? limit = null;
            //var response = instance.BuildsIconsGetToManyRelated(id, fieldsBuildIcons, limit);
            //Assert.IsType<BuildIconsResponse>(response);
        }

        /// <summary>
        /// Test BuildsIndividualTestersCreateToManyRelationship
        /// </summary>
        [Fact]
        public void BuildsIndividualTestersCreateToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest = null;
            //instance.BuildsIndividualTestersCreateToManyRelationship(id, buildIndividualTestersLinkagesRequest);
        }

        /// <summary>
        /// Test BuildsIndividualTestersDeleteToManyRelationship
        /// </summary>
        [Fact]
        public void BuildsIndividualTestersDeleteToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest = null;
            //instance.BuildsIndividualTestersDeleteToManyRelationship(id, buildIndividualTestersLinkagesRequest);
        }

        /// <summary>
        /// Test BuildsIndividualTestersGetToManyRelated
        /// </summary>
        [Fact]
        public void BuildsIndividualTestersGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsBetaTesters = null;
            //int? limit = null;
            //var response = instance.BuildsIndividualTestersGetToManyRelated(id, fieldsBetaTesters, limit);
            //Assert.IsType<BetaTestersResponse>(response);
        }

        /// <summary>
        /// Test BuildsIndividualTestersGetToManyRelationship
        /// </summary>
        [Fact]
        public void BuildsIndividualTestersGetToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //var response = instance.BuildsIndividualTestersGetToManyRelationship(id, limit);
            //Assert.IsType<BuildIndividualTestersLinkagesResponse>(response);
        }

        /// <summary>
        /// Test BuildsPerfPowerMetricsGetToManyRelated
        /// </summary>
        [Fact]
        public void BuildsPerfPowerMetricsGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? filterDeviceType = null;
            //List<string>? filterMetricType = null;
            //List<string>? filterPlatform = null;
            //var response = instance.BuildsPerfPowerMetricsGetToManyRelated(id, filterDeviceType, filterMetricType, filterPlatform);
            //Assert.IsType<XcodeMetrics>(response);
        }

        /// <summary>
        /// Test BuildsPreReleaseVersionGetToOneRelated
        /// </summary>
        [Fact]
        public void BuildsPreReleaseVersionGetToOneRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsPreReleaseVersions = null;
            //var response = instance.BuildsPreReleaseVersionGetToOneRelated(id, fieldsPreReleaseVersions);
            //Assert.IsType<PrereleaseVersionResponse>(response);
        }

        /// <summary>
        /// Test BuildsUpdateInstance
        /// </summary>
        [Fact]
        public void BuildsUpdateInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //BuildUpdateRequest buildUpdateRequest = null;
            //var response = instance.BuildsUpdateInstance(id, buildUpdateRequest);
            //Assert.IsType<BuildResponse>(response);
        }
    }
}
