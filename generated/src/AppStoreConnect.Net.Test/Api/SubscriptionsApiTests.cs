/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using AppStoreConnect.Client;
using AppStoreConnect.Api;
// uncomment below to import models
//using AppStoreConnect.Model;

namespace AppStoreConnect.Test.Api
{
    /// <summary>
    ///  Class for testing SubscriptionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SubscriptionsApiTests : IDisposable
    {
        private SubscriptionsApi instance;

        public SubscriptionsApiTests()
        {
            instance = new SubscriptionsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SubscriptionsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SubscriptionsApi
            //Assert.IsType<SubscriptionsApi>(instance);
        }

        /// <summary>
        /// Test SubscriptionsAppStoreReviewScreenshotGetToOneRelated
        /// </summary>
        [Fact]
        public void SubscriptionsAppStoreReviewScreenshotGetToOneRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsSubscriptionAppStoreReviewScreenshots = null;
            //List<string>? fieldsSubscriptions = null;
            //List<string>? include = null;
            //var response = instance.SubscriptionsAppStoreReviewScreenshotGetToOneRelated(id, fieldsSubscriptionAppStoreReviewScreenshots, fieldsSubscriptions, include);
            //Assert.IsType<SubscriptionAppStoreReviewScreenshotResponse>(response);
        }

        /// <summary>
        /// Test SubscriptionsCreateInstance
        /// </summary>
        [Fact]
        public void SubscriptionsCreateInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SubscriptionCreateRequest subscriptionCreateRequest = null;
            //var response = instance.SubscriptionsCreateInstance(subscriptionCreateRequest);
            //Assert.IsType<SubscriptionResponse>(response);
        }

        /// <summary>
        /// Test SubscriptionsDeleteInstance
        /// </summary>
        [Fact]
        public void SubscriptionsDeleteInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.SubscriptionsDeleteInstance(id);
        }

        /// <summary>
        /// Test SubscriptionsGetInstance
        /// </summary>
        [Fact]
        public void SubscriptionsGetInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsSubscriptions = null;
            //List<string>? include = null;
            //List<string>? fieldsPromotedPurchases = null;
            //List<string>? fieldsSubscriptionPricePoints = null;
            //List<string>? fieldsSubscriptionPromotionalOffers = null;
            //List<string>? fieldsSubscriptionOfferCodes = null;
            //List<string>? fieldsSubscriptionAppStoreReviewScreenshots = null;
            //List<string>? fieldsSubscriptionPrices = null;
            //List<string>? fieldsSubscriptionIntroductoryOffers = null;
            //List<string>? fieldsSubscriptionLocalizations = null;
            //int? limitIntroductoryOffers = null;
            //int? limitOfferCodes = null;
            //int? limitPrices = null;
            //int? limitPromotionalOffers = null;
            //int? limitSubscriptionLocalizations = null;
            //var response = instance.SubscriptionsGetInstance(id, fieldsSubscriptions, include, fieldsPromotedPurchases, fieldsSubscriptionPricePoints, fieldsSubscriptionPromotionalOffers, fieldsSubscriptionOfferCodes, fieldsSubscriptionAppStoreReviewScreenshots, fieldsSubscriptionPrices, fieldsSubscriptionIntroductoryOffers, fieldsSubscriptionLocalizations, limitIntroductoryOffers, limitOfferCodes, limitPrices, limitPromotionalOffers, limitSubscriptionLocalizations);
            //Assert.IsType<SubscriptionResponse>(response);
        }

        /// <summary>
        /// Test SubscriptionsIntroductoryOffersDeleteToManyRelationship
        /// </summary>
        [Fact]
        public void SubscriptionsIntroductoryOffersDeleteToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //SubscriptionIntroductoryOffersLinkagesRequest subscriptionIntroductoryOffersLinkagesRequest = null;
            //instance.SubscriptionsIntroductoryOffersDeleteToManyRelationship(id, subscriptionIntroductoryOffersLinkagesRequest);
        }

        /// <summary>
        /// Test SubscriptionsIntroductoryOffersGetToManyRelated
        /// </summary>
        [Fact]
        public void SubscriptionsIntroductoryOffersGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? filterTerritory = null;
            //List<string>? fieldsSubscriptionPricePoints = null;
            //List<string>? fieldsSubscriptions = null;
            //List<string>? fieldsSubscriptionIntroductoryOffers = null;
            //List<string>? fieldsTerritories = null;
            //int? limit = null;
            //List<string>? include = null;
            //var response = instance.SubscriptionsIntroductoryOffersGetToManyRelated(id, filterTerritory, fieldsSubscriptionPricePoints, fieldsSubscriptions, fieldsSubscriptionIntroductoryOffers, fieldsTerritories, limit, include);
            //Assert.IsType<SubscriptionIntroductoryOffersResponse>(response);
        }

        /// <summary>
        /// Test SubscriptionsIntroductoryOffersGetToManyRelationship
        /// </summary>
        [Fact]
        public void SubscriptionsIntroductoryOffersGetToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //var response = instance.SubscriptionsIntroductoryOffersGetToManyRelationship(id, limit);
            //Assert.IsType<SubscriptionIntroductoryOffersLinkagesResponse>(response);
        }

        /// <summary>
        /// Test SubscriptionsOfferCodesGetToManyRelated
        /// </summary>
        [Fact]
        public void SubscriptionsOfferCodesGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? filterTerritory = null;
            //List<string>? fieldsSubscriptionOfferCodeCustomCodes = null;
            //List<string>? fieldsSubscriptionOfferCodes = null;
            //List<string>? fieldsSubscriptionOfferCodeOneTimeUseCodes = null;
            //List<string>? fieldsSubscriptions = null;
            //List<string>? fieldsSubscriptionOfferCodePrices = null;
            //int? limit = null;
            //int? limitOneTimeUseCodes = null;
            //int? limitCustomCodes = null;
            //int? limitPrices = null;
            //List<string>? include = null;
            //var response = instance.SubscriptionsOfferCodesGetToManyRelated(id, filterTerritory, fieldsSubscriptionOfferCodeCustomCodes, fieldsSubscriptionOfferCodes, fieldsSubscriptionOfferCodeOneTimeUseCodes, fieldsSubscriptions, fieldsSubscriptionOfferCodePrices, limit, limitOneTimeUseCodes, limitCustomCodes, limitPrices, include);
            //Assert.IsType<SubscriptionOfferCodesResponse>(response);
        }

        /// <summary>
        /// Test SubscriptionsPricePointsGetToManyRelated
        /// </summary>
        [Fact]
        public void SubscriptionsPricePointsGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? filterTerritory = null;
            //List<string>? fieldsSubscriptionPricePoints = null;
            //List<string>? fieldsTerritories = null;
            //int? limit = null;
            //List<string>? include = null;
            //var response = instance.SubscriptionsPricePointsGetToManyRelated(id, filterTerritory, fieldsSubscriptionPricePoints, fieldsTerritories, limit, include);
            //Assert.IsType<SubscriptionPricePointsResponse>(response);
        }

        /// <summary>
        /// Test SubscriptionsPricesDeleteToManyRelationship
        /// </summary>
        [Fact]
        public void SubscriptionsPricesDeleteToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //SubscriptionPricesLinkagesRequest subscriptionPricesLinkagesRequest = null;
            //instance.SubscriptionsPricesDeleteToManyRelationship(id, subscriptionPricesLinkagesRequest);
        }

        /// <summary>
        /// Test SubscriptionsPricesGetToManyRelated
        /// </summary>
        [Fact]
        public void SubscriptionsPricesGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? filterSubscriptionPricePoint = null;
            //List<string>? filterTerritory = null;
            //List<string>? fieldsSubscriptionPricePoints = null;
            //List<string>? fieldsSubscriptionPrices = null;
            //List<string>? fieldsTerritories = null;
            //int? limit = null;
            //List<string>? include = null;
            //var response = instance.SubscriptionsPricesGetToManyRelated(id, filterSubscriptionPricePoint, filterTerritory, fieldsSubscriptionPricePoints, fieldsSubscriptionPrices, fieldsTerritories, limit, include);
            //Assert.IsType<SubscriptionPricesResponse>(response);
        }

        /// <summary>
        /// Test SubscriptionsPricesGetToManyRelationship
        /// </summary>
        [Fact]
        public void SubscriptionsPricesGetToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //var response = instance.SubscriptionsPricesGetToManyRelationship(id, limit);
            //Assert.IsType<SubscriptionPricesLinkagesResponse>(response);
        }

        /// <summary>
        /// Test SubscriptionsPromotedPurchaseGetToOneRelated
        /// </summary>
        [Fact]
        public void SubscriptionsPromotedPurchaseGetToOneRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsPromotedPurchases = null;
            //List<string>? fieldsSubscriptions = null;
            //List<string>? fieldsInAppPurchases = null;
            //List<string>? fieldsPromotedPurchaseImages = null;
            //int? limitPromotionImages = null;
            //List<string>? include = null;
            //var response = instance.SubscriptionsPromotedPurchaseGetToOneRelated(id, fieldsPromotedPurchases, fieldsSubscriptions, fieldsInAppPurchases, fieldsPromotedPurchaseImages, limitPromotionImages, include);
            //Assert.IsType<PromotedPurchaseResponse>(response);
        }

        /// <summary>
        /// Test SubscriptionsPromotionalOffersGetToManyRelated
        /// </summary>
        [Fact]
        public void SubscriptionsPromotionalOffersGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? filterTerritory = null;
            //List<string>? fieldsSubscriptionPromotionalOffers = null;
            //List<string>? fieldsSubscriptions = null;
            //List<string>? fieldsSubscriptionPromotionalOfferPrices = null;
            //int? limit = null;
            //int? limitPrices = null;
            //List<string>? include = null;
            //var response = instance.SubscriptionsPromotionalOffersGetToManyRelated(id, filterTerritory, fieldsSubscriptionPromotionalOffers, fieldsSubscriptions, fieldsSubscriptionPromotionalOfferPrices, limit, limitPrices, include);
            //Assert.IsType<SubscriptionPromotionalOffersResponse>(response);
        }

        /// <summary>
        /// Test SubscriptionsSubscriptionLocalizationsGetToManyRelated
        /// </summary>
        [Fact]
        public void SubscriptionsSubscriptionLocalizationsGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsSubscriptions = null;
            //List<string>? fieldsSubscriptionLocalizations = null;
            //int? limit = null;
            //List<string>? include = null;
            //var response = instance.SubscriptionsSubscriptionLocalizationsGetToManyRelated(id, fieldsSubscriptions, fieldsSubscriptionLocalizations, limit, include);
            //Assert.IsType<SubscriptionLocalizationsResponse>(response);
        }

        /// <summary>
        /// Test SubscriptionsUpdateInstance
        /// </summary>
        [Fact]
        public void SubscriptionsUpdateInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //SubscriptionUpdateRequest subscriptionUpdateRequest = null;
            //var response = instance.SubscriptionsUpdateInstance(id, subscriptionUpdateRequest);
            //Assert.IsType<SubscriptionResponse>(response);
        }
    }
}
