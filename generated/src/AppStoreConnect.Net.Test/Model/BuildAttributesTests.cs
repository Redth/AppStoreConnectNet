/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using AppStoreConnect.Model;
using AppStoreConnect.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace AppStoreConnect.Test.Model
{
    /// <summary>
    ///  Class for testing BuildAttributes
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class BuildAttributesTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for BuildAttributes
        //private BuildAttributes instance;

        public BuildAttributesTests()
        {
            // TODO uncomment below to create an instance of BuildAttributes
            //instance = new BuildAttributes();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of BuildAttributes
        /// </summary>
        [Fact]
        public void BuildAttributesInstanceTest()
        {
            // TODO uncomment below to test "IsType" BuildAttributes
            //Assert.IsType<BuildAttributes>(instance);
        }


        /// <summary>
        /// Test the property '_Version'
        /// </summary>
        [Fact]
        public void _VersionTest()
        {
            // TODO unit test for the property '_Version'
        }
        /// <summary>
        /// Test the property 'UploadedDate'
        /// </summary>
        [Fact]
        public void UploadedDateTest()
        {
            // TODO unit test for the property 'UploadedDate'
        }
        /// <summary>
        /// Test the property 'ExpirationDate'
        /// </summary>
        [Fact]
        public void ExpirationDateTest()
        {
            // TODO unit test for the property 'ExpirationDate'
        }
        /// <summary>
        /// Test the property 'Expired'
        /// </summary>
        [Fact]
        public void ExpiredTest()
        {
            // TODO unit test for the property 'Expired'
        }
        /// <summary>
        /// Test the property 'MinOsVersion'
        /// </summary>
        [Fact]
        public void MinOsVersionTest()
        {
            // TODO unit test for the property 'MinOsVersion'
        }
        /// <summary>
        /// Test the property 'LsMinimumSystemVersion'
        /// </summary>
        [Fact]
        public void LsMinimumSystemVersionTest()
        {
            // TODO unit test for the property 'LsMinimumSystemVersion'
        }
        /// <summary>
        /// Test the property 'ComputedMinMacOsVersion'
        /// </summary>
        [Fact]
        public void ComputedMinMacOsVersionTest()
        {
            // TODO unit test for the property 'ComputedMinMacOsVersion'
        }
        /// <summary>
        /// Test the property 'IconAssetToken'
        /// </summary>
        [Fact]
        public void IconAssetTokenTest()
        {
            // TODO unit test for the property 'IconAssetToken'
        }
        /// <summary>
        /// Test the property 'ProcessingState'
        /// </summary>
        [Fact]
        public void ProcessingStateTest()
        {
            // TODO unit test for the property 'ProcessingState'
        }
        /// <summary>
        /// Test the property 'BuildAudienceType'
        /// </summary>
        [Fact]
        public void BuildAudienceTypeTest()
        {
            // TODO unit test for the property 'BuildAudienceType'
        }
        /// <summary>
        /// Test the property 'UsesNonExemptEncryption'
        /// </summary>
        [Fact]
        public void UsesNonExemptEncryptionTest()
        {
            // TODO unit test for the property 'UsesNonExemptEncryption'
        }

    }

}
